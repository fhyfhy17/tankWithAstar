// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_4_battle.proto

package com.ourpalm.tank.message;

public final class BATTLE_MSG {
  private BATTLE_MSG() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code PROTO_BATTLE.CMD_TYPE}
   */
  public enum CMD_TYPE
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>CMD_TYPE_BATTLE = 4;</code>
     */
    CMD_TYPE_BATTLE(0, 4),
    ;

    /**
     * <code>CMD_TYPE_BATTLE = 4;</code>
     */
    public static final int CMD_TYPE_BATTLE_VALUE = 4;


    public final int getNumber() { return value; }

    public static CMD_TYPE valueOf(int value) {
      switch (value) {
        case 4: return CMD_TYPE_BATTLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CMD_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CMD_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CMD_TYPE>() {
            public CMD_TYPE findValueByNumber(int number) {
              return CMD_TYPE.valueOf(number);
            }
          };

    private final int value;

    private CMD_TYPE(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PROTO_BATTLE.CMD_TYPE)
  }

  /**
   * Protobuf enum {@code PROTO_BATTLE.CMD_ID}
   */
  public enum CMD_ID
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>CTS_MOVE = 1;</code>
     *
     * <pre>
     *!移动
     * </pre>
     */
    CTS_MOVE(0, 1),
    /**
     * <code>CTS_AIM = 2;</code>
     *
     * <pre>
     *!瞄准
     * </pre>
     */
    CTS_AIM(1, 2),
    /**
     * <code>CTS_FIRE = 3;</code>
     *
     * <pre>
     *!开火
     * </pre>
     */
    CTS_FIRE(2, 3),
    /**
     * <code>CTS_HIT = 4;</code>
     *
     * <pre>
     *!命中
     * </pre>
     */
    CTS_HIT(3, 4),
    /**
     * <code>CTS_RELIVE = 5;</code>
     *
     * <pre>
     *!复活
     * </pre>
     */
    CTS_RELIVE(4, 5),
    /**
     * <code>CTS_ROBOT_MOVE = 6;</code>
     *
     * <pre>
     *AI移动(废弃)
     * </pre>
     */
    CTS_ROBOT_MOVE(5, 6),
    /**
     * <code>CTS_ROBOT_FIRE = 7;</code>
     *
     * <pre>
     *AI开火(废弃)
     * </pre>
     */
    CTS_ROBOT_FIRE(6, 7),
    /**
     * <code>CTS_ROBOT_HIT = 8;</code>
     *
     * <pre>
     *AI击中(废弃)
     * </pre>
     */
    CTS_ROBOT_HIT(7, 8),
    /**
     * <code>CTS_WAR_REPORT = 9;</code>
     *
     * <pre>
     *战报(空命令)
     * </pre>
     */
    CTS_WAR_REPORT(8, 9),
    /**
     * <code>CTS_USE_WAR_GOODS = 10;</code>
     *
     * <pre>
     *使用战场道具
     * </pre>
     */
    CTS_USE_WAR_GOODS(9, 10),
    /**
     * <code>STC_ATTR_SYN = 11;</code>
     *
     * <pre>
     *!同步坦克属性
     * </pre>
     */
    STC_ATTR_SYN(10, 11),
    /**
     * <code>STC_MOVE = 12;</code>
     *
     * <pre>
     *!移动
     * </pre>
     */
    STC_MOVE(11, 12),
    /**
     * <code>STC_AIM = 13;</code>
     *
     * <pre>
     *!瞄准
     * </pre>
     */
    STC_AIM(12, 13),
    /**
     * <code>STC_FIRE = 14;</code>
     *
     * <pre>
     *!开火
     * </pre>
     */
    STC_FIRE(13, 14),
    /**
     * <code>STC_HIT = 15;</code>
     *
     * <pre>
     *!命中
     * </pre>
     */
    STC_HIT(14, 15),
    /**
     * <code>STC_TANK_DIE = 16;</code>
     *
     * <pre>
     *!坦克死亡
     * </pre>
     */
    STC_TANK_DIE(15, 16),
    /**
     * <code>STC_TANK_RELIVE = 17;</code>
     *
     * <pre>
     *!坦克复活
     * </pre>
     */
    STC_TANK_RELIVE(16, 17),
    /**
     * <code>STC_WAR_REPORT = 18;</code>
     *
     * <pre>
     *!战报
     * </pre>
     */
    STC_WAR_REPORT(17, 18),
    /**
     * <code>STC_HIT_EFFECT = 19;</code>
     *
     * <pre>
     *命中效果
     * </pre>
     */
    STC_HIT_EFFECT(18, 19),
    /**
     * <code>STC_WAR_SCORE = 20;</code>
     *
     * <pre>
     *比赛比分
     * </pre>
     */
    STC_WAR_SCORE(19, 20),
    /**
     * <code>STC_HOLD_FLAG = 21;</code>
     *
     * <pre>
     *占领旗子 
     * </pre>
     */
    STC_HOLD_FLAG(20, 21),
    /**
     * <code>STC_HOLD_STOP = 22;</code>
     *
     * <pre>
     *占领取消 (空命令)
     * </pre>
     */
    STC_HOLD_STOP(21, 22),
    /**
     * <code>STC_HOLD_PAUSE = 23;</code>
     *
     * <pre>
     *占领暂停 (空命令)
     * </pre>
     */
    STC_HOLD_PAUSE(22, 23),
    /**
     * <code>STC_KILL_TIPS = 24;</code>
     *
     * <pre>
     *击杀提示信息 
     * </pre>
     */
    STC_KILL_TIPS(23, 24),
    /**
     * <code>STC_DEL_EFFECT = 25;</code>
     *
     * <pre>
     *删除buff效果
     * </pre>
     */
    STC_DEL_EFFECT(24, 25),
    /**
     * <code>STC_USE_WAR_GOODS = 26;</code>
     *
     * <pre>
     *使用战场道具返回
     * </pre>
     */
    STC_USE_WAR_GOODS(25, 26),
    /**
     * <code>STC_MINE_BOMB = 27;</code>
     *
     * <pre>
     *地雷爆炸
     * </pre>
     */
    STC_MINE_BOMB(26, 27),
    /**
     * <code>STC_MINE_LOCATION = 28;</code>
     *
     * <pre>
     *地雷位置
     * </pre>
     */
    STC_MINE_LOCATION(27, 28),
    /**
     * <code>STC_USE_WAR_EFFECT = 29;</code>
     *
     * <pre>
     *使用道具效果
     * </pre>
     */
    STC_USE_WAR_EFFECT(28, 29),
    /**
     * <code>CTS_USE_SKILL = 30;</code>
     *
     * <pre>
     *使用技能
     * </pre>
     */
    CTS_USE_SKILL(29, 30),
    /**
     * <code>STC_USE_SKILL = 31;</code>
     *
     * <pre>
     *使用技能返回
     * </pre>
     */
    STC_USE_SKILL(30, 31),
    /**
     * <code>STC_USE_SKILL_EFFECT = 32;</code>
     *
     * <pre>
     *使用技能效果
     * </pre>
     */
    STC_USE_SKILL_EFFECT(31, 32),
    /**
     * <code>STC_CLEAR_FILE_COOL = 33;</code>
     *
     * <pre>
     *清除开炮cd (空命令)
     * </pre>
     */
    STC_CLEAR_FILE_COOL(32, 33),
    /**
     * <code>STC_USER_WAR_RECORD = 34;</code>
     *
     * <pre>
     *玩家战绩信息
     * </pre>
     */
    STC_USER_WAR_RECORD(33, 34),
    /**
     * <code>STC_AI_MOVE = 35;</code>
     *
     * <pre>
     *AI移动
     * </pre>
     */
    STC_AI_MOVE(34, 35),
    /**
     * <code>STC_AI_FIRE = 36;</code>
     *
     * <pre>
     *AI开火
     * </pre>
     */
    STC_AI_FIRE(35, 36),
    /**
     * <code>STC_DROP_LOCATION = 37;</code>
     *
     * <pre>
     *战场掉落主推消息
     * </pre>
     */
    STC_DROP_LOCATION(36, 37),
    /**
     * <code>STC_DROP_CLEAR = 38;</code>
     *
     * <pre>
     *战场掉落清除
     * </pre>
     */
    STC_DROP_CLEAR(37, 38),
    /**
     * <code>STC_DROP_DRAW = 39;</code>
     *
     * <pre>
     *领取战场掉落主推消息
     * </pre>
     */
    STC_DROP_DRAW(38, 39),
    /**
     * <code>CTS_HANGUP = 40;</code>
     *
     * <pre>
     *挂机(空命令)
     * </pre>
     */
    CTS_HANGUP(39, 40),
    ;

    /**
     * <code>CTS_MOVE = 1;</code>
     *
     * <pre>
     *!移动
     * </pre>
     */
    public static final int CTS_MOVE_VALUE = 1;
    /**
     * <code>CTS_AIM = 2;</code>
     *
     * <pre>
     *!瞄准
     * </pre>
     */
    public static final int CTS_AIM_VALUE = 2;
    /**
     * <code>CTS_FIRE = 3;</code>
     *
     * <pre>
     *!开火
     * </pre>
     */
    public static final int CTS_FIRE_VALUE = 3;
    /**
     * <code>CTS_HIT = 4;</code>
     *
     * <pre>
     *!命中
     * </pre>
     */
    public static final int CTS_HIT_VALUE = 4;
    /**
     * <code>CTS_RELIVE = 5;</code>
     *
     * <pre>
     *!复活
     * </pre>
     */
    public static final int CTS_RELIVE_VALUE = 5;
    /**
     * <code>CTS_ROBOT_MOVE = 6;</code>
     *
     * <pre>
     *AI移动(废弃)
     * </pre>
     */
    public static final int CTS_ROBOT_MOVE_VALUE = 6;
    /**
     * <code>CTS_ROBOT_FIRE = 7;</code>
     *
     * <pre>
     *AI开火(废弃)
     * </pre>
     */
    public static final int CTS_ROBOT_FIRE_VALUE = 7;
    /**
     * <code>CTS_ROBOT_HIT = 8;</code>
     *
     * <pre>
     *AI击中(废弃)
     * </pre>
     */
    public static final int CTS_ROBOT_HIT_VALUE = 8;
    /**
     * <code>CTS_WAR_REPORT = 9;</code>
     *
     * <pre>
     *战报(空命令)
     * </pre>
     */
    public static final int CTS_WAR_REPORT_VALUE = 9;
    /**
     * <code>CTS_USE_WAR_GOODS = 10;</code>
     *
     * <pre>
     *使用战场道具
     * </pre>
     */
    public static final int CTS_USE_WAR_GOODS_VALUE = 10;
    /**
     * <code>STC_ATTR_SYN = 11;</code>
     *
     * <pre>
     *!同步坦克属性
     * </pre>
     */
    public static final int STC_ATTR_SYN_VALUE = 11;
    /**
     * <code>STC_MOVE = 12;</code>
     *
     * <pre>
     *!移动
     * </pre>
     */
    public static final int STC_MOVE_VALUE = 12;
    /**
     * <code>STC_AIM = 13;</code>
     *
     * <pre>
     *!瞄准
     * </pre>
     */
    public static final int STC_AIM_VALUE = 13;
    /**
     * <code>STC_FIRE = 14;</code>
     *
     * <pre>
     *!开火
     * </pre>
     */
    public static final int STC_FIRE_VALUE = 14;
    /**
     * <code>STC_HIT = 15;</code>
     *
     * <pre>
     *!命中
     * </pre>
     */
    public static final int STC_HIT_VALUE = 15;
    /**
     * <code>STC_TANK_DIE = 16;</code>
     *
     * <pre>
     *!坦克死亡
     * </pre>
     */
    public static final int STC_TANK_DIE_VALUE = 16;
    /**
     * <code>STC_TANK_RELIVE = 17;</code>
     *
     * <pre>
     *!坦克复活
     * </pre>
     */
    public static final int STC_TANK_RELIVE_VALUE = 17;
    /**
     * <code>STC_WAR_REPORT = 18;</code>
     *
     * <pre>
     *!战报
     * </pre>
     */
    public static final int STC_WAR_REPORT_VALUE = 18;
    /**
     * <code>STC_HIT_EFFECT = 19;</code>
     *
     * <pre>
     *命中效果
     * </pre>
     */
    public static final int STC_HIT_EFFECT_VALUE = 19;
    /**
     * <code>STC_WAR_SCORE = 20;</code>
     *
     * <pre>
     *比赛比分
     * </pre>
     */
    public static final int STC_WAR_SCORE_VALUE = 20;
    /**
     * <code>STC_HOLD_FLAG = 21;</code>
     *
     * <pre>
     *占领旗子 
     * </pre>
     */
    public static final int STC_HOLD_FLAG_VALUE = 21;
    /**
     * <code>STC_HOLD_STOP = 22;</code>
     *
     * <pre>
     *占领取消 (空命令)
     * </pre>
     */
    public static final int STC_HOLD_STOP_VALUE = 22;
    /**
     * <code>STC_HOLD_PAUSE = 23;</code>
     *
     * <pre>
     *占领暂停 (空命令)
     * </pre>
     */
    public static final int STC_HOLD_PAUSE_VALUE = 23;
    /**
     * <code>STC_KILL_TIPS = 24;</code>
     *
     * <pre>
     *击杀提示信息 
     * </pre>
     */
    public static final int STC_KILL_TIPS_VALUE = 24;
    /**
     * <code>STC_DEL_EFFECT = 25;</code>
     *
     * <pre>
     *删除buff效果
     * </pre>
     */
    public static final int STC_DEL_EFFECT_VALUE = 25;
    /**
     * <code>STC_USE_WAR_GOODS = 26;</code>
     *
     * <pre>
     *使用战场道具返回
     * </pre>
     */
    public static final int STC_USE_WAR_GOODS_VALUE = 26;
    /**
     * <code>STC_MINE_BOMB = 27;</code>
     *
     * <pre>
     *地雷爆炸
     * </pre>
     */
    public static final int STC_MINE_BOMB_VALUE = 27;
    /**
     * <code>STC_MINE_LOCATION = 28;</code>
     *
     * <pre>
     *地雷位置
     * </pre>
     */
    public static final int STC_MINE_LOCATION_VALUE = 28;
    /**
     * <code>STC_USE_WAR_EFFECT = 29;</code>
     *
     * <pre>
     *使用道具效果
     * </pre>
     */
    public static final int STC_USE_WAR_EFFECT_VALUE = 29;
    /**
     * <code>CTS_USE_SKILL = 30;</code>
     *
     * <pre>
     *使用技能
     * </pre>
     */
    public static final int CTS_USE_SKILL_VALUE = 30;
    /**
     * <code>STC_USE_SKILL = 31;</code>
     *
     * <pre>
     *使用技能返回
     * </pre>
     */
    public static final int STC_USE_SKILL_VALUE = 31;
    /**
     * <code>STC_USE_SKILL_EFFECT = 32;</code>
     *
     * <pre>
     *使用技能效果
     * </pre>
     */
    public static final int STC_USE_SKILL_EFFECT_VALUE = 32;
    /**
     * <code>STC_CLEAR_FILE_COOL = 33;</code>
     *
     * <pre>
     *清除开炮cd (空命令)
     * </pre>
     */
    public static final int STC_CLEAR_FILE_COOL_VALUE = 33;
    /**
     * <code>STC_USER_WAR_RECORD = 34;</code>
     *
     * <pre>
     *玩家战绩信息
     * </pre>
     */
    public static final int STC_USER_WAR_RECORD_VALUE = 34;
    /**
     * <code>STC_AI_MOVE = 35;</code>
     *
     * <pre>
     *AI移动
     * </pre>
     */
    public static final int STC_AI_MOVE_VALUE = 35;
    /**
     * <code>STC_AI_FIRE = 36;</code>
     *
     * <pre>
     *AI开火
     * </pre>
     */
    public static final int STC_AI_FIRE_VALUE = 36;
    /**
     * <code>STC_DROP_LOCATION = 37;</code>
     *
     * <pre>
     *战场掉落主推消息
     * </pre>
     */
    public static final int STC_DROP_LOCATION_VALUE = 37;
    /**
     * <code>STC_DROP_CLEAR = 38;</code>
     *
     * <pre>
     *战场掉落清除
     * </pre>
     */
    public static final int STC_DROP_CLEAR_VALUE = 38;
    /**
     * <code>STC_DROP_DRAW = 39;</code>
     *
     * <pre>
     *领取战场掉落主推消息
     * </pre>
     */
    public static final int STC_DROP_DRAW_VALUE = 39;
    /**
     * <code>CTS_HANGUP = 40;</code>
     *
     * <pre>
     *挂机(空命令)
     * </pre>
     */
    public static final int CTS_HANGUP_VALUE = 40;


    public final int getNumber() { return value; }

    public static CMD_ID valueOf(int value) {
      switch (value) {
        case 1: return CTS_MOVE;
        case 2: return CTS_AIM;
        case 3: return CTS_FIRE;
        case 4: return CTS_HIT;
        case 5: return CTS_RELIVE;
        case 6: return CTS_ROBOT_MOVE;
        case 7: return CTS_ROBOT_FIRE;
        case 8: return CTS_ROBOT_HIT;
        case 9: return CTS_WAR_REPORT;
        case 10: return CTS_USE_WAR_GOODS;
        case 11: return STC_ATTR_SYN;
        case 12: return STC_MOVE;
        case 13: return STC_AIM;
        case 14: return STC_FIRE;
        case 15: return STC_HIT;
        case 16: return STC_TANK_DIE;
        case 17: return STC_TANK_RELIVE;
        case 18: return STC_WAR_REPORT;
        case 19: return STC_HIT_EFFECT;
        case 20: return STC_WAR_SCORE;
        case 21: return STC_HOLD_FLAG;
        case 22: return STC_HOLD_STOP;
        case 23: return STC_HOLD_PAUSE;
        case 24: return STC_KILL_TIPS;
        case 25: return STC_DEL_EFFECT;
        case 26: return STC_USE_WAR_GOODS;
        case 27: return STC_MINE_BOMB;
        case 28: return STC_MINE_LOCATION;
        case 29: return STC_USE_WAR_EFFECT;
        case 30: return CTS_USE_SKILL;
        case 31: return STC_USE_SKILL;
        case 32: return STC_USE_SKILL_EFFECT;
        case 33: return STC_CLEAR_FILE_COOL;
        case 34: return STC_USER_WAR_RECORD;
        case 35: return STC_AI_MOVE;
        case 36: return STC_AI_FIRE;
        case 37: return STC_DROP_LOCATION;
        case 38: return STC_DROP_CLEAR;
        case 39: return STC_DROP_DRAW;
        case 40: return CTS_HANGUP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CMD_ID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CMD_ID>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CMD_ID>() {
            public CMD_ID findValueByNumber(int number) {
              return CMD_ID.valueOf(number);
            }
          };

    private final int value;

    private CMD_ID(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PROTO_BATTLE.CMD_ID)
  }

  /**
   * Protobuf enum {@code PROTO_BATTLE.AttrType}
   */
  public enum AttrType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>hp = 1;</code>
     *
     * <pre>
     *当前血量
     * </pre>
     */
    hp(0, 1),
    /**
     * <code>maxHp = 2;</code>
     */
    maxHp(1, 2),
    /**
     * <code>fdef = 3;</code>
     *
     * <pre>
     *前护甲
     * </pre>
     */
    fdef(2, 3),
    /**
     * <code>idef = 4;</code>
     *
     * <pre>
     *侧护甲
     * </pre>
     */
    idef(3, 4),
    /**
     * <code>bdef = 5;</code>
     *
     * <pre>
     *后护甲
     * </pre>
     */
    bdef(4, 5),
    /**
     * <code>derate = 6;</code>
     *
     * <pre>
     *伤害减免
     * </pre>
     */
    derate(5, 6),
    /**
     * <code>fdodge = 7;</code>
     *
     * <pre>
     *前跳弹值
     * </pre>
     */
    fdodge(6, 7),
    /**
     * <code>idodge = 8;</code>
     *
     * <pre>
     *侧跳弹值
     * </pre>
     */
    idodge(7, 8),
    /**
     * <code>bdodge = 9;</code>
     *
     * <pre>
     *后跳弹值
     * </pre>
     */
    bdodge(8, 9),
    /**
     * <code>atk = 10;</code>
     *
     * <pre>
     *攻击力
     * </pre>
     */
    atk(9, 10),
    /**
     * <code>chuanjia = 11;</code>
     *
     * <pre>
     *穿甲值
     * </pre>
     */
    chuanjia(10, 11),
    /**
     * <code>chuanjia_rat = 12;</code>
     *
     * <pre>
     *穿甲浮动比率
     * </pre>
     */
    chuanjia_rat(11, 12),
    /**
     * <code>mul_chuanjia = 13;</code>
     *
     * <pre>
     *穿甲暴击倍率
     * </pre>
     */
    mul_chuanjia(12, 13),
    /**
     * <code>mul_dodge = 14;</code>
     *
     * <pre>
     *跳弹伤害倍率
     * </pre>
     */
    mul_dodge(13, 14),
    /**
     * <code>range = 15;</code>
     *
     * <pre>
     *射程
     * </pre>
     */
    range(14, 15),
    /**
     * <code>danjia_time = 16;</code>
     *
     * <pre>
     *弹夹填弹时间
     * </pre>
     */
    danjia_time(15, 16),
    /**
     * <code>danjia_num = 17;</code>
     *
     * <pre>
     *弹夹填装个数
     * </pre>
     */
    danjia_num(16, 17),
    /**
     * <code>speed = 18;</code>
     *
     * <pre>
     *速度
     * </pre>
     */
    speed(17, 18),
    /**
     * <code>rotate_speed = 19;</code>
     *
     * <pre>
     *车身转动速度
     * </pre>
     */
    rotate_speed(18, 19),
    /**
     * <code>can_pre = 20;</code>
     *
     * <pre>
     *火炮精度
     * </pre>
     */
    can_pre(19, 20),
    /**
     * <code>focal_radil_move = 21;</code>
     *
     * <pre>
     *准心半径_移动
     * </pre>
     */
    focal_radil_move(20, 21),
    /**
     * <code>focal_radil_lock = 22;</code>
     *
     * <pre>
     *准心半径_锁定
     * </pre>
     */
    focal_radil_lock(21, 22),
    /**
     * <code>focal_radil_static = 23;</code>
     *
     * <pre>
     *准心半径_静止
     * </pre>
     */
    focal_radil_static(22, 23),
    /**
     * <code>focal_radil_fire = 24;</code>
     *
     * <pre>
     *准心半径_开火
     * </pre>
     */
    focal_radil_fire(23, 24),
    /**
     * <code>focal_speed_move = 25;</code>
     *
     * <pre>
     *准心缩放速度_移动
     * </pre>
     */
    focal_speed_move(24, 25),
    /**
     * <code>focal_speed_lock = 26;</code>
     *
     * <pre>
     *准心缩放速度_锁定
     * </pre>
     */
    focal_speed_lock(25, 26),
    /**
     * <code>focal_speed_static = 27;</code>
     *
     * <pre>
     *准心缩放速度_静止
     * </pre>
     */
    focal_speed_static(26, 27),
    /**
     * <code>focal_speed_fire = 28;</code>
     *
     * <pre>
     *准心缩放速度_开火
     * </pre>
     */
    focal_speed_fire(27, 28),
    /**
     * <code>camera_ratate_speed = 29;</code>
     *
     * <pre>
     *摄像机旋转速度
     * </pre>
     */
    camera_ratate_speed(28, 29),
    /**
     * <code>followcamera_speed = 30;</code>
     *
     * <pre>
     *炮台跟随摄像机速度
     * </pre>
     */
    followcamera_speed(29, 30),
    /**
     * <code>breath_time = 31;</code>
     *
     * <pre>
     *准心缩放周期
     * </pre>
     */
    breath_time(30, 31),
    /**
     * <code>breath_mult_range = 32;</code>
     *
     * <pre>
     *准心半径周期
     * </pre>
     */
    breath_mult_range(31, 32),
    /**
     * <code>focal_distance_max = 33;</code>
     *
     * <pre>
     *准心锁定最远距离
     * </pre>
     */
    focal_distance_max(32, 33),
    /**
     * <code>focal_distance_min = 34;</code>
     *
     * <pre>
     *准心锁定最近距离
     * </pre>
     */
    focal_distance_min(33, 34),
    /**
     * <code>active_lock_angle = 35;</code>
     *
     * <pre>
     *手动锁定角度
     * </pre>
     */
    active_lock_angle(34, 35),
    /**
     * <code>cat_damed_rat = 36;</code>
     *
     * <pre>
     *火炮受损率
     * </pre>
     */
    cat_damed_rat(35, 36),
    /**
     * <code>cat_bre_rat = 37;</code>
     *
     * <pre>
     *履带受损率
     * </pre>
     */
    cat_bre_rat(36, 37),
    /**
     * <code>fire_rat = 38;</code>
     *
     * <pre>
     *机身起火率
     * </pre>
     */
    fire_rat(37, 38),
    /**
     * <code>speed_slow_rat = 39;</code>
     *
     * <pre>
     *引擎受损率
     * </pre>
     */
    speed_slow_rat(38, 39),
    /**
     * <code>cd_slow_rat = 40;</code>
     *
     * <pre>
     *弹药架受损率
     * </pre>
     */
    cd_slow_rat(39, 40),
    /**
     * <code>view = 41;</code>
     *
     * <pre>
     *视野
     * </pre>
     */
    view(40, 41),
    /**
     * <code>focalFireTime = 42;</code>
     *
     * <pre>
     *圈开火放大时间
     * </pre>
     */
    focalFireTime(41, 42),
    /**
     * <code>elevation = 43;</code>
     *
     * <pre>
     *俯视角
     * </pre>
     */
    elevation(42, 43),
    /**
     * <code>z_speed = 44;</code>
     *
     * <pre>
     *上下调整速度
     * </pre>
     */
    z_speed(43, 44),
    /**
     * <code>sidewayFrictionExtremumSlip = 45;</code>
     *
     * <pre>
     *车身旋转极值(默认5,范围1~无穷大)
     * </pre>
     */
    sidewayFrictionExtremumSlip(44, 45),
    /**
     * <code>auto_lock_angle = 47;</code>
     *
     * <pre>
     *自动锁定角度
     * </pre>
     */
    auto_lock_angle(45, 47),
    /**
     * <code>out_auto_lock_angle = 48;</code>
     *
     * <pre>
     *脱离自动锁定角度
     * </pre>
     */
    out_auto_lock_angle(46, 48),
    /**
     * <code>head_rotate_speed = 49;</code>
     *
     * <pre>
     *炮管锁定旋转角度
     * </pre>
     */
    head_rotate_speed(47, 49),
    /**
     * <code>head_auuto_rotate_speed = 50;</code>
     *
     * <pre>
     *炮管自动锁定旋转角度
     * </pre>
     */
    head_auuto_rotate_speed(48, 50),
    /**
     * <code>auto_lock_inertia_speed = 51;</code>
     *
     * <pre>
     *自动锁定惯性速度
     * </pre>
     */
    auto_lock_inertia_speed(49, 51),
    /**
     * <code>lock_itervaltime = 52;</code>
     *
     * <pre>
     *目标锁定间隔
     * </pre>
     */
    lock_itervaltime(50, 52),
    /**
     * <code>crew_hp = 53;</code>
     *
     * <pre>
     *成员血量加成比率
     * </pre>
     */
    crew_hp(51, 53),
    /**
     * <code>crew_act = 54;</code>
     *
     * <pre>
     *成员攻击加成比率
     * </pre>
     */
    crew_act(52, 54),
    /**
     * <code>crew_rate = 55;</code>
     *
     * <pre>
     *成员射速加成比率
     * </pre>
     */
    crew_rate(53, 55),
    /**
     * <code>crew_speed = 56;</code>
     *
     * <pre>
     *成员速度加成比率
     * </pre>
     */
    crew_speed(54, 56),
    /**
     * <code>acceleration_time_start = 57;</code>
     *
     * <pre>
     *加速曲线起始时间
     * </pre>
     */
    acceleration_time_start(55, 57),
    /**
     * <code>acceleration_value_start = 58;</code>
     *
     * <pre>
     *加速曲线起始值
     * </pre>
     */
    acceleration_value_start(56, 58),
    /**
     * <code>acceleration_time_end = 59;</code>
     *
     * <pre>
     *加速曲线结束时间
     * </pre>
     */
    acceleration_time_end(57, 59),
    /**
     * <code>acceleration_value_end = 60;</code>
     *
     * <pre>
     *加速曲线结束值
     * </pre>
     */
    acceleration_value_end(58, 60),
    /**
     * <code>acceleration_break_time_start = 61;</code>
     *
     * <pre>
     *加速衰减
     * </pre>
     */
    acceleration_break_time_start(59, 61),
    /**
     * <code>acceleration_break_value_start = 62;</code>
     */
    acceleration_break_value_start(60, 62),
    /**
     * <code>acceleration_break_time_end = 63;</code>
     */
    acceleration_break_time_end(61, 63),
    /**
     * <code>acceleration_break_value_end = 64;</code>
     */
    acceleration_break_value_end(62, 64),
    /**
     * <code>r_acceleration_time_start = 65;</code>
     *
     * <pre>
     *加速时旋转曲线
     * </pre>
     */
    r_acceleration_time_start(63, 65),
    /**
     * <code>r_acceleration_value_start = 66;</code>
     */
    r_acceleration_value_start(64, 66),
    /**
     * <code>r_acceleration_time_end = 67;</code>
     */
    r_acceleration_time_end(65, 67),
    /**
     * <code>r_acceleration_value_end = 68;</code>
     */
    r_acceleration_value_end(66, 68),
    /**
     * <code>r_acceleration_break_time_start = 69;</code>
     *
     * <pre>
     *加速时旋转衰减
     * </pre>
     */
    r_acceleration_break_time_start(67, 69),
    /**
     * <code>r_acceleration_break_value_start = 70;</code>
     */
    r_acceleration_break_value_start(68, 70),
    /**
     * <code>r_acceleration_break_time_end = 71;</code>
     */
    r_acceleration_break_time_end(69, 71),
    /**
     * <code>r_acceleration_break_value_end = 72;</code>
     */
    r_acceleration_break_value_end(70, 72),
    /**
     * <code>r_stay_time_start = 73;</code>
     *
     * <pre>
     *静止时旋转曲线
     * </pre>
     */
    r_stay_time_start(71, 73),
    /**
     * <code>r_stay_value_start = 74;</code>
     */
    r_stay_value_start(72, 74),
    /**
     * <code>r_stay_time_end = 75;</code>
     */
    r_stay_time_end(73, 75),
    /**
     * <code>r_stay_value_end = 76;</code>
     */
    r_stay_value_end(74, 76),
    /**
     * <code>r_stay_break_time_start = 77;</code>
     *
     * <pre>
     *静止时旋转衰减
     * </pre>
     */
    r_stay_break_time_start(75, 77),
    /**
     * <code>r_stay_break_value_start = 78;</code>
     */
    r_stay_break_value_start(76, 78),
    /**
     * <code>r_stay_break_time_end = 79;</code>
     */
    r_stay_break_time_end(77, 79),
    /**
     * <code>r_stay_break_value_end = 80;</code>
     */
    r_stay_break_value_end(78, 80),
    /**
     * <code>crew_chuanjia = 81;</code>
     *
     * <pre>
     *成员穿甲加成比率
     * </pre>
     */
    crew_chuanjia(79, 81),
    /**
     * <code>crew_fdef = 82;</code>
     *
     * <pre>
     *成员前护甲加成比率
     * </pre>
     */
    crew_fdef(80, 82),
    /**
     * <code>crew_idef = 83;</code>
     *
     * <pre>
     *成员侧护甲加成比率
     * </pre>
     */
    crew_idef(81, 83),
    /**
     * <code>crew_bdef = 84;</code>
     *
     * <pre>
     *成员后护甲加成比率
     * </pre>
     */
    crew_bdef(82, 84),
    /**
     * <code>stable_add = 85;</code>
     *
     * <pre>
     *稳定加成
     * </pre>
     */
    stable_add(83, 85),
    /**
     * <code>maxHp_add_rat = 86;</code>
     *
     * <pre>
     *最大血量加成比率
     * </pre>
     */
    maxHp_add_rat(84, 86),
    /**
     * <code>fdef_add_rat = 87;</code>
     *
     * <pre>
     *前护甲加成比率
     * </pre>
     */
    fdef_add_rat(85, 87),
    /**
     * <code>idef_add_rat = 88;</code>
     *
     * <pre>
     *侧护甲加成比率
     * </pre>
     */
    idef_add_rat(86, 88),
    /**
     * <code>bdef_add_rat = 89;</code>
     *
     * <pre>
     *后护甲加成比率
     * </pre>
     */
    bdef_add_rat(87, 89),
    /**
     * <code>atk_add_rat = 90;</code>
     *
     * <pre>
     *攻击力加成比率
     * </pre>
     */
    atk_add_rat(88, 90),
    /**
     * <code>chuanjia_add_rat = 91;</code>
     *
     * <pre>
     *穿甲值加成比率
     * </pre>
     */
    chuanjia_add_rat(89, 91),
    /**
     * <code>speed_add_rat = 92;</code>
     *
     * <pre>
     *速度加成比率
     * </pre>
     */
    speed_add_rat(90, 92),
    /**
     * <code>crew_maxHp_add_rat = 93;</code>
     *
     * <pre>
     *成员血量加成比率
     * </pre>
     */
    crew_maxHp_add_rat(91, 93),
    /**
     * <code>crew_atk_add_rat = 94;</code>
     *
     * <pre>
     *成员攻击加成比率
     * </pre>
     */
    crew_atk_add_rat(92, 94),
    /**
     * <code>crew_danjia_add_rat = 95;</code>
     *
     * <pre>
     *成员添弹时间加成比率
     * </pre>
     */
    crew_danjia_add_rat(93, 95),
    /**
     * <code>crew_speed_add_rat = 96;</code>
     *
     * <pre>
     *成员速度加成比率
     * </pre>
     */
    crew_speed_add_rat(94, 96),
    /**
     * <code>crew_chuanjia_add_rat = 97;</code>
     *
     * <pre>
     *成员穿甲加成比率
     * </pre>
     */
    crew_chuanjia_add_rat(95, 97),
    /**
     * <code>crew_fdef_add_rat = 98;</code>
     *
     * <pre>
     *成员前护甲加成比率
     * </pre>
     */
    crew_fdef_add_rat(96, 98),
    /**
     * <code>crew_idef_add_rat = 99;</code>
     *
     * <pre>
     *成员侧护甲加成比率
     * </pre>
     */
    crew_idef_add_rat(97, 99),
    /**
     * <code>crew_bdef_add_rat = 100;</code>
     *
     * <pre>
     *成员后护甲加成比率
     * </pre>
     */
    crew_bdef_add_rat(98, 100),
    /**
     * <code>weight = 101;</code>
     *
     * <pre>
     *重量
     * </pre>
     */
    weight(99, 101),
    /**
     * <code>positive_friction = 102;</code>
     *
     * <pre>
     *正向摩擦力
     * </pre>
     */
    positive_friction(100, 102),
    /**
     * <code>lateral_friction = 103;</code>
     *
     * <pre>
     *侧向摩擦力
     * </pre>
     */
    lateral_friction(101, 103),
    /**
     * <code>fire_skew = 104;</code>
     *
     * <pre>
     *开炮偏移
     * </pre>
     */
    fire_skew(102, 104),
    /**
     * <code>out_active_lock_angle = 105;</code>
     *
     * <pre>
     *脱离手动锁定角度
     * </pre>
     */
    out_active_lock_angle(103, 105),
    /**
     * <code>had_revolve = 106;</code>
     *
     * <pre>
     *是否能转动炮塔
     * </pre>
     */
    had_revolve(104, 106),
    /**
     * <code>sliding_speed = 107;</code>
     *
     * <pre>
     *滑屏速度
     * </pre>
     */
    sliding_speed(105, 107),
    /**
     * <code>wheel_weight = 108;</code>
     *
     * <pre>
     *轮子的重量
     * </pre>
     */
    wheel_weight(106, 108),
    /**
     * <code>sideways_extrenum_value = 109;</code>
     */
    sideways_extrenum_value(107, 109),
    /**
     * <code>sideways_asymptote_slip = 110;</code>
     */
    sideways_asymptote_slip(108, 110),
    /**
     * <code>sideways_asymptote_value = 111;</code>
     */
    sideways_asymptote_value(109, 111),
    /**
     * <code>forward_extrenum_slip = 112;</code>
     */
    forward_extrenum_slip(110, 112),
    /**
     * <code>forward_extrenum_value = 113;</code>
     */
    forward_extrenum_value(111, 113),
    /**
     * <code>forward_asymptote_slip = 114;</code>
     */
    forward_asymptote_slip(112, 114),
    /**
     * <code>forward_asymptote_value = 115;</code>
     */
    forward_asymptote_value(113, 115),
    /**
     * <code>auto_brake_star_speed = 116;</code>
     */
    auto_brake_star_speed(114, 116),
    /**
     * <code>auto_brake_end_speed = 117;</code>
     */
    auto_brake_end_speed(115, 117),
    /**
     * <code>auto_brake_force_scale = 118;</code>
     */
    auto_brake_force_scale(116, 118),
    ;

    /**
     * <code>hp = 1;</code>
     *
     * <pre>
     *当前血量
     * </pre>
     */
    public static final int hp_VALUE = 1;
    /**
     * <code>maxHp = 2;</code>
     */
    public static final int maxHp_VALUE = 2;
    /**
     * <code>fdef = 3;</code>
     *
     * <pre>
     *前护甲
     * </pre>
     */
    public static final int fdef_VALUE = 3;
    /**
     * <code>idef = 4;</code>
     *
     * <pre>
     *侧护甲
     * </pre>
     */
    public static final int idef_VALUE = 4;
    /**
     * <code>bdef = 5;</code>
     *
     * <pre>
     *后护甲
     * </pre>
     */
    public static final int bdef_VALUE = 5;
    /**
     * <code>derate = 6;</code>
     *
     * <pre>
     *伤害减免
     * </pre>
     */
    public static final int derate_VALUE = 6;
    /**
     * <code>fdodge = 7;</code>
     *
     * <pre>
     *前跳弹值
     * </pre>
     */
    public static final int fdodge_VALUE = 7;
    /**
     * <code>idodge = 8;</code>
     *
     * <pre>
     *侧跳弹值
     * </pre>
     */
    public static final int idodge_VALUE = 8;
    /**
     * <code>bdodge = 9;</code>
     *
     * <pre>
     *后跳弹值
     * </pre>
     */
    public static final int bdodge_VALUE = 9;
    /**
     * <code>atk = 10;</code>
     *
     * <pre>
     *攻击力
     * </pre>
     */
    public static final int atk_VALUE = 10;
    /**
     * <code>chuanjia = 11;</code>
     *
     * <pre>
     *穿甲值
     * </pre>
     */
    public static final int chuanjia_VALUE = 11;
    /**
     * <code>chuanjia_rat = 12;</code>
     *
     * <pre>
     *穿甲浮动比率
     * </pre>
     */
    public static final int chuanjia_rat_VALUE = 12;
    /**
     * <code>mul_chuanjia = 13;</code>
     *
     * <pre>
     *穿甲暴击倍率
     * </pre>
     */
    public static final int mul_chuanjia_VALUE = 13;
    /**
     * <code>mul_dodge = 14;</code>
     *
     * <pre>
     *跳弹伤害倍率
     * </pre>
     */
    public static final int mul_dodge_VALUE = 14;
    /**
     * <code>range = 15;</code>
     *
     * <pre>
     *射程
     * </pre>
     */
    public static final int range_VALUE = 15;
    /**
     * <code>danjia_time = 16;</code>
     *
     * <pre>
     *弹夹填弹时间
     * </pre>
     */
    public static final int danjia_time_VALUE = 16;
    /**
     * <code>danjia_num = 17;</code>
     *
     * <pre>
     *弹夹填装个数
     * </pre>
     */
    public static final int danjia_num_VALUE = 17;
    /**
     * <code>speed = 18;</code>
     *
     * <pre>
     *速度
     * </pre>
     */
    public static final int speed_VALUE = 18;
    /**
     * <code>rotate_speed = 19;</code>
     *
     * <pre>
     *车身转动速度
     * </pre>
     */
    public static final int rotate_speed_VALUE = 19;
    /**
     * <code>can_pre = 20;</code>
     *
     * <pre>
     *火炮精度
     * </pre>
     */
    public static final int can_pre_VALUE = 20;
    /**
     * <code>focal_radil_move = 21;</code>
     *
     * <pre>
     *准心半径_移动
     * </pre>
     */
    public static final int focal_radil_move_VALUE = 21;
    /**
     * <code>focal_radil_lock = 22;</code>
     *
     * <pre>
     *准心半径_锁定
     * </pre>
     */
    public static final int focal_radil_lock_VALUE = 22;
    /**
     * <code>focal_radil_static = 23;</code>
     *
     * <pre>
     *准心半径_静止
     * </pre>
     */
    public static final int focal_radil_static_VALUE = 23;
    /**
     * <code>focal_radil_fire = 24;</code>
     *
     * <pre>
     *准心半径_开火
     * </pre>
     */
    public static final int focal_radil_fire_VALUE = 24;
    /**
     * <code>focal_speed_move = 25;</code>
     *
     * <pre>
     *准心缩放速度_移动
     * </pre>
     */
    public static final int focal_speed_move_VALUE = 25;
    /**
     * <code>focal_speed_lock = 26;</code>
     *
     * <pre>
     *准心缩放速度_锁定
     * </pre>
     */
    public static final int focal_speed_lock_VALUE = 26;
    /**
     * <code>focal_speed_static = 27;</code>
     *
     * <pre>
     *准心缩放速度_静止
     * </pre>
     */
    public static final int focal_speed_static_VALUE = 27;
    /**
     * <code>focal_speed_fire = 28;</code>
     *
     * <pre>
     *准心缩放速度_开火
     * </pre>
     */
    public static final int focal_speed_fire_VALUE = 28;
    /**
     * <code>camera_ratate_speed = 29;</code>
     *
     * <pre>
     *摄像机旋转速度
     * </pre>
     */
    public static final int camera_ratate_speed_VALUE = 29;
    /**
     * <code>followcamera_speed = 30;</code>
     *
     * <pre>
     *炮台跟随摄像机速度
     * </pre>
     */
    public static final int followcamera_speed_VALUE = 30;
    /**
     * <code>breath_time = 31;</code>
     *
     * <pre>
     *准心缩放周期
     * </pre>
     */
    public static final int breath_time_VALUE = 31;
    /**
     * <code>breath_mult_range = 32;</code>
     *
     * <pre>
     *准心半径周期
     * </pre>
     */
    public static final int breath_mult_range_VALUE = 32;
    /**
     * <code>focal_distance_max = 33;</code>
     *
     * <pre>
     *准心锁定最远距离
     * </pre>
     */
    public static final int focal_distance_max_VALUE = 33;
    /**
     * <code>focal_distance_min = 34;</code>
     *
     * <pre>
     *准心锁定最近距离
     * </pre>
     */
    public static final int focal_distance_min_VALUE = 34;
    /**
     * <code>active_lock_angle = 35;</code>
     *
     * <pre>
     *手动锁定角度
     * </pre>
     */
    public static final int active_lock_angle_VALUE = 35;
    /**
     * <code>cat_damed_rat = 36;</code>
     *
     * <pre>
     *火炮受损率
     * </pre>
     */
    public static final int cat_damed_rat_VALUE = 36;
    /**
     * <code>cat_bre_rat = 37;</code>
     *
     * <pre>
     *履带受损率
     * </pre>
     */
    public static final int cat_bre_rat_VALUE = 37;
    /**
     * <code>fire_rat = 38;</code>
     *
     * <pre>
     *机身起火率
     * </pre>
     */
    public static final int fire_rat_VALUE = 38;
    /**
     * <code>speed_slow_rat = 39;</code>
     *
     * <pre>
     *引擎受损率
     * </pre>
     */
    public static final int speed_slow_rat_VALUE = 39;
    /**
     * <code>cd_slow_rat = 40;</code>
     *
     * <pre>
     *弹药架受损率
     * </pre>
     */
    public static final int cd_slow_rat_VALUE = 40;
    /**
     * <code>view = 41;</code>
     *
     * <pre>
     *视野
     * </pre>
     */
    public static final int view_VALUE = 41;
    /**
     * <code>focalFireTime = 42;</code>
     *
     * <pre>
     *圈开火放大时间
     * </pre>
     */
    public static final int focalFireTime_VALUE = 42;
    /**
     * <code>elevation = 43;</code>
     *
     * <pre>
     *俯视角
     * </pre>
     */
    public static final int elevation_VALUE = 43;
    /**
     * <code>z_speed = 44;</code>
     *
     * <pre>
     *上下调整速度
     * </pre>
     */
    public static final int z_speed_VALUE = 44;
    /**
     * <code>sidewayFrictionExtremumSlip = 45;</code>
     *
     * <pre>
     *车身旋转极值(默认5,范围1~无穷大)
     * </pre>
     */
    public static final int sidewayFrictionExtremumSlip_VALUE = 45;
    /**
     * <code>auto_lock_angle = 47;</code>
     *
     * <pre>
     *自动锁定角度
     * </pre>
     */
    public static final int auto_lock_angle_VALUE = 47;
    /**
     * <code>out_auto_lock_angle = 48;</code>
     *
     * <pre>
     *脱离自动锁定角度
     * </pre>
     */
    public static final int out_auto_lock_angle_VALUE = 48;
    /**
     * <code>head_rotate_speed = 49;</code>
     *
     * <pre>
     *炮管锁定旋转角度
     * </pre>
     */
    public static final int head_rotate_speed_VALUE = 49;
    /**
     * <code>head_auuto_rotate_speed = 50;</code>
     *
     * <pre>
     *炮管自动锁定旋转角度
     * </pre>
     */
    public static final int head_auuto_rotate_speed_VALUE = 50;
    /**
     * <code>auto_lock_inertia_speed = 51;</code>
     *
     * <pre>
     *自动锁定惯性速度
     * </pre>
     */
    public static final int auto_lock_inertia_speed_VALUE = 51;
    /**
     * <code>lock_itervaltime = 52;</code>
     *
     * <pre>
     *目标锁定间隔
     * </pre>
     */
    public static final int lock_itervaltime_VALUE = 52;
    /**
     * <code>crew_hp = 53;</code>
     *
     * <pre>
     *成员血量加成比率
     * </pre>
     */
    public static final int crew_hp_VALUE = 53;
    /**
     * <code>crew_act = 54;</code>
     *
     * <pre>
     *成员攻击加成比率
     * </pre>
     */
    public static final int crew_act_VALUE = 54;
    /**
     * <code>crew_rate = 55;</code>
     *
     * <pre>
     *成员射速加成比率
     * </pre>
     */
    public static final int crew_rate_VALUE = 55;
    /**
     * <code>crew_speed = 56;</code>
     *
     * <pre>
     *成员速度加成比率
     * </pre>
     */
    public static final int crew_speed_VALUE = 56;
    /**
     * <code>acceleration_time_start = 57;</code>
     *
     * <pre>
     *加速曲线起始时间
     * </pre>
     */
    public static final int acceleration_time_start_VALUE = 57;
    /**
     * <code>acceleration_value_start = 58;</code>
     *
     * <pre>
     *加速曲线起始值
     * </pre>
     */
    public static final int acceleration_value_start_VALUE = 58;
    /**
     * <code>acceleration_time_end = 59;</code>
     *
     * <pre>
     *加速曲线结束时间
     * </pre>
     */
    public static final int acceleration_time_end_VALUE = 59;
    /**
     * <code>acceleration_value_end = 60;</code>
     *
     * <pre>
     *加速曲线结束值
     * </pre>
     */
    public static final int acceleration_value_end_VALUE = 60;
    /**
     * <code>acceleration_break_time_start = 61;</code>
     *
     * <pre>
     *加速衰减
     * </pre>
     */
    public static final int acceleration_break_time_start_VALUE = 61;
    /**
     * <code>acceleration_break_value_start = 62;</code>
     */
    public static final int acceleration_break_value_start_VALUE = 62;
    /**
     * <code>acceleration_break_time_end = 63;</code>
     */
    public static final int acceleration_break_time_end_VALUE = 63;
    /**
     * <code>acceleration_break_value_end = 64;</code>
     */
    public static final int acceleration_break_value_end_VALUE = 64;
    /**
     * <code>r_acceleration_time_start = 65;</code>
     *
     * <pre>
     *加速时旋转曲线
     * </pre>
     */
    public static final int r_acceleration_time_start_VALUE = 65;
    /**
     * <code>r_acceleration_value_start = 66;</code>
     */
    public static final int r_acceleration_value_start_VALUE = 66;
    /**
     * <code>r_acceleration_time_end = 67;</code>
     */
    public static final int r_acceleration_time_end_VALUE = 67;
    /**
     * <code>r_acceleration_value_end = 68;</code>
     */
    public static final int r_acceleration_value_end_VALUE = 68;
    /**
     * <code>r_acceleration_break_time_start = 69;</code>
     *
     * <pre>
     *加速时旋转衰减
     * </pre>
     */
    public static final int r_acceleration_break_time_start_VALUE = 69;
    /**
     * <code>r_acceleration_break_value_start = 70;</code>
     */
    public static final int r_acceleration_break_value_start_VALUE = 70;
    /**
     * <code>r_acceleration_break_time_end = 71;</code>
     */
    public static final int r_acceleration_break_time_end_VALUE = 71;
    /**
     * <code>r_acceleration_break_value_end = 72;</code>
     */
    public static final int r_acceleration_break_value_end_VALUE = 72;
    /**
     * <code>r_stay_time_start = 73;</code>
     *
     * <pre>
     *静止时旋转曲线
     * </pre>
     */
    public static final int r_stay_time_start_VALUE = 73;
    /**
     * <code>r_stay_value_start = 74;</code>
     */
    public static final int r_stay_value_start_VALUE = 74;
    /**
     * <code>r_stay_time_end = 75;</code>
     */
    public static final int r_stay_time_end_VALUE = 75;
    /**
     * <code>r_stay_value_end = 76;</code>
     */
    public static final int r_stay_value_end_VALUE = 76;
    /**
     * <code>r_stay_break_time_start = 77;</code>
     *
     * <pre>
     *静止时旋转衰减
     * </pre>
     */
    public static final int r_stay_break_time_start_VALUE = 77;
    /**
     * <code>r_stay_break_value_start = 78;</code>
     */
    public static final int r_stay_break_value_start_VALUE = 78;
    /**
     * <code>r_stay_break_time_end = 79;</code>
     */
    public static final int r_stay_break_time_end_VALUE = 79;
    /**
     * <code>r_stay_break_value_end = 80;</code>
     */
    public static final int r_stay_break_value_end_VALUE = 80;
    /**
     * <code>crew_chuanjia = 81;</code>
     *
     * <pre>
     *成员穿甲加成比率
     * </pre>
     */
    public static final int crew_chuanjia_VALUE = 81;
    /**
     * <code>crew_fdef = 82;</code>
     *
     * <pre>
     *成员前护甲加成比率
     * </pre>
     */
    public static final int crew_fdef_VALUE = 82;
    /**
     * <code>crew_idef = 83;</code>
     *
     * <pre>
     *成员侧护甲加成比率
     * </pre>
     */
    public static final int crew_idef_VALUE = 83;
    /**
     * <code>crew_bdef = 84;</code>
     *
     * <pre>
     *成员后护甲加成比率
     * </pre>
     */
    public static final int crew_bdef_VALUE = 84;
    /**
     * <code>stable_add = 85;</code>
     *
     * <pre>
     *稳定加成
     * </pre>
     */
    public static final int stable_add_VALUE = 85;
    /**
     * <code>maxHp_add_rat = 86;</code>
     *
     * <pre>
     *最大血量加成比率
     * </pre>
     */
    public static final int maxHp_add_rat_VALUE = 86;
    /**
     * <code>fdef_add_rat = 87;</code>
     *
     * <pre>
     *前护甲加成比率
     * </pre>
     */
    public static final int fdef_add_rat_VALUE = 87;
    /**
     * <code>idef_add_rat = 88;</code>
     *
     * <pre>
     *侧护甲加成比率
     * </pre>
     */
    public static final int idef_add_rat_VALUE = 88;
    /**
     * <code>bdef_add_rat = 89;</code>
     *
     * <pre>
     *后护甲加成比率
     * </pre>
     */
    public static final int bdef_add_rat_VALUE = 89;
    /**
     * <code>atk_add_rat = 90;</code>
     *
     * <pre>
     *攻击力加成比率
     * </pre>
     */
    public static final int atk_add_rat_VALUE = 90;
    /**
     * <code>chuanjia_add_rat = 91;</code>
     *
     * <pre>
     *穿甲值加成比率
     * </pre>
     */
    public static final int chuanjia_add_rat_VALUE = 91;
    /**
     * <code>speed_add_rat = 92;</code>
     *
     * <pre>
     *速度加成比率
     * </pre>
     */
    public static final int speed_add_rat_VALUE = 92;
    /**
     * <code>crew_maxHp_add_rat = 93;</code>
     *
     * <pre>
     *成员血量加成比率
     * </pre>
     */
    public static final int crew_maxHp_add_rat_VALUE = 93;
    /**
     * <code>crew_atk_add_rat = 94;</code>
     *
     * <pre>
     *成员攻击加成比率
     * </pre>
     */
    public static final int crew_atk_add_rat_VALUE = 94;
    /**
     * <code>crew_danjia_add_rat = 95;</code>
     *
     * <pre>
     *成员添弹时间加成比率
     * </pre>
     */
    public static final int crew_danjia_add_rat_VALUE = 95;
    /**
     * <code>crew_speed_add_rat = 96;</code>
     *
     * <pre>
     *成员速度加成比率
     * </pre>
     */
    public static final int crew_speed_add_rat_VALUE = 96;
    /**
     * <code>crew_chuanjia_add_rat = 97;</code>
     *
     * <pre>
     *成员穿甲加成比率
     * </pre>
     */
    public static final int crew_chuanjia_add_rat_VALUE = 97;
    /**
     * <code>crew_fdef_add_rat = 98;</code>
     *
     * <pre>
     *成员前护甲加成比率
     * </pre>
     */
    public static final int crew_fdef_add_rat_VALUE = 98;
    /**
     * <code>crew_idef_add_rat = 99;</code>
     *
     * <pre>
     *成员侧护甲加成比率
     * </pre>
     */
    public static final int crew_idef_add_rat_VALUE = 99;
    /**
     * <code>crew_bdef_add_rat = 100;</code>
     *
     * <pre>
     *成员后护甲加成比率
     * </pre>
     */
    public static final int crew_bdef_add_rat_VALUE = 100;
    /**
     * <code>weight = 101;</code>
     *
     * <pre>
     *重量
     * </pre>
     */
    public static final int weight_VALUE = 101;
    /**
     * <code>positive_friction = 102;</code>
     *
     * <pre>
     *正向摩擦力
     * </pre>
     */
    public static final int positive_friction_VALUE = 102;
    /**
     * <code>lateral_friction = 103;</code>
     *
     * <pre>
     *侧向摩擦力
     * </pre>
     */
    public static final int lateral_friction_VALUE = 103;
    /**
     * <code>fire_skew = 104;</code>
     *
     * <pre>
     *开炮偏移
     * </pre>
     */
    public static final int fire_skew_VALUE = 104;
    /**
     * <code>out_active_lock_angle = 105;</code>
     *
     * <pre>
     *脱离手动锁定角度
     * </pre>
     */
    public static final int out_active_lock_angle_VALUE = 105;
    /**
     * <code>had_revolve = 106;</code>
     *
     * <pre>
     *是否能转动炮塔
     * </pre>
     */
    public static final int had_revolve_VALUE = 106;
    /**
     * <code>sliding_speed = 107;</code>
     *
     * <pre>
     *滑屏速度
     * </pre>
     */
    public static final int sliding_speed_VALUE = 107;
    /**
     * <code>wheel_weight = 108;</code>
     *
     * <pre>
     *轮子的重量
     * </pre>
     */
    public static final int wheel_weight_VALUE = 108;
    /**
     * <code>sideways_extrenum_value = 109;</code>
     */
    public static final int sideways_extrenum_value_VALUE = 109;
    /**
     * <code>sideways_asymptote_slip = 110;</code>
     */
    public static final int sideways_asymptote_slip_VALUE = 110;
    /**
     * <code>sideways_asymptote_value = 111;</code>
     */
    public static final int sideways_asymptote_value_VALUE = 111;
    /**
     * <code>forward_extrenum_slip = 112;</code>
     */
    public static final int forward_extrenum_slip_VALUE = 112;
    /**
     * <code>forward_extrenum_value = 113;</code>
     */
    public static final int forward_extrenum_value_VALUE = 113;
    /**
     * <code>forward_asymptote_slip = 114;</code>
     */
    public static final int forward_asymptote_slip_VALUE = 114;
    /**
     * <code>forward_asymptote_value = 115;</code>
     */
    public static final int forward_asymptote_value_VALUE = 115;
    /**
     * <code>auto_brake_star_speed = 116;</code>
     */
    public static final int auto_brake_star_speed_VALUE = 116;
    /**
     * <code>auto_brake_end_speed = 117;</code>
     */
    public static final int auto_brake_end_speed_VALUE = 117;
    /**
     * <code>auto_brake_force_scale = 118;</code>
     */
    public static final int auto_brake_force_scale_VALUE = 118;


    public final int getNumber() { return value; }

    public static AttrType valueOf(int value) {
      switch (value) {
        case 1: return hp;
        case 2: return maxHp;
        case 3: return fdef;
        case 4: return idef;
        case 5: return bdef;
        case 6: return derate;
        case 7: return fdodge;
        case 8: return idodge;
        case 9: return bdodge;
        case 10: return atk;
        case 11: return chuanjia;
        case 12: return chuanjia_rat;
        case 13: return mul_chuanjia;
        case 14: return mul_dodge;
        case 15: return range;
        case 16: return danjia_time;
        case 17: return danjia_num;
        case 18: return speed;
        case 19: return rotate_speed;
        case 20: return can_pre;
        case 21: return focal_radil_move;
        case 22: return focal_radil_lock;
        case 23: return focal_radil_static;
        case 24: return focal_radil_fire;
        case 25: return focal_speed_move;
        case 26: return focal_speed_lock;
        case 27: return focal_speed_static;
        case 28: return focal_speed_fire;
        case 29: return camera_ratate_speed;
        case 30: return followcamera_speed;
        case 31: return breath_time;
        case 32: return breath_mult_range;
        case 33: return focal_distance_max;
        case 34: return focal_distance_min;
        case 35: return active_lock_angle;
        case 36: return cat_damed_rat;
        case 37: return cat_bre_rat;
        case 38: return fire_rat;
        case 39: return speed_slow_rat;
        case 40: return cd_slow_rat;
        case 41: return view;
        case 42: return focalFireTime;
        case 43: return elevation;
        case 44: return z_speed;
        case 45: return sidewayFrictionExtremumSlip;
        case 47: return auto_lock_angle;
        case 48: return out_auto_lock_angle;
        case 49: return head_rotate_speed;
        case 50: return head_auuto_rotate_speed;
        case 51: return auto_lock_inertia_speed;
        case 52: return lock_itervaltime;
        case 53: return crew_hp;
        case 54: return crew_act;
        case 55: return crew_rate;
        case 56: return crew_speed;
        case 57: return acceleration_time_start;
        case 58: return acceleration_value_start;
        case 59: return acceleration_time_end;
        case 60: return acceleration_value_end;
        case 61: return acceleration_break_time_start;
        case 62: return acceleration_break_value_start;
        case 63: return acceleration_break_time_end;
        case 64: return acceleration_break_value_end;
        case 65: return r_acceleration_time_start;
        case 66: return r_acceleration_value_start;
        case 67: return r_acceleration_time_end;
        case 68: return r_acceleration_value_end;
        case 69: return r_acceleration_break_time_start;
        case 70: return r_acceleration_break_value_start;
        case 71: return r_acceleration_break_time_end;
        case 72: return r_acceleration_break_value_end;
        case 73: return r_stay_time_start;
        case 74: return r_stay_value_start;
        case 75: return r_stay_time_end;
        case 76: return r_stay_value_end;
        case 77: return r_stay_break_time_start;
        case 78: return r_stay_break_value_start;
        case 79: return r_stay_break_time_end;
        case 80: return r_stay_break_value_end;
        case 81: return crew_chuanjia;
        case 82: return crew_fdef;
        case 83: return crew_idef;
        case 84: return crew_bdef;
        case 85: return stable_add;
        case 86: return maxHp_add_rat;
        case 87: return fdef_add_rat;
        case 88: return idef_add_rat;
        case 89: return bdef_add_rat;
        case 90: return atk_add_rat;
        case 91: return chuanjia_add_rat;
        case 92: return speed_add_rat;
        case 93: return crew_maxHp_add_rat;
        case 94: return crew_atk_add_rat;
        case 95: return crew_danjia_add_rat;
        case 96: return crew_speed_add_rat;
        case 97: return crew_chuanjia_add_rat;
        case 98: return crew_fdef_add_rat;
        case 99: return crew_idef_add_rat;
        case 100: return crew_bdef_add_rat;
        case 101: return weight;
        case 102: return positive_friction;
        case 103: return lateral_friction;
        case 104: return fire_skew;
        case 105: return out_active_lock_angle;
        case 106: return had_revolve;
        case 107: return sliding_speed;
        case 108: return wheel_weight;
        case 109: return sideways_extrenum_value;
        case 110: return sideways_asymptote_slip;
        case 111: return sideways_asymptote_value;
        case 112: return forward_extrenum_slip;
        case 113: return forward_extrenum_value;
        case 114: return forward_asymptote_slip;
        case 115: return forward_asymptote_value;
        case 116: return auto_brake_star_speed;
        case 117: return auto_brake_end_speed;
        case 118: return auto_brake_force_scale;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AttrType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AttrType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AttrType>() {
            public AttrType findValueByNumber(int number) {
              return AttrType.valueOf(number);
            }
          };

    private final int value;

    private AttrType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PROTO_BATTLE.AttrType)
  }

  /**
   * Protobuf enum {@code PROTO_BATTLE.FireType}
   */
  public enum FireType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>fire = 1;</code>
     *
     * <pre>
     *开火
     * </pre>
     */
    fire(0, 1),
    /**
     * <code>goods = 2;</code>
     *
     * <pre>
     *使用道具
     * </pre>
     */
    goods(1, 2),
    /**
     * <code>skill = 3;</code>
     *
     * <pre>
     *使用成员技能
     * </pre>
     */
    skill(2, 3),
    /**
     * <code>immune = 4;</code>
     *
     * <pre>
     *免疫
     * </pre>
     */
    immune(3, 4),
    ;

    /**
     * <code>fire = 1;</code>
     *
     * <pre>
     *开火
     * </pre>
     */
    public static final int fire_VALUE = 1;
    /**
     * <code>goods = 2;</code>
     *
     * <pre>
     *使用道具
     * </pre>
     */
    public static final int goods_VALUE = 2;
    /**
     * <code>skill = 3;</code>
     *
     * <pre>
     *使用成员技能
     * </pre>
     */
    public static final int skill_VALUE = 3;
    /**
     * <code>immune = 4;</code>
     *
     * <pre>
     *免疫
     * </pre>
     */
    public static final int immune_VALUE = 4;


    public final int getNumber() { return value; }

    public static FireType valueOf(int value) {
      switch (value) {
        case 1: return fire;
        case 2: return goods;
        case 3: return skill;
        case 4: return immune;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FireType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FireType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FireType>() {
            public FireType findValueByNumber(int number) {
              return FireType.valueOf(number);
            }
          };

    private final int value;

    private FireType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PROTO_BATTLE.FireType)
  }

  /**
   * Protobuf enum {@code PROTO_BATTLE.HitType}
   */
  public enum HitType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>common = 1;</code>
     *
     * <pre>
     *普通伤害
     * </pre>
     */
    common(0, 1),
    /**
     * <code>chuajia = 2;</code>
     *
     * <pre>
     *穿甲伤害
     * </pre>
     */
    chuajia(1, 2),
    /**
     * <code>dodge = 3;</code>
     *
     * <pre>
     *跳弹伤害
     * </pre>
     */
    dodge(2, 3),
    ;

    /**
     * <code>common = 1;</code>
     *
     * <pre>
     *普通伤害
     * </pre>
     */
    public static final int common_VALUE = 1;
    /**
     * <code>chuajia = 2;</code>
     *
     * <pre>
     *穿甲伤害
     * </pre>
     */
    public static final int chuajia_VALUE = 2;
    /**
     * <code>dodge = 3;</code>
     *
     * <pre>
     *跳弹伤害
     * </pre>
     */
    public static final int dodge_VALUE = 3;


    public final int getNumber() { return value; }

    public static HitType valueOf(int value) {
      switch (value) {
        case 1: return common;
        case 2: return chuajia;
        case 3: return dodge;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HitType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<HitType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HitType>() {
            public HitType findValueByNumber(int number) {
              return HitType.valueOf(number);
            }
          };

    private final int value;

    private HitType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PROTO_BATTLE.HitType)
  }

  /**
   * Protobuf enum {@code PROTO_BATTLE.TipType}
   */
  public enum TipType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>kill = 1;</code>
     *
     * <pre>
     *普通击杀
     * </pre>
     */
    kill(0, 1),
    /**
     * <code>first_kill = 2;</code>
     *
     * <pre>
     *第一滴血
     * </pre>
     */
    first_kill(1, 2),
    /**
     * <code>double_kill = 3;</code>
     *
     * <pre>
     *双杀
     * </pre>
     */
    double_kill(2, 3),
    /**
     * <code>three_kill = 4;</code>
     *
     * <pre>
     *三杀
     * </pre>
     */
    three_kill(3, 4),
    /**
     * <code>four_kill = 5;</code>
     *
     * <pre>
     *四杀
     * </pre>
     */
    four_kill(4, 5),
    /**
     * <code>five_kill = 6;</code>
     *
     * <pre>
     *五杀
     * </pre>
     */
    five_kill(5, 6),
    /**
     * <code>special_kill = 7;</code>
     *
     * <pre>
     *大杀特杀
     * </pre>
     */
    special_kill(6, 7),
    /**
     * <code>erupt_kill = 8;</code>
     *
     * <pre>
     *暴走
     * </pre>
     */
    erupt_kill(7, 8),
    /**
     * <code>no_stop_kill = 9;</code>
     *
     * <pre>
     *无人可挡
     * </pre>
     */
    no_stop_kill(8, 9),
    /**
     * <code>dominate = 10;</code>
     *
     * <pre>
     *主宰比赛
     * </pre>
     */
    dominate(9, 10),
    /**
     * <code>god = 11;</code>
     *
     * <pre>
     *接近神
     * </pre>
     */
    god(10, 11),
    /**
     * <code>super_god = 12;</code>
     *
     * <pre>
     *超神
     * </pre>
     */
    super_god(11, 12),
    /**
     * <code>stop_kill = 13;</code>
     *
     * <pre>
     *终结
     * </pre>
     */
    stop_kill(12, 13),
    /**
     * <code>aced = 14;</code>
     *
     * <pre>
     *团灭
     * </pre>
     */
    aced(13, 14),
    ;

    /**
     * <code>kill = 1;</code>
     *
     * <pre>
     *普通击杀
     * </pre>
     */
    public static final int kill_VALUE = 1;
    /**
     * <code>first_kill = 2;</code>
     *
     * <pre>
     *第一滴血
     * </pre>
     */
    public static final int first_kill_VALUE = 2;
    /**
     * <code>double_kill = 3;</code>
     *
     * <pre>
     *双杀
     * </pre>
     */
    public static final int double_kill_VALUE = 3;
    /**
     * <code>three_kill = 4;</code>
     *
     * <pre>
     *三杀
     * </pre>
     */
    public static final int three_kill_VALUE = 4;
    /**
     * <code>four_kill = 5;</code>
     *
     * <pre>
     *四杀
     * </pre>
     */
    public static final int four_kill_VALUE = 5;
    /**
     * <code>five_kill = 6;</code>
     *
     * <pre>
     *五杀
     * </pre>
     */
    public static final int five_kill_VALUE = 6;
    /**
     * <code>special_kill = 7;</code>
     *
     * <pre>
     *大杀特杀
     * </pre>
     */
    public static final int special_kill_VALUE = 7;
    /**
     * <code>erupt_kill = 8;</code>
     *
     * <pre>
     *暴走
     * </pre>
     */
    public static final int erupt_kill_VALUE = 8;
    /**
     * <code>no_stop_kill = 9;</code>
     *
     * <pre>
     *无人可挡
     * </pre>
     */
    public static final int no_stop_kill_VALUE = 9;
    /**
     * <code>dominate = 10;</code>
     *
     * <pre>
     *主宰比赛
     * </pre>
     */
    public static final int dominate_VALUE = 10;
    /**
     * <code>god = 11;</code>
     *
     * <pre>
     *接近神
     * </pre>
     */
    public static final int god_VALUE = 11;
    /**
     * <code>super_god = 12;</code>
     *
     * <pre>
     *超神
     * </pre>
     */
    public static final int super_god_VALUE = 12;
    /**
     * <code>stop_kill = 13;</code>
     *
     * <pre>
     *终结
     * </pre>
     */
    public static final int stop_kill_VALUE = 13;
    /**
     * <code>aced = 14;</code>
     *
     * <pre>
     *团灭
     * </pre>
     */
    public static final int aced_VALUE = 14;


    public final int getNumber() { return value; }

    public static TipType valueOf(int value) {
      switch (value) {
        case 1: return kill;
        case 2: return first_kill;
        case 3: return double_kill;
        case 4: return three_kill;
        case 5: return four_kill;
        case 6: return five_kill;
        case 7: return special_kill;
        case 8: return erupt_kill;
        case 9: return no_stop_kill;
        case 10: return dominate;
        case 11: return god;
        case 12: return super_god;
        case 13: return stop_kill;
        case 14: return aced;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TipType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TipType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TipType>() {
            public TipType findValueByNumber(int number) {
              return TipType.valueOf(number);
            }
          };

    private final int value;

    private TipType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PROTO_BATTLE.TipType)
  }

  public interface Coordinate3DOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required float px = 1;
    /**
     * <code>required float px = 1;</code>
     *
     * <pre>
     *x 
     * </pre>
     */
    boolean hasPx();
    /**
     * <code>required float px = 1;</code>
     *
     * <pre>
     *x 
     * </pre>
     */
    float getPx();

    // required float py = 2;
    /**
     * <code>required float py = 2;</code>
     *
     * <pre>
     *y 
     * </pre>
     */
    boolean hasPy();
    /**
     * <code>required float py = 2;</code>
     *
     * <pre>
     *y 
     * </pre>
     */
    float getPy();

    // required float pz = 3;
    /**
     * <code>required float pz = 3;</code>
     *
     * <pre>
     *z 
     * </pre>
     */
    boolean hasPz();
    /**
     * <code>required float pz = 3;</code>
     *
     * <pre>
     *z 
     * </pre>
     */
    float getPz();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.Coordinate3D}
   */
  public static final class Coordinate3D extends
      com.google.protobuf.GeneratedMessageLite
      implements Coordinate3DOrBuilder {
    // Use Coordinate3D.newBuilder() to construct.
    private Coordinate3D(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Coordinate3D(boolean noInit) {}

    private static final Coordinate3D defaultInstance;
    public static Coordinate3D getDefaultInstance() {
      return defaultInstance;
    }

    public Coordinate3D getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Coordinate3D(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              px_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              py_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              pz_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Coordinate3D> PARSER =
        new com.google.protobuf.AbstractParser<Coordinate3D>() {
      public Coordinate3D parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Coordinate3D(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Coordinate3D> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required float px = 1;
    public static final int PX_FIELD_NUMBER = 1;
    private float px_;
    /**
     * <code>required float px = 1;</code>
     *
     * <pre>
     *x 
     * </pre>
     */
    public boolean hasPx() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float px = 1;</code>
     *
     * <pre>
     *x 
     * </pre>
     */
    public float getPx() {
      return px_;
    }

    // required float py = 2;
    public static final int PY_FIELD_NUMBER = 2;
    private float py_;
    /**
     * <code>required float py = 2;</code>
     *
     * <pre>
     *y 
     * </pre>
     */
    public boolean hasPy() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float py = 2;</code>
     *
     * <pre>
     *y 
     * </pre>
     */
    public float getPy() {
      return py_;
    }

    // required float pz = 3;
    public static final int PZ_FIELD_NUMBER = 3;
    private float pz_;
    /**
     * <code>required float pz = 3;</code>
     *
     * <pre>
     *z 
     * </pre>
     */
    public boolean hasPz() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float pz = 3;</code>
     *
     * <pre>
     *z 
     * </pre>
     */
    public float getPz() {
      return pz_;
    }

    private void initFields() {
      px_ = 0F;
      py_ = 0F;
      pz_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPz()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, px_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, py_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, pz_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, px_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, py_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, pz_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.Coordinate3D}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.Coordinate3DOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        px_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        py_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        pz_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D build() {
        com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D result = new com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.px_ = px_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.py_ = py_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pz_ = pz_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) return this;
        if (other.hasPx()) {
          setPx(other.getPx());
        }
        if (other.hasPy()) {
          setPy(other.getPy());
        }
        if (other.hasPz()) {
          setPz(other.getPz());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPx()) {
          
          return false;
        }
        if (!hasPy()) {
          
          return false;
        }
        if (!hasPz()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required float px = 1;
      private float px_ ;
      /**
       * <code>required float px = 1;</code>
       *
       * <pre>
       *x 
       * </pre>
       */
      public boolean hasPx() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float px = 1;</code>
       *
       * <pre>
       *x 
       * </pre>
       */
      public float getPx() {
        return px_;
      }
      /**
       * <code>required float px = 1;</code>
       *
       * <pre>
       *x 
       * </pre>
       */
      public Builder setPx(float value) {
        bitField0_ |= 0x00000001;
        px_ = value;
        
        return this;
      }
      /**
       * <code>required float px = 1;</code>
       *
       * <pre>
       *x 
       * </pre>
       */
      public Builder clearPx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        px_ = 0F;
        
        return this;
      }

      // required float py = 2;
      private float py_ ;
      /**
       * <code>required float py = 2;</code>
       *
       * <pre>
       *y 
       * </pre>
       */
      public boolean hasPy() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float py = 2;</code>
       *
       * <pre>
       *y 
       * </pre>
       */
      public float getPy() {
        return py_;
      }
      /**
       * <code>required float py = 2;</code>
       *
       * <pre>
       *y 
       * </pre>
       */
      public Builder setPy(float value) {
        bitField0_ |= 0x00000002;
        py_ = value;
        
        return this;
      }
      /**
       * <code>required float py = 2;</code>
       *
       * <pre>
       *y 
       * </pre>
       */
      public Builder clearPy() {
        bitField0_ = (bitField0_ & ~0x00000002);
        py_ = 0F;
        
        return this;
      }

      // required float pz = 3;
      private float pz_ ;
      /**
       * <code>required float pz = 3;</code>
       *
       * <pre>
       *z 
       * </pre>
       */
      public boolean hasPz() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float pz = 3;</code>
       *
       * <pre>
       *z 
       * </pre>
       */
      public float getPz() {
        return pz_;
      }
      /**
       * <code>required float pz = 3;</code>
       *
       * <pre>
       *z 
       * </pre>
       */
      public Builder setPz(float value) {
        bitField0_ |= 0x00000004;
        pz_ = value;
        
        return this;
      }
      /**
       * <code>required float pz = 3;</code>
       *
       * <pre>
       *z 
       * </pre>
       */
      public Builder clearPz() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pz_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.Coordinate3D)
    }

    static {
      defaultInstance = new Coordinate3D(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.Coordinate3D)
  }

  public interface CTS_MOVE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 TickCount = 1;
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    boolean hasTickCount();
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    int getTickCount();

    // required .PROTO_BATTLE.Coordinate3D Position = 2;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition();

    // required uint32 AimDirection = 3;
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    boolean hasAimDirection();
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    int getAimDirection();

    // required uint32 MoveDirection = 4;
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    boolean hasMoveDirection();
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    int getMoveDirection();

    // required float MoveSpeed = 5;
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    boolean hasMoveSpeed();
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    float getMoveSpeed();

    // required uint32 State = 6;
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    boolean hasState();
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    int getState();

    // required .PROTO_BATTLE.Coordinate3D Rotation = 7;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    boolean hasRotation();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation();

    // required .PROTO_BATTLE.Coordinate3D Force = 8;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
     */
    boolean hasForce();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_MOVE_MSG}
   *
   * <pre>
   *CTS_MOVE
   * </pre>
   */
  public static final class CTS_MOVE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_MOVE_MSGOrBuilder {
    // Use CTS_MOVE_MSG.newBuilder() to construct.
    private CTS_MOVE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_MOVE_MSG(boolean noInit) {}

    private static final CTS_MOVE_MSG defaultInstance;
    public static CTS_MOVE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_MOVE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_MOVE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tickCount_ = input.readUInt32();
              break;
            }
            case 18: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              aimDirection_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              moveDirection_ = input.readUInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              moveSpeed_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              state_ = input.readUInt32();
              break;
            }
            case 58: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = rotation_.toBuilder();
              }
              rotation_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rotation_);
                rotation_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = force_.toBuilder();
              }
              force_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(force_);
                force_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_MOVE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_MOVE_MSG>() {
      public CTS_MOVE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_MOVE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_MOVE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 TickCount = 1;
    public static final int TICKCOUNT_FIELD_NUMBER = 1;
    private int tickCount_;
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public boolean hasTickCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public int getTickCount() {
      return tickCount_;
    }

    // required .PROTO_BATTLE.Coordinate3D Position = 2;
    public static final int POSITION_FIELD_NUMBER = 2;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
      return position_;
    }

    // required uint32 AimDirection = 3;
    public static final int AIMDIRECTION_FIELD_NUMBER = 3;
    private int aimDirection_;
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    public boolean hasAimDirection() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    public int getAimDirection() {
      return aimDirection_;
    }

    // required uint32 MoveDirection = 4;
    public static final int MOVEDIRECTION_FIELD_NUMBER = 4;
    private int moveDirection_;
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    public boolean hasMoveDirection() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    public int getMoveDirection() {
      return moveDirection_;
    }

    // required float MoveSpeed = 5;
    public static final int MOVESPEED_FIELD_NUMBER = 5;
    private float moveSpeed_;
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    public boolean hasMoveSpeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    public float getMoveSpeed() {
      return moveSpeed_;
    }

    // required uint32 State = 6;
    public static final int STATE_FIELD_NUMBER = 6;
    private int state_;
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    public int getState() {
      return state_;
    }

    // required .PROTO_BATTLE.Coordinate3D Rotation = 7;
    public static final int ROTATION_FIELD_NUMBER = 7;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D rotation_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    public boolean hasRotation() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation() {
      return rotation_;
    }

    // required .PROTO_BATTLE.Coordinate3D Force = 8;
    public static final int FORCE_FIELD_NUMBER = 8;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D force_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
     */
    public boolean hasForce() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce() {
      return force_;
    }

    private void initFields() {
      tickCount_ = 0;
      position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      aimDirection_ = 0;
      moveDirection_ = 0;
      moveSpeed_ = 0F;
      state_ = 0;
      rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTickCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAimDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoveDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoveSpeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRotation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasForce()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRotation().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getForce().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, tickCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, aimDirection_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, moveDirection_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, moveSpeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, state_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, rotation_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, force_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, tickCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, aimDirection_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, moveDirection_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, moveSpeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, state_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, rotation_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, force_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_MOVE_MSG}
     *
     * <pre>
     *CTS_MOVE
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tickCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        aimDirection_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        moveDirection_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        moveSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tickCount_ = tickCount_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.aimDirection_ = aimDirection_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.moveDirection_ = moveDirection_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.moveSpeed_ = moveSpeed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rotation_ = rotation_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.force_ = force_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG.getDefaultInstance()) return this;
        if (other.hasTickCount()) {
          setTickCount(other.getTickCount());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasAimDirection()) {
          setAimDirection(other.getAimDirection());
        }
        if (other.hasMoveDirection()) {
          setMoveDirection(other.getMoveDirection());
        }
        if (other.hasMoveSpeed()) {
          setMoveSpeed(other.getMoveSpeed());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasRotation()) {
          mergeRotation(other.getRotation());
        }
        if (other.hasForce()) {
          mergeForce(other.getForce());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTickCount()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasAimDirection()) {
          
          return false;
        }
        if (!hasMoveDirection()) {
          
          return false;
        }
        if (!hasMoveSpeed()) {
          
          return false;
        }
        if (!hasState()) {
          
          return false;
        }
        if (!hasRotation()) {
          
          return false;
        }
        if (!hasForce()) {
          
          return false;
        }
        if (!getPosition().isInitialized()) {
          
          return false;
        }
        if (!getRotation().isInitialized()) {
          
          return false;
        }
        if (!getForce().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_MOVE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 TickCount = 1;
      private int tickCount_ ;
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public boolean hasTickCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public int getTickCount() {
        return tickCount_;
      }
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder setTickCount(int value) {
        bitField0_ |= 0x00000001;
        tickCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder clearTickCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tickCount_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D Position = 2;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
        return position_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder setPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        position_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder setPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        position_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder mergePosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            position_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          position_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(position_).mergeFrom(value).buildPartial();
        } else {
          position_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder clearPosition() {
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // required uint32 AimDirection = 3;
      private int aimDirection_ ;
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public boolean hasAimDirection() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public int getAimDirection() {
        return aimDirection_;
      }
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public Builder setAimDirection(int value) {
        bitField0_ |= 0x00000004;
        aimDirection_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public Builder clearAimDirection() {
        bitField0_ = (bitField0_ & ~0x00000004);
        aimDirection_ = 0;
        
        return this;
      }

      // required uint32 MoveDirection = 4;
      private int moveDirection_ ;
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public boolean hasMoveDirection() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public int getMoveDirection() {
        return moveDirection_;
      }
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public Builder setMoveDirection(int value) {
        bitField0_ |= 0x00000008;
        moveDirection_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public Builder clearMoveDirection() {
        bitField0_ = (bitField0_ & ~0x00000008);
        moveDirection_ = 0;
        
        return this;
      }

      // required float MoveSpeed = 5;
      private float moveSpeed_ ;
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public boolean hasMoveSpeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public float getMoveSpeed() {
        return moveSpeed_;
      }
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public Builder setMoveSpeed(float value) {
        bitField0_ |= 0x00000010;
        moveSpeed_ = value;
        
        return this;
      }
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public Builder clearMoveSpeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        moveSpeed_ = 0F;
        
        return this;
      }

      // required uint32 State = 6;
      private int state_ ;
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000020;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000020);
        state_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D Rotation = 7;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public boolean hasRotation() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation() {
        return rotation_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder setRotation(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        rotation_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder setRotation(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        rotation_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder mergeRotation(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            rotation_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          rotation_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(rotation_).mergeFrom(value).buildPartial();
        } else {
          rotation_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 7;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder clearRotation() {
        rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D Force = 8;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
       */
      public boolean hasForce() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce() {
        return force_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
       */
      public Builder setForce(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        force_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
       */
      public Builder setForce(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        force_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
       */
      public Builder mergeForce(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            force_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          force_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(force_).mergeFrom(value).buildPartial();
        } else {
          force_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 8;</code>
       */
      public Builder clearForce() {
        force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_MOVE_MSG)
    }

    static {
      defaultInstance = new CTS_MOVE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_MOVE_MSG)
  }

  public interface CTS_AIM_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 AimState = 1;
    /**
     * <code>required uint32 AimState = 1;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    boolean hasAimState();
    /**
     * <code>required uint32 AimState = 1;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    int getAimState();

    // required .PROTO_BATTLE.Coordinate3D AimPosition = 2;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    boolean hasAimPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getAimPosition();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_AIM_MSG}
   *
   * <pre>
   *CTS_AIM
   * </pre>
   */
  public static final class CTS_AIM_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_AIM_MSGOrBuilder {
    // Use CTS_AIM_MSG.newBuilder() to construct.
    private CTS_AIM_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_AIM_MSG(boolean noInit) {}

    private static final CTS_AIM_MSG defaultInstance;
    public static CTS_AIM_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_AIM_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_AIM_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              aimState_ = input.readUInt32();
              break;
            }
            case 18: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = aimPosition_.toBuilder();
              }
              aimPosition_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(aimPosition_);
                aimPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_AIM_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_AIM_MSG>() {
      public CTS_AIM_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_AIM_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_AIM_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 AimState = 1;
    public static final int AIMSTATE_FIELD_NUMBER = 1;
    private int aimState_;
    /**
     * <code>required uint32 AimState = 1;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    public boolean hasAimState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 AimState = 1;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    public int getAimState() {
      return aimState_;
    }

    // required .PROTO_BATTLE.Coordinate3D AimPosition = 2;
    public static final int AIMPOSITION_FIELD_NUMBER = 2;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D aimPosition_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    public boolean hasAimPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getAimPosition() {
      return aimPosition_;
    }

    private void initFields() {
      aimState_ = 0;
      aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAimState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAimPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAimPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, aimState_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, aimPosition_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, aimState_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, aimPosition_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_AIM_MSG}
     *
     * <pre>
     *CTS_AIM
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        aimState_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.aimState_ = aimState_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.aimPosition_ = aimPosition_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG.getDefaultInstance()) return this;
        if (other.hasAimState()) {
          setAimState(other.getAimState());
        }
        if (other.hasAimPosition()) {
          mergeAimPosition(other.getAimPosition());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAimState()) {
          
          return false;
        }
        if (!hasAimPosition()) {
          
          return false;
        }
        if (!getAimPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_AIM_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 AimState = 1;
      private int aimState_ ;
      /**
       * <code>required uint32 AimState = 1;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public boolean hasAimState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 AimState = 1;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public int getAimState() {
        return aimState_;
      }
      /**
       * <code>required uint32 AimState = 1;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public Builder setAimState(int value) {
        bitField0_ |= 0x00000001;
        aimState_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 AimState = 1;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public Builder clearAimState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        aimState_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D AimPosition = 2;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public boolean hasAimPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getAimPosition() {
        return aimPosition_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder setAimPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        aimPosition_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder setAimPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        aimPosition_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder mergeAimPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            aimPosition_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          aimPosition_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(aimPosition_).mergeFrom(value).buildPartial();
        } else {
          aimPosition_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 2;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder clearAimPosition() {
        aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_AIM_MSG)
    }

    static {
      defaultInstance = new CTS_AIM_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_AIM_MSG)
  }

  public interface CTS_FIRE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 TickCount = 1;
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    boolean hasTickCount();
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    int getTickCount();

    // required uint32 TargetId = 2;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    int getTargetId();

    // required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    boolean hasTargetPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition();

    // required float Direction = 4;
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    boolean hasDirection();
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    float getDirection();

    // required .PROTO_BATTLE.FireType fireType = 5;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开火类型
     * </pre>
     */
    boolean hasFireType();
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开火类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType();

    // required uint32 StdItem = 6;
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    boolean hasStdItem();
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    int getStdItem();

    // required bool hadDodge = 7;
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean hasHadDodge();
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean getHadDodge();

    // required float skewX = 8;
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    boolean hasSkewX();
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    float getSkewX();

    // required float skewY = 9;
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    boolean hasSkewY();
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    float getSkewY();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_FIRE_MSG}
   *
   * <pre>
   *CTS_FIRE
   * </pre>
   */
  public static final class CTS_FIRE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_FIRE_MSGOrBuilder {
    // Use CTS_FIRE_MSG.newBuilder() to construct.
    private CTS_FIRE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_FIRE_MSG(boolean noInit) {}

    private static final CTS_FIRE_MSG defaultInstance;
    public static CTS_FIRE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_FIRE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_FIRE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tickCount_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetId_ = input.readUInt32();
              break;
            }
            case 26: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = targetPosition_.toBuilder();
              }
              targetPosition_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(targetPosition_);
                targetPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              direction_ = input.readFloat();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.FireType value = com.ourpalm.tank.message.BATTLE_MSG.FireType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000010;
                fireType_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              stdItem_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              hadDodge_ = input.readBool();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              skewX_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              skewY_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_FIRE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_FIRE_MSG>() {
      public CTS_FIRE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_FIRE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_FIRE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 TickCount = 1;
    public static final int TICKCOUNT_FIELD_NUMBER = 1;
    private int tickCount_;
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public boolean hasTickCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 TickCount = 1;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public int getTickCount() {
      return tickCount_;
    }

    // required uint32 TargetId = 2;
    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;
    public static final int TARGETPOSITION_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D targetPosition_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    public boolean hasTargetPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition() {
      return targetPosition_;
    }

    // required float Direction = 4;
    public static final int DIRECTION_FIELD_NUMBER = 4;
    private float direction_;
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    public float getDirection() {
      return direction_;
    }

    // required .PROTO_BATTLE.FireType fireType = 5;
    public static final int FIRETYPE_FIELD_NUMBER = 5;
    private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开火类型
     * </pre>
     */
    public boolean hasFireType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开火类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
      return fireType_;
    }

    // required uint32 StdItem = 6;
    public static final int STDITEM_FIELD_NUMBER = 6;
    private int stdItem_;
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public boolean hasStdItem() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public int getStdItem() {
      return stdItem_;
    }

    // required bool hadDodge = 7;
    public static final int HADDODGE_FIELD_NUMBER = 7;
    private boolean hadDodge_;
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean hasHadDodge() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean getHadDodge() {
      return hadDodge_;
    }

    // required float skewX = 8;
    public static final int SKEWX_FIELD_NUMBER = 8;
    private float skewX_;
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public boolean hasSkewX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public float getSkewX() {
      return skewX_;
    }

    // required float skewY = 9;
    public static final int SKEWY_FIELD_NUMBER = 9;
    private float skewY_;
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public boolean hasSkewY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public float getSkewY() {
      return skewY_;
    }

    private void initFields() {
      tickCount_ = 0;
      targetId_ = 0;
      targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      direction_ = 0F;
      fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      stdItem_ = 0;
      hadDodge_ = false;
      skewX_ = 0F;
      skewY_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTickCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFireType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStdItem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHadDodge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTargetPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, tickCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, targetPosition_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, direction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, stdItem_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, hadDodge_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, skewX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, skewY_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, tickCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, targetPosition_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, direction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stdItem_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hadDodge_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, skewX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, skewY_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_FIRE_MSG}
     *
     * <pre>
     *CTS_FIRE
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tickCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        direction_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        bitField0_ = (bitField0_ & ~0x00000010);
        stdItem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        hadDodge_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        skewX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        skewY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tickCount_ = tickCount_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.targetPosition_ = targetPosition_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.fireType_ = fireType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.stdItem_ = stdItem_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hadDodge_ = hadDodge_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.skewX_ = skewX_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.skewY_ = skewY_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG.getDefaultInstance()) return this;
        if (other.hasTickCount()) {
          setTickCount(other.getTickCount());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasTargetPosition()) {
          mergeTargetPosition(other.getTargetPosition());
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasFireType()) {
          setFireType(other.getFireType());
        }
        if (other.hasStdItem()) {
          setStdItem(other.getStdItem());
        }
        if (other.hasHadDodge()) {
          setHadDodge(other.getHadDodge());
        }
        if (other.hasSkewX()) {
          setSkewX(other.getSkewX());
        }
        if (other.hasSkewY()) {
          setSkewY(other.getSkewY());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTickCount()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasTargetPosition()) {
          
          return false;
        }
        if (!hasDirection()) {
          
          return false;
        }
        if (!hasFireType()) {
          
          return false;
        }
        if (!hasStdItem()) {
          
          return false;
        }
        if (!hasHadDodge()) {
          
          return false;
        }
        if (!hasSkewX()) {
          
          return false;
        }
        if (!hasSkewY()) {
          
          return false;
        }
        if (!getTargetPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_FIRE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 TickCount = 1;
      private int tickCount_ ;
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public boolean hasTickCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public int getTickCount() {
        return tickCount_;
      }
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder setTickCount(int value) {
        bitField0_ |= 0x00000001;
        tickCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TickCount = 1;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder clearTickCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tickCount_ = 0;
        
        return this;
      }

      // required uint32 TargetId = 2;
      private int targetId_ ;
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000002;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public boolean hasTargetPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition() {
        return targetPosition_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder setTargetPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        targetPosition_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder setTargetPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        targetPosition_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder mergeTargetPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            targetPosition_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          targetPosition_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(targetPosition_).mergeFrom(value).buildPartial();
        } else {
          targetPosition_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder clearTargetPosition() {
        targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // required float Direction = 4;
      private float direction_ ;
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public float getDirection() {
        return direction_;
      }
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public Builder setDirection(float value) {
        bitField0_ |= 0x00000008;
        direction_ = value;
        
        return this;
      }
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000008);
        direction_ = 0F;
        
        return this;
      }

      // required .PROTO_BATTLE.FireType fireType = 5;
      private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开火类型
       * </pre>
       */
      public boolean hasFireType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开火类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
        return fireType_;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开火类型
       * </pre>
       */
      public Builder setFireType(com.ourpalm.tank.message.BATTLE_MSG.FireType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        fireType_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开火类型
       * </pre>
       */
      public Builder clearFireType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        
        return this;
      }

      // required uint32 StdItem = 6;
      private int stdItem_ ;
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public boolean hasStdItem() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public int getStdItem() {
        return stdItem_;
      }
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder setStdItem(int value) {
        bitField0_ |= 0x00000020;
        stdItem_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder clearStdItem() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stdItem_ = 0;
        
        return this;
      }

      // required bool hadDodge = 7;
      private boolean hadDodge_ ;
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean hasHadDodge() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean getHadDodge() {
        return hadDodge_;
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder setHadDodge(boolean value) {
        bitField0_ |= 0x00000040;
        hadDodge_ = value;
        
        return this;
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder clearHadDodge() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hadDodge_ = false;
        
        return this;
      }

      // required float skewX = 8;
      private float skewX_ ;
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public boolean hasSkewX() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public float getSkewX() {
        return skewX_;
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder setSkewX(float value) {
        bitField0_ |= 0x00000080;
        skewX_ = value;
        
        return this;
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder clearSkewX() {
        bitField0_ = (bitField0_ & ~0x00000080);
        skewX_ = 0F;
        
        return this;
      }

      // required float skewY = 9;
      private float skewY_ ;
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public boolean hasSkewY() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public float getSkewY() {
        return skewY_;
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder setSkewY(float value) {
        bitField0_ |= 0x00000100;
        skewY_ = value;
        
        return this;
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder clearSkewY() {
        bitField0_ = (bitField0_ & ~0x00000100);
        skewY_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_FIRE_MSG)
    }

    static {
      defaultInstance = new CTS_FIRE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_FIRE_MSG)
  }

  public interface CTS_HIT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 TargetId = 1;
    /**
     * <code>required uint32 TargetId = 1;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 TargetId = 1;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    int getTargetId();

    // required uint32 HitPart = 2;
    /**
     * <code>required uint32 HitPart = 2;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    boolean hasHitPart();
    /**
     * <code>required uint32 HitPart = 2;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    int getHitPart();

    // required bool hadDodge = 3;
    /**
     * <code>required bool hadDodge = 3;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean hasHadDodge();
    /**
     * <code>required bool hadDodge = 3;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean getHadDodge();

    // required .PROTO_BATTLE.FireType fireType = 4;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    boolean hasFireType();
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType();

    // required uint32 stdItem = 5;
    /**
     * <code>required uint32 stdItem = 5;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    boolean hasStdItem();
    /**
     * <code>required uint32 stdItem = 5;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    int getStdItem();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_HIT_MSG}
   *
   * <pre>
   *CTS_HIT
   * </pre>
   */
  public static final class CTS_HIT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_HIT_MSGOrBuilder {
    // Use CTS_HIT_MSG.newBuilder() to construct.
    private CTS_HIT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_HIT_MSG(boolean noInit) {}

    private static final CTS_HIT_MSG defaultInstance;
    public static CTS_HIT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_HIT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_HIT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              targetId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              hitPart_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              hadDodge_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.FireType value = com.ourpalm.tank.message.BATTLE_MSG.FireType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000008;
                fireType_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              stdItem_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_HIT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_HIT_MSG>() {
      public CTS_HIT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_HIT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_HIT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 TargetId = 1;
    public static final int TARGETID_FIELD_NUMBER = 1;
    private int targetId_;
    /**
     * <code>required uint32 TargetId = 1;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 TargetId = 1;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required uint32 HitPart = 2;
    public static final int HITPART_FIELD_NUMBER = 2;
    private int hitPart_;
    /**
     * <code>required uint32 HitPart = 2;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    public boolean hasHitPart() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 HitPart = 2;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    public int getHitPart() {
      return hitPart_;
    }

    // required bool hadDodge = 3;
    public static final int HADDODGE_FIELD_NUMBER = 3;
    private boolean hadDodge_;
    /**
     * <code>required bool hadDodge = 3;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean hasHadDodge() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool hadDodge = 3;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean getHadDodge() {
      return hadDodge_;
    }

    // required .PROTO_BATTLE.FireType fireType = 4;
    public static final int FIRETYPE_FIELD_NUMBER = 4;
    private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public boolean hasFireType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
      return fireType_;
    }

    // required uint32 stdItem = 5;
    public static final int STDITEM_FIELD_NUMBER = 5;
    private int stdItem_;
    /**
     * <code>required uint32 stdItem = 5;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public boolean hasStdItem() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 stdItem = 5;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public int getStdItem() {
      return stdItem_;
    }

    private void initFields() {
      targetId_ = 0;
      hitPart_ = 0;
      hadDodge_ = false;
      fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      stdItem_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHitPart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHadDodge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFireType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStdItem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, targetId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, hitPart_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, hadDodge_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, stdItem_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, targetId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, hitPart_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, hadDodge_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, stdItem_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_HIT_MSG}
     *
     * <pre>
     *CTS_HIT
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        hitPart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        hadDodge_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        bitField0_ = (bitField0_ & ~0x00000008);
        stdItem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.hitPart_ = hitPart_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hadDodge_ = hadDodge_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fireType_ = fireType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.stdItem_ = stdItem_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG.getDefaultInstance()) return this;
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasHitPart()) {
          setHitPart(other.getHitPart());
        }
        if (other.hasHadDodge()) {
          setHadDodge(other.getHadDodge());
        }
        if (other.hasFireType()) {
          setFireType(other.getFireType());
        }
        if (other.hasStdItem()) {
          setStdItem(other.getStdItem());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasHitPart()) {
          
          return false;
        }
        if (!hasHadDodge()) {
          
          return false;
        }
        if (!hasFireType()) {
          
          return false;
        }
        if (!hasStdItem()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_HIT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 TargetId = 1;
      private int targetId_ ;
      /**
       * <code>required uint32 TargetId = 1;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 TargetId = 1;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 TargetId = 1;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000001;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TargetId = 1;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        
        return this;
      }

      // required uint32 HitPart = 2;
      private int hitPart_ ;
      /**
       * <code>required uint32 HitPart = 2;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public boolean hasHitPart() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 HitPart = 2;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public int getHitPart() {
        return hitPart_;
      }
      /**
       * <code>required uint32 HitPart = 2;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public Builder setHitPart(int value) {
        bitField0_ |= 0x00000002;
        hitPart_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 HitPart = 2;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public Builder clearHitPart() {
        bitField0_ = (bitField0_ & ~0x00000002);
        hitPart_ = 0;
        
        return this;
      }

      // required bool hadDodge = 3;
      private boolean hadDodge_ ;
      /**
       * <code>required bool hadDodge = 3;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean hasHadDodge() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool hadDodge = 3;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean getHadDodge() {
        return hadDodge_;
      }
      /**
       * <code>required bool hadDodge = 3;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder setHadDodge(boolean value) {
        bitField0_ |= 0x00000004;
        hadDodge_ = value;
        
        return this;
      }
      /**
       * <code>required bool hadDodge = 3;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder clearHadDodge() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hadDodge_ = false;
        
        return this;
      }

      // required .PROTO_BATTLE.FireType fireType = 4;
      private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public boolean hasFireType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
        return fireType_;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder setFireType(com.ourpalm.tank.message.BATTLE_MSG.FireType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        fireType_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 4;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder clearFireType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        
        return this;
      }

      // required uint32 stdItem = 5;
      private int stdItem_ ;
      /**
       * <code>required uint32 stdItem = 5;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public boolean hasStdItem() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 stdItem = 5;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public int getStdItem() {
        return stdItem_;
      }
      /**
       * <code>required uint32 stdItem = 5;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder setStdItem(int value) {
        bitField0_ |= 0x00000010;
        stdItem_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 stdItem = 5;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder clearStdItem() {
        bitField0_ = (bitField0_ & ~0x00000010);
        stdItem_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_HIT_MSG)
    }

    static {
      defaultInstance = new CTS_HIT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_HIT_MSG)
  }

  public interface STC_MOVE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 Id = 1;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required .PROTO_BATTLE.Coordinate3D Position = 2;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标(如果没有就是停止在当前位置)
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标(如果没有就是停止在当前位置)
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition();

    // required uint32 AimDirection = 3;
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    boolean hasAimDirection();
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    int getAimDirection();

    // required uint32 MoveDirection = 4;
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向    
     * </pre>
     */
    boolean hasMoveDirection();
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向    
     * </pre>
     */
    int getMoveDirection();

    // required float MoveSpeed = 5;
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    boolean hasMoveSpeed();
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    float getMoveSpeed();

    // required uint32 State = 6;
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    boolean hasState();
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    int getState();

    // required uint32 TickCount = 7;
    /**
     * <code>required uint32 TickCount = 7;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    boolean hasTickCount();
    /**
     * <code>required uint32 TickCount = 7;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    int getTickCount();

    // required .PROTO_BATTLE.Coordinate3D Rotation = 8;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    boolean hasRotation();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation();

    // required .PROTO_BATTLE.Coordinate3D Force = 9;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
     */
    boolean hasForce();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_MOVE_MSG}
   *
   * <pre>
   *STC_MOVE
   * </pre>
   */
  public static final class STC_MOVE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_MOVE_MSGOrBuilder {
    // Use STC_MOVE_MSG.newBuilder() to construct.
    private STC_MOVE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_MOVE_MSG(boolean noInit) {}

    private static final STC_MOVE_MSG defaultInstance;
    public static STC_MOVE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_MOVE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_MOVE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              aimDirection_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              moveDirection_ = input.readUInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              moveSpeed_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              state_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              tickCount_ = input.readUInt32();
              break;
            }
            case 66: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = rotation_.toBuilder();
              }
              rotation_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rotation_);
                rotation_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = force_.toBuilder();
              }
              force_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(force_);
                force_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_MOVE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_MOVE_MSG>() {
      public STC_MOVE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_MOVE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_MOVE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required .PROTO_BATTLE.Coordinate3D Position = 2;
    public static final int POSITION_FIELD_NUMBER = 2;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标(如果没有就是停止在当前位置)
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
     *
     * <pre>
     *当前坐标(如果没有就是停止在当前位置)
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
      return position_;
    }

    // required uint32 AimDirection = 3;
    public static final int AIMDIRECTION_FIELD_NUMBER = 3;
    private int aimDirection_;
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    public boolean hasAimDirection() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 AimDirection = 3;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    public int getAimDirection() {
      return aimDirection_;
    }

    // required uint32 MoveDirection = 4;
    public static final int MOVEDIRECTION_FIELD_NUMBER = 4;
    private int moveDirection_;
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向    
     * </pre>
     */
    public boolean hasMoveDirection() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 MoveDirection = 4;</code>
     *
     * <pre>
     *当前移动方向    
     * </pre>
     */
    public int getMoveDirection() {
      return moveDirection_;
    }

    // required float MoveSpeed = 5;
    public static final int MOVESPEED_FIELD_NUMBER = 5;
    private float moveSpeed_;
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    public boolean hasMoveSpeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float MoveSpeed = 5;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    public float getMoveSpeed() {
      return moveSpeed_;
    }

    // required uint32 State = 6;
    public static final int STATE_FIELD_NUMBER = 6;
    private int state_;
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 State = 6;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    public int getState() {
      return state_;
    }

    // required uint32 TickCount = 7;
    public static final int TICKCOUNT_FIELD_NUMBER = 7;
    private int tickCount_;
    /**
     * <code>required uint32 TickCount = 7;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public boolean hasTickCount() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint32 TickCount = 7;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public int getTickCount() {
      return tickCount_;
    }

    // required .PROTO_BATTLE.Coordinate3D Rotation = 8;
    public static final int ROTATION_FIELD_NUMBER = 8;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D rotation_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    public boolean hasRotation() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation() {
      return rotation_;
    }

    // required .PROTO_BATTLE.Coordinate3D Force = 9;
    public static final int FORCE_FIELD_NUMBER = 9;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D force_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
     */
    public boolean hasForce() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce() {
      return force_;
    }

    private void initFields() {
      id_ = 0;
      position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      aimDirection_ = 0;
      moveDirection_ = 0;
      moveSpeed_ = 0F;
      state_ = 0;
      tickCount_ = 0;
      rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAimDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoveDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoveSpeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTickCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRotation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasForce()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRotation().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getForce().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, aimDirection_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, moveDirection_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, moveSpeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, state_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, tickCount_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, rotation_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, force_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, aimDirection_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, moveDirection_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, moveSpeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, state_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, tickCount_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, rotation_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, force_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_MOVE_MSG}
     *
     * <pre>
     *STC_MOVE
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        aimDirection_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        moveDirection_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        moveSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        tickCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.aimDirection_ = aimDirection_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.moveDirection_ = moveDirection_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.moveSpeed_ = moveSpeed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.tickCount_ = tickCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.rotation_ = rotation_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.force_ = force_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasAimDirection()) {
          setAimDirection(other.getAimDirection());
        }
        if (other.hasMoveDirection()) {
          setMoveDirection(other.getMoveDirection());
        }
        if (other.hasMoveSpeed()) {
          setMoveSpeed(other.getMoveSpeed());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasTickCount()) {
          setTickCount(other.getTickCount());
        }
        if (other.hasRotation()) {
          mergeRotation(other.getRotation());
        }
        if (other.hasForce()) {
          mergeForce(other.getForce());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasAimDirection()) {
          
          return false;
        }
        if (!hasMoveDirection()) {
          
          return false;
        }
        if (!hasMoveSpeed()) {
          
          return false;
        }
        if (!hasState()) {
          
          return false;
        }
        if (!hasTickCount()) {
          
          return false;
        }
        if (!hasRotation()) {
          
          return false;
        }
        if (!hasForce()) {
          
          return false;
        }
        if (!getPosition().isInitialized()) {
          
          return false;
        }
        if (!getRotation().isInitialized()) {
          
          return false;
        }
        if (!getForce().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_MOVE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 Id = 1;
      private int id_ ;
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D Position = 2;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标(如果没有就是停止在当前位置)
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标(如果没有就是停止在当前位置)
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
        return position_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标(如果没有就是停止在当前位置)
       * </pre>
       */
      public Builder setPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        position_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标(如果没有就是停止在当前位置)
       * </pre>
       */
      public Builder setPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        position_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标(如果没有就是停止在当前位置)
       * </pre>
       */
      public Builder mergePosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            position_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          position_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(position_).mergeFrom(value).buildPartial();
        } else {
          position_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Position = 2;</code>
       *
       * <pre>
       *当前坐标(如果没有就是停止在当前位置)
       * </pre>
       */
      public Builder clearPosition() {
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // required uint32 AimDirection = 3;
      private int aimDirection_ ;
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public boolean hasAimDirection() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public int getAimDirection() {
        return aimDirection_;
      }
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public Builder setAimDirection(int value) {
        bitField0_ |= 0x00000004;
        aimDirection_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 AimDirection = 3;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public Builder clearAimDirection() {
        bitField0_ = (bitField0_ & ~0x00000004);
        aimDirection_ = 0;
        
        return this;
      }

      // required uint32 MoveDirection = 4;
      private int moveDirection_ ;
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向    
       * </pre>
       */
      public boolean hasMoveDirection() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向    
       * </pre>
       */
      public int getMoveDirection() {
        return moveDirection_;
      }
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向    
       * </pre>
       */
      public Builder setMoveDirection(int value) {
        bitField0_ |= 0x00000008;
        moveDirection_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 MoveDirection = 4;</code>
       *
       * <pre>
       *当前移动方向    
       * </pre>
       */
      public Builder clearMoveDirection() {
        bitField0_ = (bitField0_ & ~0x00000008);
        moveDirection_ = 0;
        
        return this;
      }

      // required float MoveSpeed = 5;
      private float moveSpeed_ ;
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public boolean hasMoveSpeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public float getMoveSpeed() {
        return moveSpeed_;
      }
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public Builder setMoveSpeed(float value) {
        bitField0_ |= 0x00000010;
        moveSpeed_ = value;
        
        return this;
      }
      /**
       * <code>required float MoveSpeed = 5;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public Builder clearMoveSpeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        moveSpeed_ = 0F;
        
        return this;
      }

      // required uint32 State = 6;
      private int state_ ;
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000020;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 State = 6;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000020);
        state_ = 0;
        
        return this;
      }

      // required uint32 TickCount = 7;
      private int tickCount_ ;
      /**
       * <code>required uint32 TickCount = 7;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public boolean hasTickCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 TickCount = 7;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public int getTickCount() {
        return tickCount_;
      }
      /**
       * <code>required uint32 TickCount = 7;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder setTickCount(int value) {
        bitField0_ |= 0x00000040;
        tickCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TickCount = 7;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder clearTickCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        tickCount_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D Rotation = 8;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public boolean hasRotation() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation() {
        return rotation_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder setRotation(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        rotation_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder setRotation(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        rotation_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder mergeRotation(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            rotation_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          rotation_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(rotation_).mergeFrom(value).buildPartial();
        } else {
          rotation_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder clearRotation() {
        rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D Force = 9;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
       */
      public boolean hasForce() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce() {
        return force_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
       */
      public Builder setForce(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        force_ = value;

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
       */
      public Builder setForce(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        force_ = builderForValue.build();

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
       */
      public Builder mergeForce(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            force_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          force_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(force_).mergeFrom(value).buildPartial();
        } else {
          force_ = value;
        }

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D Force = 9;</code>
       */
      public Builder clearForce() {
        force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_MOVE_MSG)
    }

    static {
      defaultInstance = new STC_MOVE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_MOVE_MSG)
  }

  public interface STC_AIM_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 Id = 1;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *角色索引
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *角色索引
     * </pre>
     */
    int getId();

    // required uint32 AimState = 2;
    /**
     * <code>required uint32 AimState = 2;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    boolean hasAimState();
    /**
     * <code>required uint32 AimState = 2;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    int getAimState();

    // required .PROTO_BATTLE.Coordinate3D AimPosition = 3;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    boolean hasAimPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getAimPosition();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_AIM_MSG}
   *
   * <pre>
   *STC_AIM
   * </pre>
   */
  public static final class STC_AIM_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_AIM_MSGOrBuilder {
    // Use STC_AIM_MSG.newBuilder() to construct.
    private STC_AIM_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_AIM_MSG(boolean noInit) {}

    private static final STC_AIM_MSG defaultInstance;
    public static STC_AIM_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_AIM_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_AIM_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              aimState_ = input.readUInt32();
              break;
            }
            case 26: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = aimPosition_.toBuilder();
              }
              aimPosition_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(aimPosition_);
                aimPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_AIM_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_AIM_MSG>() {
      public STC_AIM_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_AIM_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_AIM_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *角色索引
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *角色索引
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 AimState = 2;
    public static final int AIMSTATE_FIELD_NUMBER = 2;
    private int aimState_;
    /**
     * <code>required uint32 AimState = 2;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    public boolean hasAimState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 AimState = 2;</code>
     *
     * <pre>
     *瞄准状态
     * </pre>
     */
    public int getAimState() {
      return aimState_;
    }

    // required .PROTO_BATTLE.Coordinate3D AimPosition = 3;
    public static final int AIMPOSITION_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D aimPosition_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    public boolean hasAimPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
     *
     * <pre>
     *瞄准点
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getAimPosition() {
      return aimPosition_;
    }

    private void initFields() {
      id_ = 0;
      aimState_ = 0;
      aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAimState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAimPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAimPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, aimState_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, aimPosition_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, aimState_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, aimPosition_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_AIM_MSG}
     *
     * <pre>
     *STC_AIM
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        aimState_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.aimState_ = aimState_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.aimPosition_ = aimPosition_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasAimState()) {
          setAimState(other.getAimState());
        }
        if (other.hasAimPosition()) {
          mergeAimPosition(other.getAimPosition());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasAimState()) {
          
          return false;
        }
        if (!hasAimPosition()) {
          
          return false;
        }
        if (!getAimPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_AIM_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 Id = 1;
      private int id_ ;
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *角色索引
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *角色索引
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *角色索引
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *角色索引
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 AimState = 2;
      private int aimState_ ;
      /**
       * <code>required uint32 AimState = 2;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public boolean hasAimState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 AimState = 2;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public int getAimState() {
        return aimState_;
      }
      /**
       * <code>required uint32 AimState = 2;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public Builder setAimState(int value) {
        bitField0_ |= 0x00000002;
        aimState_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 AimState = 2;</code>
       *
       * <pre>
       *瞄准状态
       * </pre>
       */
      public Builder clearAimState() {
        bitField0_ = (bitField0_ & ~0x00000002);
        aimState_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D AimPosition = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public boolean hasAimPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getAimPosition() {
        return aimPosition_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder setAimPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        aimPosition_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder setAimPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        aimPosition_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder mergeAimPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            aimPosition_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          aimPosition_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(aimPosition_).mergeFrom(value).buildPartial();
        } else {
          aimPosition_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D AimPosition = 3;</code>
       *
       * <pre>
       *瞄准点
       * </pre>
       */
      public Builder clearAimPosition() {
        aimPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_AIM_MSG)
    }

    static {
      defaultInstance = new STC_AIM_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_AIM_MSG)
  }

  public interface STC_FIRE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 SourceId = 1;
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *发起攻击的对象索引
     * </pre>
     */
    boolean hasSourceId();
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *发起攻击的对象索引
     * </pre>
     */
    int getSourceId();

    // required uint32 TargetId = 2;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击的对象索引
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击的对象索引
     * </pre>
     */
    int getTargetId();

    // required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    boolean hasTargetPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition();

    // required float Direction = 4;
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    boolean hasDirection();
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    float getDirection();

    // required .PROTO_BATTLE.FireType fireType = 5;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    boolean hasFireType();
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType();

    // required uint32 StdItem = 6;
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    boolean hasStdItem();
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    int getStdItem();

    // required bool hadDodge = 7;
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean hasHadDodge();
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean getHadDodge();

    // required float skewX = 8;
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    boolean hasSkewX();
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    float getSkewX();

    // required float skewY = 9;
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    boolean hasSkewY();
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    float getSkewY();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_FIRE_MSG}
   *
   * <pre>
   *STC_FIRE
   * </pre>
   */
  public static final class STC_FIRE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_FIRE_MSGOrBuilder {
    // Use STC_FIRE_MSG.newBuilder() to construct.
    private STC_FIRE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_FIRE_MSG(boolean noInit) {}

    private static final STC_FIRE_MSG defaultInstance;
    public static STC_FIRE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_FIRE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_FIRE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sourceId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetId_ = input.readUInt32();
              break;
            }
            case 26: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = targetPosition_.toBuilder();
              }
              targetPosition_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(targetPosition_);
                targetPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              direction_ = input.readFloat();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.FireType value = com.ourpalm.tank.message.BATTLE_MSG.FireType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000010;
                fireType_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              stdItem_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              hadDodge_ = input.readBool();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              skewX_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              skewY_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_FIRE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_FIRE_MSG>() {
      public STC_FIRE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_FIRE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_FIRE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 SourceId = 1;
    public static final int SOURCEID_FIELD_NUMBER = 1;
    private int sourceId_;
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *发起攻击的对象索引
     * </pre>
     */
    public boolean hasSourceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *发起攻击的对象索引
     * </pre>
     */
    public int getSourceId() {
      return sourceId_;
    }

    // required uint32 TargetId = 2;
    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击的对象索引
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击的对象索引
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;
    public static final int TARGETPOSITION_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D targetPosition_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    public boolean hasTargetPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition() {
      return targetPosition_;
    }

    // required float Direction = 4;
    public static final int DIRECTION_FIELD_NUMBER = 4;
    private float direction_;
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float Direction = 4;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    public float getDirection() {
      return direction_;
    }

    // required .PROTO_BATTLE.FireType fireType = 5;
    public static final int FIRETYPE_FIELD_NUMBER = 5;
    private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public boolean hasFireType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
      return fireType_;
    }

    // required uint32 StdItem = 6;
    public static final int STDITEM_FIELD_NUMBER = 6;
    private int stdItem_;
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public boolean hasStdItem() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 StdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public int getStdItem() {
      return stdItem_;
    }

    // required bool hadDodge = 7;
    public static final int HADDODGE_FIELD_NUMBER = 7;
    private boolean hadDodge_;
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean hasHadDodge() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean getHadDodge() {
      return hadDodge_;
    }

    // required float skewX = 8;
    public static final int SKEWX_FIELD_NUMBER = 8;
    private float skewX_;
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public boolean hasSkewX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public float getSkewX() {
      return skewX_;
    }

    // required float skewY = 9;
    public static final int SKEWY_FIELD_NUMBER = 9;
    private float skewY_;
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public boolean hasSkewY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public float getSkewY() {
      return skewY_;
    }

    private void initFields() {
      sourceId_ = 0;
      targetId_ = 0;
      targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      direction_ = 0F;
      fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      stdItem_ = 0;
      hadDodge_ = false;
      skewX_ = 0F;
      skewY_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSourceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFireType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStdItem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHadDodge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTargetPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, targetPosition_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, direction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, stdItem_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, hadDodge_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, skewX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, skewY_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, targetPosition_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, direction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stdItem_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hadDodge_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, skewX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, skewY_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_FIRE_MSG}
     *
     * <pre>
     *STC_FIRE
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sourceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        direction_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        bitField0_ = (bitField0_ & ~0x00000010);
        stdItem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        hadDodge_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        skewX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        skewY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sourceId_ = sourceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.targetPosition_ = targetPosition_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.fireType_ = fireType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.stdItem_ = stdItem_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hadDodge_ = hadDodge_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.skewX_ = skewX_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.skewY_ = skewY_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG.getDefaultInstance()) return this;
        if (other.hasSourceId()) {
          setSourceId(other.getSourceId());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasTargetPosition()) {
          mergeTargetPosition(other.getTargetPosition());
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasFireType()) {
          setFireType(other.getFireType());
        }
        if (other.hasStdItem()) {
          setStdItem(other.getStdItem());
        }
        if (other.hasHadDodge()) {
          setHadDodge(other.getHadDodge());
        }
        if (other.hasSkewX()) {
          setSkewX(other.getSkewX());
        }
        if (other.hasSkewY()) {
          setSkewY(other.getSkewY());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSourceId()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasTargetPosition()) {
          
          return false;
        }
        if (!hasDirection()) {
          
          return false;
        }
        if (!hasFireType()) {
          
          return false;
        }
        if (!hasStdItem()) {
          
          return false;
        }
        if (!hasHadDodge()) {
          
          return false;
        }
        if (!hasSkewX()) {
          
          return false;
        }
        if (!hasSkewY()) {
          
          return false;
        }
        if (!getTargetPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_FIRE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 SourceId = 1;
      private int sourceId_ ;
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *发起攻击的对象索引
       * </pre>
       */
      public boolean hasSourceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *发起攻击的对象索引
       * </pre>
       */
      public int getSourceId() {
        return sourceId_;
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *发起攻击的对象索引
       * </pre>
       */
      public Builder setSourceId(int value) {
        bitField0_ |= 0x00000001;
        sourceId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *发起攻击的对象索引
       * </pre>
       */
      public Builder clearSourceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sourceId_ = 0;
        
        return this;
      }

      // required uint32 TargetId = 2;
      private int targetId_ ;
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击的对象索引
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击的对象索引
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击的对象索引
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000002;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击的对象索引
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public boolean hasTargetPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition() {
        return targetPosition_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder setTargetPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        targetPosition_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder setTargetPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        targetPosition_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder mergeTargetPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            targetPosition_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          targetPosition_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(targetPosition_).mergeFrom(value).buildPartial();
        } else {
          targetPosition_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D TargetPosition = 3;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder clearTargetPosition() {
        targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // required float Direction = 4;
      private float direction_ ;
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public float getDirection() {
        return direction_;
      }
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public Builder setDirection(float value) {
        bitField0_ |= 0x00000008;
        direction_ = value;
        
        return this;
      }
      /**
       * <code>required float Direction = 4;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000008);
        direction_ = 0F;
        
        return this;
      }

      // required .PROTO_BATTLE.FireType fireType = 5;
      private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public boolean hasFireType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
        return fireType_;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder setFireType(com.ourpalm.tank.message.BATTLE_MSG.FireType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        fireType_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 5;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder clearFireType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        
        return this;
      }

      // required uint32 StdItem = 6;
      private int stdItem_ ;
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public boolean hasStdItem() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public int getStdItem() {
        return stdItem_;
      }
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder setStdItem(int value) {
        bitField0_ |= 0x00000020;
        stdItem_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 StdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder clearStdItem() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stdItem_ = 0;
        
        return this;
      }

      // required bool hadDodge = 7;
      private boolean hadDodge_ ;
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean hasHadDodge() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean getHadDodge() {
        return hadDodge_;
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder setHadDodge(boolean value) {
        bitField0_ |= 0x00000040;
        hadDodge_ = value;
        
        return this;
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder clearHadDodge() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hadDodge_ = false;
        
        return this;
      }

      // required float skewX = 8;
      private float skewX_ ;
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public boolean hasSkewX() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public float getSkewX() {
        return skewX_;
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder setSkewX(float value) {
        bitField0_ |= 0x00000080;
        skewX_ = value;
        
        return this;
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder clearSkewX() {
        bitField0_ = (bitField0_ & ~0x00000080);
        skewX_ = 0F;
        
        return this;
      }

      // required float skewY = 9;
      private float skewY_ ;
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public boolean hasSkewY() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public float getSkewY() {
        return skewY_;
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder setSkewY(float value) {
        bitField0_ |= 0x00000100;
        skewY_ = value;
        
        return this;
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder clearSkewY() {
        bitField0_ = (bitField0_ & ~0x00000100);
        skewY_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_FIRE_MSG)
    }

    static {
      defaultInstance = new STC_FIRE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_FIRE_MSG)
  }

  public interface STC_HIT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 SourceId = 1;
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    boolean hasSourceId();
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    int getSourceId();

    // required uint32 TargetId = 2;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    int getTargetId();

    // required .PROTO_BATTLE.HitType type = 3;
    /**
     * <code>required .PROTO_BATTLE.HitType type = 3;</code>
     *
     * <pre>
     *伤害类型
     * </pre>
     */
    boolean hasType();
    /**
     * <code>required .PROTO_BATTLE.HitType type = 3;</code>
     *
     * <pre>
     *伤害类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.HitType getType();

    // required uint32 Damage = 4;
    /**
     * <code>required uint32 Damage = 4;</code>
     *
     * <pre>
     *伤害数值
     * </pre>
     */
    boolean hasDamage();
    /**
     * <code>required uint32 Damage = 4;</code>
     *
     * <pre>
     *伤害数值
     * </pre>
     */
    int getDamage();

    // required uint32 HitPart = 5;
    /**
     * <code>required uint32 HitPart = 5;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后,3无
     * </pre>
     */
    boolean hasHitPart();
    /**
     * <code>required uint32 HitPart = 5;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后,3无
     * </pre>
     */
    int getHitPart();

    // required .PROTO_BATTLE.FireType fireType = 6;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    boolean hasFireType();
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType();

    // required uint32 stdItem = 7;
    /**
     * <code>required uint32 stdItem = 7;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    boolean hasStdItem();
    /**
     * <code>required uint32 stdItem = 7;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    int getStdItem();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_HIT_MSG}
   *
   * <pre>
   *命中消息
   * </pre>
   */
  public static final class STC_HIT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_HIT_MSGOrBuilder {
    // Use STC_HIT_MSG.newBuilder() to construct.
    private STC_HIT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_HIT_MSG(boolean noInit) {}

    private static final STC_HIT_MSG defaultInstance;
    public static STC_HIT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_HIT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_HIT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sourceId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetId_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.HitType value = com.ourpalm.tank.message.BATTLE_MSG.HitType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000004;
                type_ = value;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              damage_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              hitPart_ = input.readUInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.FireType value = com.ourpalm.tank.message.BATTLE_MSG.FireType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000020;
                fireType_ = value;
              }
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              stdItem_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_HIT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_HIT_MSG>() {
      public STC_HIT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_HIT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_HIT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 SourceId = 1;
    public static final int SOURCEID_FIELD_NUMBER = 1;
    private int sourceId_;
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    public boolean hasSourceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    public int getSourceId() {
      return sourceId_;
    }

    // required uint32 TargetId = 2;
    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required .PROTO_BATTLE.HitType type = 3;
    public static final int TYPE_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.HitType type_;
    /**
     * <code>required .PROTO_BATTLE.HitType type = 3;</code>
     *
     * <pre>
     *伤害类型
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.HitType type = 3;</code>
     *
     * <pre>
     *伤害类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.HitType getType() {
      return type_;
    }

    // required uint32 Damage = 4;
    public static final int DAMAGE_FIELD_NUMBER = 4;
    private int damage_;
    /**
     * <code>required uint32 Damage = 4;</code>
     *
     * <pre>
     *伤害数值
     * </pre>
     */
    public boolean hasDamage() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 Damage = 4;</code>
     *
     * <pre>
     *伤害数值
     * </pre>
     */
    public int getDamage() {
      return damage_;
    }

    // required uint32 HitPart = 5;
    public static final int HITPART_FIELD_NUMBER = 5;
    private int hitPart_;
    /**
     * <code>required uint32 HitPart = 5;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后,3无
     * </pre>
     */
    public boolean hasHitPart() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 HitPart = 5;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后,3无
     * </pre>
     */
    public int getHitPart() {
      return hitPart_;
    }

    // required .PROTO_BATTLE.FireType fireType = 6;
    public static final int FIRETYPE_FIELD_NUMBER = 6;
    private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public boolean hasFireType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
      return fireType_;
    }

    // required uint32 stdItem = 7;
    public static final int STDITEM_FIELD_NUMBER = 7;
    private int stdItem_;
    /**
     * <code>required uint32 stdItem = 7;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public boolean hasStdItem() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint32 stdItem = 7;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public int getStdItem() {
      return stdItem_;
    }

    private void initFields() {
      sourceId_ = 0;
      targetId_ = 0;
      type_ = com.ourpalm.tank.message.BATTLE_MSG.HitType.common;
      damage_ = 0;
      hitPart_ = 0;
      fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      stdItem_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSourceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDamage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHitPart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFireType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStdItem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, type_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, damage_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, hitPart_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, stdItem_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, damage_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, hitPart_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, stdItem_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_HIT_MSG}
     *
     * <pre>
     *命中消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sourceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.ourpalm.tank.message.BATTLE_MSG.HitType.common;
        bitField0_ = (bitField0_ & ~0x00000004);
        damage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        hitPart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        bitField0_ = (bitField0_ & ~0x00000020);
        stdItem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sourceId_ = sourceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.damage_ = damage_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.hitPart_ = hitPart_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.fireType_ = fireType_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.stdItem_ = stdItem_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG.getDefaultInstance()) return this;
        if (other.hasSourceId()) {
          setSourceId(other.getSourceId());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasDamage()) {
          setDamage(other.getDamage());
        }
        if (other.hasHitPart()) {
          setHitPart(other.getHitPart());
        }
        if (other.hasFireType()) {
          setFireType(other.getFireType());
        }
        if (other.hasStdItem()) {
          setStdItem(other.getStdItem());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSourceId()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasDamage()) {
          
          return false;
        }
        if (!hasHitPart()) {
          
          return false;
        }
        if (!hasFireType()) {
          
          return false;
        }
        if (!hasStdItem()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 SourceId = 1;
      private int sourceId_ ;
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public boolean hasSourceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public int getSourceId() {
        return sourceId_;
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public Builder setSourceId(int value) {
        bitField0_ |= 0x00000001;
        sourceId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public Builder clearSourceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sourceId_ = 0;
        
        return this;
      }

      // required uint32 TargetId = 2;
      private int targetId_ ;
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000002;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.HitType type = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.HitType type_ = com.ourpalm.tank.message.BATTLE_MSG.HitType.common;
      /**
       * <code>required .PROTO_BATTLE.HitType type = 3;</code>
       *
       * <pre>
       *伤害类型
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.HitType type = 3;</code>
       *
       * <pre>
       *伤害类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.HitType getType() {
        return type_;
      }
      /**
       * <code>required .PROTO_BATTLE.HitType type = 3;</code>
       *
       * <pre>
       *伤害类型
       * </pre>
       */
      public Builder setType(com.ourpalm.tank.message.BATTLE_MSG.HitType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        type_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.HitType type = 3;</code>
       *
       * <pre>
       *伤害类型
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = com.ourpalm.tank.message.BATTLE_MSG.HitType.common;
        
        return this;
      }

      // required uint32 Damage = 4;
      private int damage_ ;
      /**
       * <code>required uint32 Damage = 4;</code>
       *
       * <pre>
       *伤害数值
       * </pre>
       */
      public boolean hasDamage() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 Damage = 4;</code>
       *
       * <pre>
       *伤害数值
       * </pre>
       */
      public int getDamage() {
        return damage_;
      }
      /**
       * <code>required uint32 Damage = 4;</code>
       *
       * <pre>
       *伤害数值
       * </pre>
       */
      public Builder setDamage(int value) {
        bitField0_ |= 0x00000008;
        damage_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 Damage = 4;</code>
       *
       * <pre>
       *伤害数值
       * </pre>
       */
      public Builder clearDamage() {
        bitField0_ = (bitField0_ & ~0x00000008);
        damage_ = 0;
        
        return this;
      }

      // required uint32 HitPart = 5;
      private int hitPart_ ;
      /**
       * <code>required uint32 HitPart = 5;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后,3无
       * </pre>
       */
      public boolean hasHitPart() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 HitPart = 5;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后,3无
       * </pre>
       */
      public int getHitPart() {
        return hitPart_;
      }
      /**
       * <code>required uint32 HitPart = 5;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后,3无
       * </pre>
       */
      public Builder setHitPart(int value) {
        bitField0_ |= 0x00000010;
        hitPart_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 HitPart = 5;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后,3无
       * </pre>
       */
      public Builder clearHitPart() {
        bitField0_ = (bitField0_ & ~0x00000010);
        hitPart_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.FireType fireType = 6;
      private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public boolean hasFireType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
        return fireType_;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder setFireType(com.ourpalm.tank.message.BATTLE_MSG.FireType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        fireType_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 6;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder clearFireType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        
        return this;
      }

      // required uint32 stdItem = 7;
      private int stdItem_ ;
      /**
       * <code>required uint32 stdItem = 7;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public boolean hasStdItem() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 stdItem = 7;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public int getStdItem() {
        return stdItem_;
      }
      /**
       * <code>required uint32 stdItem = 7;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder setStdItem(int value) {
        bitField0_ |= 0x00000040;
        stdItem_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 stdItem = 7;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder clearStdItem() {
        bitField0_ = (bitField0_ & ~0x00000040);
        stdItem_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_HIT_MSG)
    }

    static {
      defaultInstance = new STC_HIT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_HIT_MSG)
  }

  public interface STC_TANK_DIE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 Id = 1;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required uint32 reliveTime = 2;
    /**
     * <code>required uint32 reliveTime = 2;</code>
     *
     * <pre>
     *复活时间
     * </pre>
     */
    boolean hasReliveTime();
    /**
     * <code>required uint32 reliveTime = 2;</code>
     *
     * <pre>
     *复活时间
     * </pre>
     */
    int getReliveTime();

    // required bool hasRelive = 3;
    /**
     * <code>required bool hasRelive = 3;</code>
     *
     * <pre>
     *是否能复活(不可复活客户端回收坦克资源)
     * </pre>
     */
    boolean hasHasRelive();
    /**
     * <code>required bool hasRelive = 3;</code>
     *
     * <pre>
     *是否能复活(不可复活客户端回收坦克资源)
     * </pre>
     */
    boolean getHasRelive();

    // required bool payRelive = 4;
    /**
     * <code>required bool payRelive = 4;</code>
     *
     * <pre>
     *是否可花钱复活(不可花钱复活则不显示复活按钮)
     * </pre>
     */
    boolean hasPayRelive();
    /**
     * <code>required bool payRelive = 4;</code>
     *
     * <pre>
     *是否可花钱复活(不可花钱复活则不显示复活按钮)
     * </pre>
     */
    boolean getPayRelive();

    // required uint32 gold = 5;
    /**
     * <code>required uint32 gold = 5;</code>
     *
     * <pre>
     *复活需要金币数 
     * </pre>
     */
    boolean hasGold();
    /**
     * <code>required uint32 gold = 5;</code>
     *
     * <pre>
     *复活需要金币数 
     * </pre>
     */
    int getGold();

    // required uint32 freeCount = 6;
    /**
     * <code>required uint32 freeCount = 6;</code>
     *
     * <pre>
     *免费复活次数
     * </pre>
     */
    boolean hasFreeCount();
    /**
     * <code>required uint32 freeCount = 6;</code>
     *
     * <pre>
     *免费复活次数
     * </pre>
     */
    int getFreeCount();

    // required string atkName = 7;
    /**
     * <code>required string atkName = 7;</code>
     *
     * <pre>
     *攻击者名称
     * </pre>
     */
    boolean hasAtkName();
    /**
     * <code>required string atkName = 7;</code>
     *
     * <pre>
     *攻击者名称
     * </pre>
     */
    java.lang.String getAtkName();
    /**
     * <code>required string atkName = 7;</code>
     *
     * <pre>
     *攻击者名称
     * </pre>
     */
    com.google.protobuf.ByteString
        getAtkNameBytes();

    // required uint32 atkTankId = 8;
    /**
     * <code>required uint32 atkTankId = 8;</code>
     *
     * <pre>
     *攻击者坦克ID
     * </pre>
     */
    boolean hasAtkTankId();
    /**
     * <code>required uint32 atkTankId = 8;</code>
     *
     * <pre>
     *攻击者坦克ID
     * </pre>
     */
    int getAtkTankId();

    // required uint32 atkId = 9;
    /**
     * <code>required uint32 atkId = 9;</code>
     *
     * <pre>
     *攻击者实例id
     * </pre>
     */
    boolean hasAtkId();
    /**
     * <code>required uint32 atkId = 9;</code>
     *
     * <pre>
     *攻击者实例id
     * </pre>
     */
    int getAtkId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_TANK_DIE_MSG}
   *
   * <pre>
   *坦克死亡消息
   * </pre>
   */
  public static final class STC_TANK_DIE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_TANK_DIE_MSGOrBuilder {
    // Use STC_TANK_DIE_MSG.newBuilder() to construct.
    private STC_TANK_DIE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_TANK_DIE_MSG(boolean noInit) {}

    private static final STC_TANK_DIE_MSG defaultInstance;
    public static STC_TANK_DIE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_TANK_DIE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_TANK_DIE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              reliveTime_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              hasRelive_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              payRelive_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              gold_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              freeCount_ = input.readUInt32();
              break;
            }
            case 58: {
              bitField0_ |= 0x00000040;
              atkName_ = input.readBytes();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              atkTankId_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              atkId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_TANK_DIE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_TANK_DIE_MSG>() {
      public STC_TANK_DIE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_TANK_DIE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_TANK_DIE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 reliveTime = 2;
    public static final int RELIVETIME_FIELD_NUMBER = 2;
    private int reliveTime_;
    /**
     * <code>required uint32 reliveTime = 2;</code>
     *
     * <pre>
     *复活时间
     * </pre>
     */
    public boolean hasReliveTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 reliveTime = 2;</code>
     *
     * <pre>
     *复活时间
     * </pre>
     */
    public int getReliveTime() {
      return reliveTime_;
    }

    // required bool hasRelive = 3;
    public static final int HASRELIVE_FIELD_NUMBER = 3;
    private boolean hasRelive_;
    /**
     * <code>required bool hasRelive = 3;</code>
     *
     * <pre>
     *是否能复活(不可复活客户端回收坦克资源)
     * </pre>
     */
    public boolean hasHasRelive() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool hasRelive = 3;</code>
     *
     * <pre>
     *是否能复活(不可复活客户端回收坦克资源)
     * </pre>
     */
    public boolean getHasRelive() {
      return hasRelive_;
    }

    // required bool payRelive = 4;
    public static final int PAYRELIVE_FIELD_NUMBER = 4;
    private boolean payRelive_;
    /**
     * <code>required bool payRelive = 4;</code>
     *
     * <pre>
     *是否可花钱复活(不可花钱复活则不显示复活按钮)
     * </pre>
     */
    public boolean hasPayRelive() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool payRelive = 4;</code>
     *
     * <pre>
     *是否可花钱复活(不可花钱复活则不显示复活按钮)
     * </pre>
     */
    public boolean getPayRelive() {
      return payRelive_;
    }

    // required uint32 gold = 5;
    public static final int GOLD_FIELD_NUMBER = 5;
    private int gold_;
    /**
     * <code>required uint32 gold = 5;</code>
     *
     * <pre>
     *复活需要金币数 
     * </pre>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 gold = 5;</code>
     *
     * <pre>
     *复活需要金币数 
     * </pre>
     */
    public int getGold() {
      return gold_;
    }

    // required uint32 freeCount = 6;
    public static final int FREECOUNT_FIELD_NUMBER = 6;
    private int freeCount_;
    /**
     * <code>required uint32 freeCount = 6;</code>
     *
     * <pre>
     *免费复活次数
     * </pre>
     */
    public boolean hasFreeCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 freeCount = 6;</code>
     *
     * <pre>
     *免费复活次数
     * </pre>
     */
    public int getFreeCount() {
      return freeCount_;
    }

    // required string atkName = 7;
    public static final int ATKNAME_FIELD_NUMBER = 7;
    private java.lang.Object atkName_;
    /**
     * <code>required string atkName = 7;</code>
     *
     * <pre>
     *攻击者名称
     * </pre>
     */
    public boolean hasAtkName() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required string atkName = 7;</code>
     *
     * <pre>
     *攻击者名称
     * </pre>
     */
    public java.lang.String getAtkName() {
      java.lang.Object ref = atkName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          atkName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string atkName = 7;</code>
     *
     * <pre>
     *攻击者名称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAtkNameBytes() {
      java.lang.Object ref = atkName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        atkName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint32 atkTankId = 8;
    public static final int ATKTANKID_FIELD_NUMBER = 8;
    private int atkTankId_;
    /**
     * <code>required uint32 atkTankId = 8;</code>
     *
     * <pre>
     *攻击者坦克ID
     * </pre>
     */
    public boolean hasAtkTankId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required uint32 atkTankId = 8;</code>
     *
     * <pre>
     *攻击者坦克ID
     * </pre>
     */
    public int getAtkTankId() {
      return atkTankId_;
    }

    // required uint32 atkId = 9;
    public static final int ATKID_FIELD_NUMBER = 9;
    private int atkId_;
    /**
     * <code>required uint32 atkId = 9;</code>
     *
     * <pre>
     *攻击者实例id
     * </pre>
     */
    public boolean hasAtkId() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required uint32 atkId = 9;</code>
     *
     * <pre>
     *攻击者实例id
     * </pre>
     */
    public int getAtkId() {
      return atkId_;
    }

    private void initFields() {
      id_ = 0;
      reliveTime_ = 0;
      hasRelive_ = false;
      payRelive_ = false;
      gold_ = 0;
      freeCount_ = 0;
      atkName_ = "";
      atkTankId_ = 0;
      atkId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReliveTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasRelive()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPayRelive()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGold()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFreeCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAtkName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAtkTankId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAtkId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, reliveTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, hasRelive_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, payRelive_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, gold_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, freeCount_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getAtkNameBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, atkTankId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, atkId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, reliveTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, hasRelive_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, payRelive_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, gold_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, freeCount_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getAtkNameBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, atkTankId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, atkId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_TANK_DIE_MSG}
     *
     * <pre>
     *坦克死亡消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        reliveTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        hasRelive_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        payRelive_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        gold_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        freeCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        atkName_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        atkTankId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        atkId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reliveTime_ = reliveTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hasRelive_ = hasRelive_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.payRelive_ = payRelive_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gold_ = gold_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.freeCount_ = freeCount_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.atkName_ = atkName_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.atkTankId_ = atkTankId_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.atkId_ = atkId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasReliveTime()) {
          setReliveTime(other.getReliveTime());
        }
        if (other.hasHasRelive()) {
          setHasRelive(other.getHasRelive());
        }
        if (other.hasPayRelive()) {
          setPayRelive(other.getPayRelive());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        if (other.hasFreeCount()) {
          setFreeCount(other.getFreeCount());
        }
        if (other.hasAtkName()) {
          bitField0_ |= 0x00000040;
          atkName_ = other.atkName_;
          
        }
        if (other.hasAtkTankId()) {
          setAtkTankId(other.getAtkTankId());
        }
        if (other.hasAtkId()) {
          setAtkId(other.getAtkId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasReliveTime()) {
          
          return false;
        }
        if (!hasHasRelive()) {
          
          return false;
        }
        if (!hasPayRelive()) {
          
          return false;
        }
        if (!hasGold()) {
          
          return false;
        }
        if (!hasFreeCount()) {
          
          return false;
        }
        if (!hasAtkName()) {
          
          return false;
        }
        if (!hasAtkTankId()) {
          
          return false;
        }
        if (!hasAtkId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_DIE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 Id = 1;
      private int id_ ;
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 reliveTime = 2;
      private int reliveTime_ ;
      /**
       * <code>required uint32 reliveTime = 2;</code>
       *
       * <pre>
       *复活时间
       * </pre>
       */
      public boolean hasReliveTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 reliveTime = 2;</code>
       *
       * <pre>
       *复活时间
       * </pre>
       */
      public int getReliveTime() {
        return reliveTime_;
      }
      /**
       * <code>required uint32 reliveTime = 2;</code>
       *
       * <pre>
       *复活时间
       * </pre>
       */
      public Builder setReliveTime(int value) {
        bitField0_ |= 0x00000002;
        reliveTime_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 reliveTime = 2;</code>
       *
       * <pre>
       *复活时间
       * </pre>
       */
      public Builder clearReliveTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reliveTime_ = 0;
        
        return this;
      }

      // required bool hasRelive = 3;
      private boolean hasRelive_ ;
      /**
       * <code>required bool hasRelive = 3;</code>
       *
       * <pre>
       *是否能复活(不可复活客户端回收坦克资源)
       * </pre>
       */
      public boolean hasHasRelive() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool hasRelive = 3;</code>
       *
       * <pre>
       *是否能复活(不可复活客户端回收坦克资源)
       * </pre>
       */
      public boolean getHasRelive() {
        return hasRelive_;
      }
      /**
       * <code>required bool hasRelive = 3;</code>
       *
       * <pre>
       *是否能复活(不可复活客户端回收坦克资源)
       * </pre>
       */
      public Builder setHasRelive(boolean value) {
        bitField0_ |= 0x00000004;
        hasRelive_ = value;
        
        return this;
      }
      /**
       * <code>required bool hasRelive = 3;</code>
       *
       * <pre>
       *是否能复活(不可复活客户端回收坦克资源)
       * </pre>
       */
      public Builder clearHasRelive() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hasRelive_ = false;
        
        return this;
      }

      // required bool payRelive = 4;
      private boolean payRelive_ ;
      /**
       * <code>required bool payRelive = 4;</code>
       *
       * <pre>
       *是否可花钱复活(不可花钱复活则不显示复活按钮)
       * </pre>
       */
      public boolean hasPayRelive() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool payRelive = 4;</code>
       *
       * <pre>
       *是否可花钱复活(不可花钱复活则不显示复活按钮)
       * </pre>
       */
      public boolean getPayRelive() {
        return payRelive_;
      }
      /**
       * <code>required bool payRelive = 4;</code>
       *
       * <pre>
       *是否可花钱复活(不可花钱复活则不显示复活按钮)
       * </pre>
       */
      public Builder setPayRelive(boolean value) {
        bitField0_ |= 0x00000008;
        payRelive_ = value;
        
        return this;
      }
      /**
       * <code>required bool payRelive = 4;</code>
       *
       * <pre>
       *是否可花钱复活(不可花钱复活则不显示复活按钮)
       * </pre>
       */
      public Builder clearPayRelive() {
        bitField0_ = (bitField0_ & ~0x00000008);
        payRelive_ = false;
        
        return this;
      }

      // required uint32 gold = 5;
      private int gold_ ;
      /**
       * <code>required uint32 gold = 5;</code>
       *
       * <pre>
       *复活需要金币数 
       * </pre>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 gold = 5;</code>
       *
       * <pre>
       *复活需要金币数 
       * </pre>
       */
      public int getGold() {
        return gold_;
      }
      /**
       * <code>required uint32 gold = 5;</code>
       *
       * <pre>
       *复活需要金币数 
       * </pre>
       */
      public Builder setGold(int value) {
        bitField0_ |= 0x00000010;
        gold_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 gold = 5;</code>
       *
       * <pre>
       *复活需要金币数 
       * </pre>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gold_ = 0;
        
        return this;
      }

      // required uint32 freeCount = 6;
      private int freeCount_ ;
      /**
       * <code>required uint32 freeCount = 6;</code>
       *
       * <pre>
       *免费复活次数
       * </pre>
       */
      public boolean hasFreeCount() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 freeCount = 6;</code>
       *
       * <pre>
       *免费复活次数
       * </pre>
       */
      public int getFreeCount() {
        return freeCount_;
      }
      /**
       * <code>required uint32 freeCount = 6;</code>
       *
       * <pre>
       *免费复活次数
       * </pre>
       */
      public Builder setFreeCount(int value) {
        bitField0_ |= 0x00000020;
        freeCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 freeCount = 6;</code>
       *
       * <pre>
       *免费复活次数
       * </pre>
       */
      public Builder clearFreeCount() {
        bitField0_ = (bitField0_ & ~0x00000020);
        freeCount_ = 0;
        
        return this;
      }

      // required string atkName = 7;
      private java.lang.Object atkName_ = "";
      /**
       * <code>required string atkName = 7;</code>
       *
       * <pre>
       *攻击者名称
       * </pre>
       */
      public boolean hasAtkName() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required string atkName = 7;</code>
       *
       * <pre>
       *攻击者名称
       * </pre>
       */
      public java.lang.String getAtkName() {
        java.lang.Object ref = atkName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          atkName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string atkName = 7;</code>
       *
       * <pre>
       *攻击者名称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAtkNameBytes() {
        java.lang.Object ref = atkName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          atkName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string atkName = 7;</code>
       *
       * <pre>
       *攻击者名称
       * </pre>
       */
      public Builder setAtkName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        atkName_ = value;
        
        return this;
      }
      /**
       * <code>required string atkName = 7;</code>
       *
       * <pre>
       *攻击者名称
       * </pre>
       */
      public Builder clearAtkName() {
        bitField0_ = (bitField0_ & ~0x00000040);
        atkName_ = getDefaultInstance().getAtkName();
        
        return this;
      }
      /**
       * <code>required string atkName = 7;</code>
       *
       * <pre>
       *攻击者名称
       * </pre>
       */
      public Builder setAtkNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        atkName_ = value;
        
        return this;
      }

      // required uint32 atkTankId = 8;
      private int atkTankId_ ;
      /**
       * <code>required uint32 atkTankId = 8;</code>
       *
       * <pre>
       *攻击者坦克ID
       * </pre>
       */
      public boolean hasAtkTankId() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint32 atkTankId = 8;</code>
       *
       * <pre>
       *攻击者坦克ID
       * </pre>
       */
      public int getAtkTankId() {
        return atkTankId_;
      }
      /**
       * <code>required uint32 atkTankId = 8;</code>
       *
       * <pre>
       *攻击者坦克ID
       * </pre>
       */
      public Builder setAtkTankId(int value) {
        bitField0_ |= 0x00000080;
        atkTankId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 atkTankId = 8;</code>
       *
       * <pre>
       *攻击者坦克ID
       * </pre>
       */
      public Builder clearAtkTankId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        atkTankId_ = 0;
        
        return this;
      }

      // required uint32 atkId = 9;
      private int atkId_ ;
      /**
       * <code>required uint32 atkId = 9;</code>
       *
       * <pre>
       *攻击者实例id
       * </pre>
       */
      public boolean hasAtkId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required uint32 atkId = 9;</code>
       *
       * <pre>
       *攻击者实例id
       * </pre>
       */
      public int getAtkId() {
        return atkId_;
      }
      /**
       * <code>required uint32 atkId = 9;</code>
       *
       * <pre>
       *攻击者实例id
       * </pre>
       */
      public Builder setAtkId(int value) {
        bitField0_ |= 0x00000100;
        atkId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 atkId = 9;</code>
       *
       * <pre>
       *攻击者实例id
       * </pre>
       */
      public Builder clearAtkId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        atkId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_TANK_DIE_MSG)
    }

    static {
      defaultInstance = new STC_TANK_DIE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_TANK_DIE_MSG)
  }

  public interface STC_TANK_RELIVE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required float dir = 2;
    /**
     * <code>required float dir = 2;</code>
     *
     * <pre>
     *朝向
     * </pre>
     */
    boolean hasDir();
    /**
     * <code>required float dir = 2;</code>
     *
     * <pre>
     *朝向
     * </pre>
     */
    float getDir();

    // required .PROTO_BATTLE.Coordinate3D position = 3;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *复活的位置
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *复活的位置
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_TANK_RELIVE_MSG}
   *
   * <pre>
   *坦克复活消息
   * </pre>
   */
  public static final class STC_TANK_RELIVE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_TANK_RELIVE_MSGOrBuilder {
    // Use STC_TANK_RELIVE_MSG.newBuilder() to construct.
    private STC_TANK_RELIVE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_TANK_RELIVE_MSG(boolean noInit) {}

    private static final STC_TANK_RELIVE_MSG defaultInstance;
    public static STC_TANK_RELIVE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_TANK_RELIVE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_TANK_RELIVE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              dir_ = input.readFloat();
              break;
            }
            case 26: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_TANK_RELIVE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_TANK_RELIVE_MSG>() {
      public STC_TANK_RELIVE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_TANK_RELIVE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_TANK_RELIVE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required float dir = 2;
    public static final int DIR_FIELD_NUMBER = 2;
    private float dir_;
    /**
     * <code>required float dir = 2;</code>
     *
     * <pre>
     *朝向
     * </pre>
     */
    public boolean hasDir() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float dir = 2;</code>
     *
     * <pre>
     *朝向
     * </pre>
     */
    public float getDir() {
      return dir_;
    }

    // required .PROTO_BATTLE.Coordinate3D position = 3;
    public static final int POSITION_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *复活的位置
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *复活的位置
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
      return position_;
    }

    private void initFields() {
      id_ = 0;
      dir_ = 0F;
      position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDir()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, dir_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, position_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, dir_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, position_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_TANK_RELIVE_MSG}
     *
     * <pre>
     *坦克复活消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        dir_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.dir_ = dir_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasDir()) {
          setDir(other.getDir());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasDir()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!getPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_TANK_RELIVE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required float dir = 2;
      private float dir_ ;
      /**
       * <code>required float dir = 2;</code>
       *
       * <pre>
       *朝向
       * </pre>
       */
      public boolean hasDir() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float dir = 2;</code>
       *
       * <pre>
       *朝向
       * </pre>
       */
      public float getDir() {
        return dir_;
      }
      /**
       * <code>required float dir = 2;</code>
       *
       * <pre>
       *朝向
       * </pre>
       */
      public Builder setDir(float value) {
        bitField0_ |= 0x00000002;
        dir_ = value;
        
        return this;
      }
      /**
       * <code>required float dir = 2;</code>
       *
       * <pre>
       *朝向
       * </pre>
       */
      public Builder clearDir() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dir_ = 0F;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D position = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *复活的位置
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *复活的位置
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
        return position_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *复活的位置
       * </pre>
       */
      public Builder setPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        position_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *复活的位置
       * </pre>
       */
      public Builder setPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        position_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *复活的位置
       * </pre>
       */
      public Builder mergePosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            position_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          position_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(position_).mergeFrom(value).buildPartial();
        } else {
          position_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *复活的位置
       * </pre>
       */
      public Builder clearPosition() {
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_TANK_RELIVE_MSG)
    }

    static {
      defaultInstance = new STC_TANK_RELIVE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_TANK_RELIVE_MSG)
  }

  public interface PropUnitOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     */
    int getId();

    // required float val = 2;
    /**
     * <code>required float val = 2;</code>
     */
    boolean hasVal();
    /**
     * <code>required float val = 2;</code>
     */
    float getVal();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.PropUnit}
   */
  public static final class PropUnit extends
      com.google.protobuf.GeneratedMessageLite
      implements PropUnitOrBuilder {
    // Use PropUnit.newBuilder() to construct.
    private PropUnit(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private PropUnit(boolean noInit) {}

    private static final PropUnit defaultInstance;
    public static PropUnit getDefaultInstance() {
      return defaultInstance;
    }

    public PropUnit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private PropUnit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              val_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PropUnit> PARSER =
        new com.google.protobuf.AbstractParser<PropUnit>() {
      public PropUnit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PropUnit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PropUnit> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    // required float val = 2;
    public static final int VAL_FIELD_NUMBER = 2;
    private float val_;
    /**
     * <code>required float val = 2;</code>
     */
    public boolean hasVal() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float val = 2;</code>
     */
    public float getVal() {
      return val_;
    }

    private void initFields() {
      id_ = 0;
      val_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVal()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, val_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, val_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PropUnit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.PropUnit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.PropUnit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.PropUnit, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.PropUnitOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.PropUnit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        val_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.PropUnit getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.PropUnit.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.PropUnit build() {
        com.ourpalm.tank.message.BATTLE_MSG.PropUnit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.PropUnit buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.PropUnit result = new com.ourpalm.tank.message.BATTLE_MSG.PropUnit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.val_ = val_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.PropUnit other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.PropUnit.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasVal()) {
          setVal(other.getVal());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasVal()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.PropUnit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.PropUnit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required float val = 2;
      private float val_ ;
      /**
       * <code>required float val = 2;</code>
       */
      public boolean hasVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float val = 2;</code>
       */
      public float getVal() {
        return val_;
      }
      /**
       * <code>required float val = 2;</code>
       */
      public Builder setVal(float value) {
        bitField0_ |= 0x00000002;
        val_ = value;
        
        return this;
      }
      /**
       * <code>required float val = 2;</code>
       */
      public Builder clearVal() {
        bitField0_ = (bitField0_ & ~0x00000002);
        val_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.PropUnit)
    }

    static {
      defaultInstance = new PropUnit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.PropUnit)
  }

  public interface STC_ATTR_SYN_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 Id = 1;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // repeated .PROTO_BATTLE.PropUnit Props = 2;
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    java.util.List<com.ourpalm.tank.message.BATTLE_MSG.PropUnit> 
        getPropsList();
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.PropUnit getProps(int index);
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    int getPropsCount();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_ATTR_SYN_MSG}
   *
   * <pre>
   *坦克属性同步
   * </pre>
   */
  public static final class STC_ATTR_SYN_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_ATTR_SYN_MSGOrBuilder {
    // Use STC_ATTR_SYN_MSG.newBuilder() to construct.
    private STC_ATTR_SYN_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_ATTR_SYN_MSG(boolean noInit) {}

    private static final STC_ATTR_SYN_MSG defaultInstance;
    public static STC_ATTR_SYN_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_ATTR_SYN_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_ATTR_SYN_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                props_ = new java.util.ArrayList<com.ourpalm.tank.message.BATTLE_MSG.PropUnit>();
                mutable_bitField0_ |= 0x00000002;
              }
              props_.add(input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.PropUnit.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          props_ = java.util.Collections.unmodifiableList(props_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_ATTR_SYN_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_ATTR_SYN_MSG>() {
      public STC_ATTR_SYN_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_ATTR_SYN_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_ATTR_SYN_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 Id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 Id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // repeated .PROTO_BATTLE.PropUnit Props = 2;
    public static final int PROPS_FIELD_NUMBER = 2;
    private java.util.List<com.ourpalm.tank.message.BATTLE_MSG.PropUnit> props_;
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    public java.util.List<com.ourpalm.tank.message.BATTLE_MSG.PropUnit> getPropsList() {
      return props_;
    }
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    public java.util.List<? extends com.ourpalm.tank.message.BATTLE_MSG.PropUnitOrBuilder> 
        getPropsOrBuilderList() {
      return props_;
    }
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    public int getPropsCount() {
      return props_.size();
    }
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.PropUnit getProps(int index) {
      return props_.get(index);
    }
    /**
     * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
     *
     * <pre>
     *属性列表
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.PropUnitOrBuilder getPropsOrBuilder(
        int index) {
      return props_.get(index);
    }

    private void initFields() {
      id_ = 0;
      props_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPropsCount(); i++) {
        if (!getProps(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      for (int i = 0; i < props_.size(); i++) {
        output.writeMessage(2, props_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      for (int i = 0; i < props_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, props_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_ATTR_SYN_MSG}
     *
     * <pre>
     *坦克属性同步
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        props_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          props_ = java.util.Collections.unmodifiableList(props_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.props_ = props_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (!other.props_.isEmpty()) {
          if (props_.isEmpty()) {
            props_ = other.props_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePropsIsMutable();
            props_.addAll(other.props_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        for (int i = 0; i < getPropsCount(); i++) {
          if (!getProps(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_ATTR_SYN_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 Id = 1;
      private int id_ ;
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 Id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // repeated .PROTO_BATTLE.PropUnit Props = 2;
      private java.util.List<com.ourpalm.tank.message.BATTLE_MSG.PropUnit> props_ =
        java.util.Collections.emptyList();
      private void ensurePropsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          props_ = new java.util.ArrayList<com.ourpalm.tank.message.BATTLE_MSG.PropUnit>(props_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public java.util.List<com.ourpalm.tank.message.BATTLE_MSG.PropUnit> getPropsList() {
        return java.util.Collections.unmodifiableList(props_);
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public int getPropsCount() {
        return props_.size();
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.PropUnit getProps(int index) {
        return props_.get(index);
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder setProps(
          int index, com.ourpalm.tank.message.BATTLE_MSG.PropUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropsIsMutable();
        props_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder setProps(
          int index, com.ourpalm.tank.message.BATTLE_MSG.PropUnit.Builder builderForValue) {
        ensurePropsIsMutable();
        props_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder addProps(com.ourpalm.tank.message.BATTLE_MSG.PropUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropsIsMutable();
        props_.add(value);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder addProps(
          int index, com.ourpalm.tank.message.BATTLE_MSG.PropUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropsIsMutable();
        props_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder addProps(
          com.ourpalm.tank.message.BATTLE_MSG.PropUnit.Builder builderForValue) {
        ensurePropsIsMutable();
        props_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder addProps(
          int index, com.ourpalm.tank.message.BATTLE_MSG.PropUnit.Builder builderForValue) {
        ensurePropsIsMutable();
        props_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder addAllProps(
          java.lang.Iterable<? extends com.ourpalm.tank.message.BATTLE_MSG.PropUnit> values) {
        ensurePropsIsMutable();
        super.addAll(values, props_);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder clearProps() {
        props_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.PropUnit Props = 2;</code>
       *
       * <pre>
       *属性列表
       * </pre>
       */
      public Builder removeProps(int index) {
        ensurePropsIsMutable();
        props_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_ATTR_SYN_MSG)
    }

    static {
      defaultInstance = new STC_ATTR_SYN_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_ATTR_SYN_MSG)
  }

  public interface STC_WAR_SCORE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 time = 1;
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     *剩余时间(秒)
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     *剩余时间(秒)
     * </pre>
     */
    int getTime();

    // required uint32 blue = 2;
    /**
     * <code>required uint32 blue = 2;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    boolean hasBlue();
    /**
     * <code>required uint32 blue = 2;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    int getBlue();

    // required uint32 red = 3;
    /**
     * <code>required uint32 red = 3;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    boolean hasRed();
    /**
     * <code>required uint32 red = 3;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    int getRed();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_WAR_SCORE_MSG}
   *
   * <pre>
   *比赛比分
   * </pre>
   */
  public static final class STC_WAR_SCORE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_WAR_SCORE_MSGOrBuilder {
    // Use STC_WAR_SCORE_MSG.newBuilder() to construct.
    private STC_WAR_SCORE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_WAR_SCORE_MSG(boolean noInit) {}

    private static final STC_WAR_SCORE_MSG defaultInstance;
    public static STC_WAR_SCORE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_WAR_SCORE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_WAR_SCORE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              time_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              blue_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              red_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_WAR_SCORE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_WAR_SCORE_MSG>() {
      public STC_WAR_SCORE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_WAR_SCORE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_WAR_SCORE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 time = 1;
    public static final int TIME_FIELD_NUMBER = 1;
    private int time_;
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     *剩余时间(秒)
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     *剩余时间(秒)
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    // required uint32 blue = 2;
    public static final int BLUE_FIELD_NUMBER = 2;
    private int blue_;
    /**
     * <code>required uint32 blue = 2;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    public boolean hasBlue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 blue = 2;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    public int getBlue() {
      return blue_;
    }

    // required uint32 red = 3;
    public static final int RED_FIELD_NUMBER = 3;
    private int red_;
    /**
     * <code>required uint32 red = 3;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    public boolean hasRed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 red = 3;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    public int getRed() {
      return red_;
    }

    private void initFields() {
      time_ = 0;
      blue_ = 0;
      red_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, blue_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, red_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, blue_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, red_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_WAR_SCORE_MSG}
     *
     * <pre>
     *比赛比分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        blue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        red_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.blue_ = blue_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.red_ = red_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG.getDefaultInstance()) return this;
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasBlue()) {
          setBlue(other.getBlue());
        }
        if (other.hasRed()) {
          setRed(other.getRed());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTime()) {
          
          return false;
        }
        if (!hasBlue()) {
          
          return false;
        }
        if (!hasRed()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_SCORE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 time = 1;
      private int time_ ;
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       *剩余时间(秒)
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       *剩余时间(秒)
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       *剩余时间(秒)
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000001;
        time_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       *剩余时间(秒)
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0;
        
        return this;
      }

      // required uint32 blue = 2;
      private int blue_ ;
      /**
       * <code>required uint32 blue = 2;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public boolean hasBlue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 blue = 2;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public int getBlue() {
        return blue_;
      }
      /**
       * <code>required uint32 blue = 2;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public Builder setBlue(int value) {
        bitField0_ |= 0x00000002;
        blue_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 blue = 2;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public Builder clearBlue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        blue_ = 0;
        
        return this;
      }

      // required uint32 red = 3;
      private int red_ ;
      /**
       * <code>required uint32 red = 3;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public boolean hasRed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 red = 3;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public int getRed() {
        return red_;
      }
      /**
       * <code>required uint32 red = 3;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public Builder setRed(int value) {
        bitField0_ |= 0x00000004;
        red_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 red = 3;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public Builder clearRed() {
        bitField0_ = (bitField0_ & ~0x00000004);
        red_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_WAR_SCORE_MSG)
    }

    static {
      defaultInstance = new STC_WAR_SCORE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_WAR_SCORE_MSG)
  }

  public interface WarRewardsItemOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 vipMul = 1;
    /**
     * <code>required uint32 vipMul = 1;</code>
     *
     * <pre>
     *vip等级倍数 0 表示没有
     * </pre>
     */
    boolean hasVipMul();
    /**
     * <code>required uint32 vipMul = 1;</code>
     *
     * <pre>
     *vip等级倍数 0 表示没有
     * </pre>
     */
    int getVipMul();

    // required uint32 goldTankMul = 2;
    /**
     * <code>required uint32 goldTankMul = 2;</code>
     *
     * <pre>
     *金币坦克加成倍数  0 表示没有
     * </pre>
     */
    boolean hasGoldTankMul();
    /**
     * <code>required uint32 goldTankMul = 2;</code>
     *
     * <pre>
     *金币坦克加成倍数  0 表示没有
     * </pre>
     */
    int getGoldTankMul();

    // required uint32 activityMul = 4;
    /**
     * <code>required uint32 activityMul = 4;</code>
     *
     * <pre>
     *获得加成倍数 0 表示没有
     * </pre>
     */
    boolean hasActivityMul();
    /**
     * <code>required uint32 activityMul = 4;</code>
     *
     * <pre>
     *获得加成倍数 0 表示没有
     * </pre>
     */
    int getActivityMul();

    // required .PROTO_BATTLE.PlusItem tankExp = 8;
    /**
     * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
     *
     * <pre>
     *坦克经验
     * </pre>
     */
    boolean hasTankExp();
    /**
     * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
     *
     * <pre>
     *坦克经验
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.PlusItem getTankExp();

    // required .PROTO_BATTLE.PlusItem honor = 9;
    /**
     * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
     *
     * <pre>
     *荣誉点
     * </pre>
     */
    boolean hasHonor();
    /**
     * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
     *
     * <pre>
     *荣誉点
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.PlusItem getHonor();

    // required .PROTO_BATTLE.PlusItem roleTankExp = 10;
    /**
     * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
     *
     * <pre>
     *全局坦克经验
     * </pre>
     */
    boolean hasRoleTankExp();
    /**
     * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
     *
     * <pre>
     *全局坦克经验
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.PlusItem getRoleTankExp();

    // required .PROTO_BATTLE.PlusItem iron = 11;
    /**
     * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
     *
     * <pre>
     *银币数
     * </pre>
     */
    boolean hasIron();
    /**
     * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
     *
     * <pre>
     *银币数
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.PlusItem getIron();

    // required uint32 dayIron = 6;
    /**
     * <code>required uint32 dayIron = 6;</code>
     *
     * <pre>
     *今日累计获得银币数
     * </pre>
     */
    boolean hasDayIron();
    /**
     * <code>required uint32 dayIron = 6;</code>
     *
     * <pre>
     *今日累计获得银币数
     * </pre>
     */
    int getDayIron();

    // required uint32 dayMaxIron = 7;
    /**
     * <code>required uint32 dayMaxIron = 7;</code>
     *
     * <pre>
     *今日获得银币上限
     * </pre>
     */
    boolean hasDayMaxIron();
    /**
     * <code>required uint32 dayMaxIron = 7;</code>
     *
     * <pre>
     *今日获得银币上限
     * </pre>
     */
    int getDayMaxIron();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.WarRewardsItem}
   *
   * <pre>
   *比赛奖励Item
   * </pre>
   */
  public static final class WarRewardsItem extends
      com.google.protobuf.GeneratedMessageLite
      implements WarRewardsItemOrBuilder {
    // Use WarRewardsItem.newBuilder() to construct.
    private WarRewardsItem(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private WarRewardsItem(boolean noInit) {}

    private static final WarRewardsItem defaultInstance;
    public static WarRewardsItem getDefaultInstance() {
      return defaultInstance;
    }

    public WarRewardsItem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private WarRewardsItem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              vipMul_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              goldTankMul_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              activityMul_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000080;
              dayIron_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000100;
              dayMaxIron_ = input.readUInt32();
              break;
            }
            case 66: {
              com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = tankExp_.toBuilder();
              }
              tankExp_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.PlusItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tankExp_);
                tankExp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 74: {
              com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = honor_.toBuilder();
              }
              honor_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.PlusItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(honor_);
                honor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 82: {
              com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = roleTankExp_.toBuilder();
              }
              roleTankExp_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.PlusItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roleTankExp_);
                roleTankExp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 90: {
              com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = iron_.toBuilder();
              }
              iron_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.PlusItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(iron_);
                iron_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<WarRewardsItem> PARSER =
        new com.google.protobuf.AbstractParser<WarRewardsItem>() {
      public WarRewardsItem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WarRewardsItem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WarRewardsItem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 vipMul = 1;
    public static final int VIPMUL_FIELD_NUMBER = 1;
    private int vipMul_;
    /**
     * <code>required uint32 vipMul = 1;</code>
     *
     * <pre>
     *vip等级倍数 0 表示没有
     * </pre>
     */
    public boolean hasVipMul() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 vipMul = 1;</code>
     *
     * <pre>
     *vip等级倍数 0 表示没有
     * </pre>
     */
    public int getVipMul() {
      return vipMul_;
    }

    // required uint32 goldTankMul = 2;
    public static final int GOLDTANKMUL_FIELD_NUMBER = 2;
    private int goldTankMul_;
    /**
     * <code>required uint32 goldTankMul = 2;</code>
     *
     * <pre>
     *金币坦克加成倍数  0 表示没有
     * </pre>
     */
    public boolean hasGoldTankMul() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 goldTankMul = 2;</code>
     *
     * <pre>
     *金币坦克加成倍数  0 表示没有
     * </pre>
     */
    public int getGoldTankMul() {
      return goldTankMul_;
    }

    // required uint32 activityMul = 4;
    public static final int ACTIVITYMUL_FIELD_NUMBER = 4;
    private int activityMul_;
    /**
     * <code>required uint32 activityMul = 4;</code>
     *
     * <pre>
     *获得加成倍数 0 表示没有
     * </pre>
     */
    public boolean hasActivityMul() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 activityMul = 4;</code>
     *
     * <pre>
     *获得加成倍数 0 表示没有
     * </pre>
     */
    public int getActivityMul() {
      return activityMul_;
    }

    // required .PROTO_BATTLE.PlusItem tankExp = 8;
    public static final int TANKEXP_FIELD_NUMBER = 8;
    private com.ourpalm.tank.message.BATTLE_MSG.PlusItem tankExp_;
    /**
     * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
     *
     * <pre>
     *坦克经验
     * </pre>
     */
    public boolean hasTankExp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
     *
     * <pre>
     *坦克经验
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getTankExp() {
      return tankExp_;
    }

    // required .PROTO_BATTLE.PlusItem honor = 9;
    public static final int HONOR_FIELD_NUMBER = 9;
    private com.ourpalm.tank.message.BATTLE_MSG.PlusItem honor_;
    /**
     * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
     *
     * <pre>
     *荣誉点
     * </pre>
     */
    public boolean hasHonor() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
     *
     * <pre>
     *荣誉点
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getHonor() {
      return honor_;
    }

    // required .PROTO_BATTLE.PlusItem roleTankExp = 10;
    public static final int ROLETANKEXP_FIELD_NUMBER = 10;
    private com.ourpalm.tank.message.BATTLE_MSG.PlusItem roleTankExp_;
    /**
     * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
     *
     * <pre>
     *全局坦克经验
     * </pre>
     */
    public boolean hasRoleTankExp() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
     *
     * <pre>
     *全局坦克经验
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getRoleTankExp() {
      return roleTankExp_;
    }

    // required .PROTO_BATTLE.PlusItem iron = 11;
    public static final int IRON_FIELD_NUMBER = 11;
    private com.ourpalm.tank.message.BATTLE_MSG.PlusItem iron_;
    /**
     * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
     *
     * <pre>
     *银币数
     * </pre>
     */
    public boolean hasIron() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
     *
     * <pre>
     *银币数
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getIron() {
      return iron_;
    }

    // required uint32 dayIron = 6;
    public static final int DAYIRON_FIELD_NUMBER = 6;
    private int dayIron_;
    /**
     * <code>required uint32 dayIron = 6;</code>
     *
     * <pre>
     *今日累计获得银币数
     * </pre>
     */
    public boolean hasDayIron() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required uint32 dayIron = 6;</code>
     *
     * <pre>
     *今日累计获得银币数
     * </pre>
     */
    public int getDayIron() {
      return dayIron_;
    }

    // required uint32 dayMaxIron = 7;
    public static final int DAYMAXIRON_FIELD_NUMBER = 7;
    private int dayMaxIron_;
    /**
     * <code>required uint32 dayMaxIron = 7;</code>
     *
     * <pre>
     *今日获得银币上限
     * </pre>
     */
    public boolean hasDayMaxIron() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required uint32 dayMaxIron = 7;</code>
     *
     * <pre>
     *今日获得银币上限
     * </pre>
     */
    public int getDayMaxIron() {
      return dayMaxIron_;
    }

    private void initFields() {
      vipMul_ = 0;
      goldTankMul_ = 0;
      activityMul_ = 0;
      tankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      honor_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      roleTankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      iron_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      dayIron_ = 0;
      dayMaxIron_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVipMul()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGoldTankMul()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasActivityMul()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTankExp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHonor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoleTankExp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIron()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDayIron()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDayMaxIron()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTankExp().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getHonor().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRoleTankExp().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getIron().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, vipMul_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, goldTankMul_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, activityMul_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(6, dayIron_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(7, dayMaxIron_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(8, tankExp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(9, honor_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(10, roleTankExp_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(11, iron_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, vipMul_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, goldTankMul_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, activityMul_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, dayIron_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, dayMaxIron_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, tankExp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, honor_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, roleTankExp_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, iron_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.WarRewardsItem}
     *
     * <pre>
     *比赛奖励Item
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItemOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        vipMul_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        goldTankMul_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        activityMul_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        tankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        honor_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        roleTankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        iron_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        dayIron_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        dayMaxIron_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem build() {
        com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem result = new com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.vipMul_ = vipMul_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.goldTankMul_ = goldTankMul_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.activityMul_ = activityMul_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tankExp_ = tankExp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.honor_ = honor_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.roleTankExp_ = roleTankExp_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.iron_ = iron_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.dayIron_ = dayIron_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.dayMaxIron_ = dayMaxIron_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance()) return this;
        if (other.hasVipMul()) {
          setVipMul(other.getVipMul());
        }
        if (other.hasGoldTankMul()) {
          setGoldTankMul(other.getGoldTankMul());
        }
        if (other.hasActivityMul()) {
          setActivityMul(other.getActivityMul());
        }
        if (other.hasTankExp()) {
          mergeTankExp(other.getTankExp());
        }
        if (other.hasHonor()) {
          mergeHonor(other.getHonor());
        }
        if (other.hasRoleTankExp()) {
          mergeRoleTankExp(other.getRoleTankExp());
        }
        if (other.hasIron()) {
          mergeIron(other.getIron());
        }
        if (other.hasDayIron()) {
          setDayIron(other.getDayIron());
        }
        if (other.hasDayMaxIron()) {
          setDayMaxIron(other.getDayMaxIron());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVipMul()) {
          
          return false;
        }
        if (!hasGoldTankMul()) {
          
          return false;
        }
        if (!hasActivityMul()) {
          
          return false;
        }
        if (!hasTankExp()) {
          
          return false;
        }
        if (!hasHonor()) {
          
          return false;
        }
        if (!hasRoleTankExp()) {
          
          return false;
        }
        if (!hasIron()) {
          
          return false;
        }
        if (!hasDayIron()) {
          
          return false;
        }
        if (!hasDayMaxIron()) {
          
          return false;
        }
        if (!getTankExp().isInitialized()) {
          
          return false;
        }
        if (!getHonor().isInitialized()) {
          
          return false;
        }
        if (!getRoleTankExp().isInitialized()) {
          
          return false;
        }
        if (!getIron().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 vipMul = 1;
      private int vipMul_ ;
      /**
       * <code>required uint32 vipMul = 1;</code>
       *
       * <pre>
       *vip等级倍数 0 表示没有
       * </pre>
       */
      public boolean hasVipMul() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 vipMul = 1;</code>
       *
       * <pre>
       *vip等级倍数 0 表示没有
       * </pre>
       */
      public int getVipMul() {
        return vipMul_;
      }
      /**
       * <code>required uint32 vipMul = 1;</code>
       *
       * <pre>
       *vip等级倍数 0 表示没有
       * </pre>
       */
      public Builder setVipMul(int value) {
        bitField0_ |= 0x00000001;
        vipMul_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 vipMul = 1;</code>
       *
       * <pre>
       *vip等级倍数 0 表示没有
       * </pre>
       */
      public Builder clearVipMul() {
        bitField0_ = (bitField0_ & ~0x00000001);
        vipMul_ = 0;
        
        return this;
      }

      // required uint32 goldTankMul = 2;
      private int goldTankMul_ ;
      /**
       * <code>required uint32 goldTankMul = 2;</code>
       *
       * <pre>
       *金币坦克加成倍数  0 表示没有
       * </pre>
       */
      public boolean hasGoldTankMul() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 goldTankMul = 2;</code>
       *
       * <pre>
       *金币坦克加成倍数  0 表示没有
       * </pre>
       */
      public int getGoldTankMul() {
        return goldTankMul_;
      }
      /**
       * <code>required uint32 goldTankMul = 2;</code>
       *
       * <pre>
       *金币坦克加成倍数  0 表示没有
       * </pre>
       */
      public Builder setGoldTankMul(int value) {
        bitField0_ |= 0x00000002;
        goldTankMul_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 goldTankMul = 2;</code>
       *
       * <pre>
       *金币坦克加成倍数  0 表示没有
       * </pre>
       */
      public Builder clearGoldTankMul() {
        bitField0_ = (bitField0_ & ~0x00000002);
        goldTankMul_ = 0;
        
        return this;
      }

      // required uint32 activityMul = 4;
      private int activityMul_ ;
      /**
       * <code>required uint32 activityMul = 4;</code>
       *
       * <pre>
       *获得加成倍数 0 表示没有
       * </pre>
       */
      public boolean hasActivityMul() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 activityMul = 4;</code>
       *
       * <pre>
       *获得加成倍数 0 表示没有
       * </pre>
       */
      public int getActivityMul() {
        return activityMul_;
      }
      /**
       * <code>required uint32 activityMul = 4;</code>
       *
       * <pre>
       *获得加成倍数 0 表示没有
       * </pre>
       */
      public Builder setActivityMul(int value) {
        bitField0_ |= 0x00000004;
        activityMul_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 activityMul = 4;</code>
       *
       * <pre>
       *获得加成倍数 0 表示没有
       * </pre>
       */
      public Builder clearActivityMul() {
        bitField0_ = (bitField0_ & ~0x00000004);
        activityMul_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.PlusItem tankExp = 8;
      private com.ourpalm.tank.message.BATTLE_MSG.PlusItem tankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
       *
       * <pre>
       *坦克经验
       * </pre>
       */
      public boolean hasTankExp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
       *
       * <pre>
       *坦克经验
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getTankExp() {
        return tankExp_;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
       *
       * <pre>
       *坦克经验
       * </pre>
       */
      public Builder setTankExp(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        tankExp_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
       *
       * <pre>
       *坦克经验
       * </pre>
       */
      public Builder setTankExp(
          com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder builderForValue) {
        tankExp_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
       *
       * <pre>
       *坦克经验
       * </pre>
       */
      public Builder mergeTankExp(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            tankExp_ != com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance()) {
          tankExp_ =
            com.ourpalm.tank.message.BATTLE_MSG.PlusItem.newBuilder(tankExp_).mergeFrom(value).buildPartial();
        } else {
          tankExp_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem tankExp = 8;</code>
       *
       * <pre>
       *坦克经验
       * </pre>
       */
      public Builder clearTankExp() {
        tankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // required .PROTO_BATTLE.PlusItem honor = 9;
      private com.ourpalm.tank.message.BATTLE_MSG.PlusItem honor_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
       *
       * <pre>
       *荣誉点
       * </pre>
       */
      public boolean hasHonor() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
       *
       * <pre>
       *荣誉点
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getHonor() {
        return honor_;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
       *
       * <pre>
       *荣誉点
       * </pre>
       */
      public Builder setHonor(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        honor_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
       *
       * <pre>
       *荣誉点
       * </pre>
       */
      public Builder setHonor(
          com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder builderForValue) {
        honor_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
       *
       * <pre>
       *荣誉点
       * </pre>
       */
      public Builder mergeHonor(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            honor_ != com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance()) {
          honor_ =
            com.ourpalm.tank.message.BATTLE_MSG.PlusItem.newBuilder(honor_).mergeFrom(value).buildPartial();
        } else {
          honor_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem honor = 9;</code>
       *
       * <pre>
       *荣誉点
       * </pre>
       */
      public Builder clearHonor() {
        honor_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // required .PROTO_BATTLE.PlusItem roleTankExp = 10;
      private com.ourpalm.tank.message.BATTLE_MSG.PlusItem roleTankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
       *
       * <pre>
       *全局坦克经验
       * </pre>
       */
      public boolean hasRoleTankExp() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
       *
       * <pre>
       *全局坦克经验
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getRoleTankExp() {
        return roleTankExp_;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
       *
       * <pre>
       *全局坦克经验
       * </pre>
       */
      public Builder setRoleTankExp(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        roleTankExp_ = value;

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
       *
       * <pre>
       *全局坦克经验
       * </pre>
       */
      public Builder setRoleTankExp(
          com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder builderForValue) {
        roleTankExp_ = builderForValue.build();

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
       *
       * <pre>
       *全局坦克经验
       * </pre>
       */
      public Builder mergeRoleTankExp(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            roleTankExp_ != com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance()) {
          roleTankExp_ =
            com.ourpalm.tank.message.BATTLE_MSG.PlusItem.newBuilder(roleTankExp_).mergeFrom(value).buildPartial();
        } else {
          roleTankExp_ = value;
        }

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem roleTankExp = 10;</code>
       *
       * <pre>
       *全局坦克经验
       * </pre>
       */
      public Builder clearRoleTankExp() {
        roleTankExp_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // required .PROTO_BATTLE.PlusItem iron = 11;
      private com.ourpalm.tank.message.BATTLE_MSG.PlusItem iron_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
       *
       * <pre>
       *银币数
       * </pre>
       */
      public boolean hasIron() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
       *
       * <pre>
       *银币数
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getIron() {
        return iron_;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
       *
       * <pre>
       *银币数
       * </pre>
       */
      public Builder setIron(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        iron_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
       *
       * <pre>
       *银币数
       * </pre>
       */
      public Builder setIron(
          com.ourpalm.tank.message.BATTLE_MSG.PlusItem.Builder builderForValue) {
        iron_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
       *
       * <pre>
       *银币数
       * </pre>
       */
      public Builder mergeIron(com.ourpalm.tank.message.BATTLE_MSG.PlusItem value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            iron_ != com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance()) {
          iron_ =
            com.ourpalm.tank.message.BATTLE_MSG.PlusItem.newBuilder(iron_).mergeFrom(value).buildPartial();
        } else {
          iron_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.PlusItem iron = 11;</code>
       *
       * <pre>
       *银币数
       * </pre>
       */
      public Builder clearIron() {
        iron_ = com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // required uint32 dayIron = 6;
      private int dayIron_ ;
      /**
       * <code>required uint32 dayIron = 6;</code>
       *
       * <pre>
       *今日累计获得银币数
       * </pre>
       */
      public boolean hasDayIron() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint32 dayIron = 6;</code>
       *
       * <pre>
       *今日累计获得银币数
       * </pre>
       */
      public int getDayIron() {
        return dayIron_;
      }
      /**
       * <code>required uint32 dayIron = 6;</code>
       *
       * <pre>
       *今日累计获得银币数
       * </pre>
       */
      public Builder setDayIron(int value) {
        bitField0_ |= 0x00000080;
        dayIron_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 dayIron = 6;</code>
       *
       * <pre>
       *今日累计获得银币数
       * </pre>
       */
      public Builder clearDayIron() {
        bitField0_ = (bitField0_ & ~0x00000080);
        dayIron_ = 0;
        
        return this;
      }

      // required uint32 dayMaxIron = 7;
      private int dayMaxIron_ ;
      /**
       * <code>required uint32 dayMaxIron = 7;</code>
       *
       * <pre>
       *今日获得银币上限
       * </pre>
       */
      public boolean hasDayMaxIron() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required uint32 dayMaxIron = 7;</code>
       *
       * <pre>
       *今日获得银币上限
       * </pre>
       */
      public int getDayMaxIron() {
        return dayMaxIron_;
      }
      /**
       * <code>required uint32 dayMaxIron = 7;</code>
       *
       * <pre>
       *今日获得银币上限
       * </pre>
       */
      public Builder setDayMaxIron(int value) {
        bitField0_ |= 0x00000100;
        dayMaxIron_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 dayMaxIron = 7;</code>
       *
       * <pre>
       *今日获得银币上限
       * </pre>
       */
      public Builder clearDayMaxIron() {
        bitField0_ = (bitField0_ & ~0x00000100);
        dayMaxIron_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.WarRewardsItem)
    }

    static {
      defaultInstance = new WarRewardsItem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.WarRewardsItem)
  }

  public interface PlusItemOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 allCount = 1;
    /**
     * <code>required uint32 allCount = 1;</code>
     *
     * <pre>
     *获得总值(为0不显示)
     * </pre>
     */
    boolean hasAllCount();
    /**
     * <code>required uint32 allCount = 1;</code>
     *
     * <pre>
     *获得总值(为0不显示)
     * </pre>
     */
    int getAllCount();

    // required uint32 vip = 2;
    /**
     * <code>required uint32 vip = 2;</code>
     *
     * <pre>
     *vip加成值
     * </pre>
     */
    boolean hasVip();
    /**
     * <code>required uint32 vip = 2;</code>
     *
     * <pre>
     *vip加成值
     * </pre>
     */
    int getVip();

    // required uint32 goldTank = 3;
    /**
     * <code>required uint32 goldTank = 3;</code>
     *
     * <pre>
     *金币坦克加成值
     * </pre>
     */
    boolean hasGoldTank();
    /**
     * <code>required uint32 goldTank = 3;</code>
     *
     * <pre>
     *金币坦克加成值
     * </pre>
     */
    int getGoldTank();

    // required uint32 activity = 4;
    /**
     * <code>required uint32 activity = 4;</code>
     *
     * <pre>
     *活动加成值
     * </pre>
     */
    boolean hasActivity();
    /**
     * <code>required uint32 activity = 4;</code>
     *
     * <pre>
     *活动加成值
     * </pre>
     */
    int getActivity();

    // required uint32 tankId = 5;
    /**
     * <code>required uint32 tankId = 5;</code>
     *
     * <pre>
     *所使用的坦克id
     * </pre>
     */
    boolean hasTankId();
    /**
     * <code>required uint32 tankId = 5;</code>
     *
     * <pre>
     *所使用的坦克id
     * </pre>
     */
    int getTankId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.PlusItem}
   *
   * <pre>
   *加成值Item
   * </pre>
   */
  public static final class PlusItem extends
      com.google.protobuf.GeneratedMessageLite
      implements PlusItemOrBuilder {
    // Use PlusItem.newBuilder() to construct.
    private PlusItem(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private PlusItem(boolean noInit) {}

    private static final PlusItem defaultInstance;
    public static PlusItem getDefaultInstance() {
      return defaultInstance;
    }

    public PlusItem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private PlusItem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              allCount_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              vip_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              goldTank_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              activity_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              tankId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PlusItem> PARSER =
        new com.google.protobuf.AbstractParser<PlusItem>() {
      public PlusItem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlusItem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlusItem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 allCount = 1;
    public static final int ALLCOUNT_FIELD_NUMBER = 1;
    private int allCount_;
    /**
     * <code>required uint32 allCount = 1;</code>
     *
     * <pre>
     *获得总值(为0不显示)
     * </pre>
     */
    public boolean hasAllCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 allCount = 1;</code>
     *
     * <pre>
     *获得总值(为0不显示)
     * </pre>
     */
    public int getAllCount() {
      return allCount_;
    }

    // required uint32 vip = 2;
    public static final int VIP_FIELD_NUMBER = 2;
    private int vip_;
    /**
     * <code>required uint32 vip = 2;</code>
     *
     * <pre>
     *vip加成值
     * </pre>
     */
    public boolean hasVip() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 vip = 2;</code>
     *
     * <pre>
     *vip加成值
     * </pre>
     */
    public int getVip() {
      return vip_;
    }

    // required uint32 goldTank = 3;
    public static final int GOLDTANK_FIELD_NUMBER = 3;
    private int goldTank_;
    /**
     * <code>required uint32 goldTank = 3;</code>
     *
     * <pre>
     *金币坦克加成值
     * </pre>
     */
    public boolean hasGoldTank() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 goldTank = 3;</code>
     *
     * <pre>
     *金币坦克加成值
     * </pre>
     */
    public int getGoldTank() {
      return goldTank_;
    }

    // required uint32 activity = 4;
    public static final int ACTIVITY_FIELD_NUMBER = 4;
    private int activity_;
    /**
     * <code>required uint32 activity = 4;</code>
     *
     * <pre>
     *活动加成值
     * </pre>
     */
    public boolean hasActivity() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 activity = 4;</code>
     *
     * <pre>
     *活动加成值
     * </pre>
     */
    public int getActivity() {
      return activity_;
    }

    // required uint32 tankId = 5;
    public static final int TANKID_FIELD_NUMBER = 5;
    private int tankId_;
    /**
     * <code>required uint32 tankId = 5;</code>
     *
     * <pre>
     *所使用的坦克id
     * </pre>
     */
    public boolean hasTankId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 tankId = 5;</code>
     *
     * <pre>
     *所使用的坦克id
     * </pre>
     */
    public int getTankId() {
      return tankId_;
    }

    private void initFields() {
      allCount_ = 0;
      vip_ = 0;
      goldTank_ = 0;
      activity_ = 0;
      tankId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasAllCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVip()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGoldTank()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasActivity()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTankId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, allCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, vip_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, goldTank_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, activity_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, tankId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, allCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, vip_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, goldTank_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, activity_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, tankId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.PlusItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.PlusItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.PlusItem}
     *
     * <pre>
     *加成值Item
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.PlusItem, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.PlusItemOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.PlusItem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        allCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        vip_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        goldTank_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        activity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        tankId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem build() {
        com.ourpalm.tank.message.BATTLE_MSG.PlusItem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.PlusItem buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.PlusItem result = new com.ourpalm.tank.message.BATTLE_MSG.PlusItem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.allCount_ = allCount_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.vip_ = vip_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.goldTank_ = goldTank_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.activity_ = activity_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.tankId_ = tankId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.PlusItem other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.PlusItem.getDefaultInstance()) return this;
        if (other.hasAllCount()) {
          setAllCount(other.getAllCount());
        }
        if (other.hasVip()) {
          setVip(other.getVip());
        }
        if (other.hasGoldTank()) {
          setGoldTank(other.getGoldTank());
        }
        if (other.hasActivity()) {
          setActivity(other.getActivity());
        }
        if (other.hasTankId()) {
          setTankId(other.getTankId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAllCount()) {
          
          return false;
        }
        if (!hasVip()) {
          
          return false;
        }
        if (!hasGoldTank()) {
          
          return false;
        }
        if (!hasActivity()) {
          
          return false;
        }
        if (!hasTankId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.PlusItem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.PlusItem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 allCount = 1;
      private int allCount_ ;
      /**
       * <code>required uint32 allCount = 1;</code>
       *
       * <pre>
       *获得总值(为0不显示)
       * </pre>
       */
      public boolean hasAllCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 allCount = 1;</code>
       *
       * <pre>
       *获得总值(为0不显示)
       * </pre>
       */
      public int getAllCount() {
        return allCount_;
      }
      /**
       * <code>required uint32 allCount = 1;</code>
       *
       * <pre>
       *获得总值(为0不显示)
       * </pre>
       */
      public Builder setAllCount(int value) {
        bitField0_ |= 0x00000001;
        allCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 allCount = 1;</code>
       *
       * <pre>
       *获得总值(为0不显示)
       * </pre>
       */
      public Builder clearAllCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        allCount_ = 0;
        
        return this;
      }

      // required uint32 vip = 2;
      private int vip_ ;
      /**
       * <code>required uint32 vip = 2;</code>
       *
       * <pre>
       *vip加成值
       * </pre>
       */
      public boolean hasVip() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 vip = 2;</code>
       *
       * <pre>
       *vip加成值
       * </pre>
       */
      public int getVip() {
        return vip_;
      }
      /**
       * <code>required uint32 vip = 2;</code>
       *
       * <pre>
       *vip加成值
       * </pre>
       */
      public Builder setVip(int value) {
        bitField0_ |= 0x00000002;
        vip_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 vip = 2;</code>
       *
       * <pre>
       *vip加成值
       * </pre>
       */
      public Builder clearVip() {
        bitField0_ = (bitField0_ & ~0x00000002);
        vip_ = 0;
        
        return this;
      }

      // required uint32 goldTank = 3;
      private int goldTank_ ;
      /**
       * <code>required uint32 goldTank = 3;</code>
       *
       * <pre>
       *金币坦克加成值
       * </pre>
       */
      public boolean hasGoldTank() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 goldTank = 3;</code>
       *
       * <pre>
       *金币坦克加成值
       * </pre>
       */
      public int getGoldTank() {
        return goldTank_;
      }
      /**
       * <code>required uint32 goldTank = 3;</code>
       *
       * <pre>
       *金币坦克加成值
       * </pre>
       */
      public Builder setGoldTank(int value) {
        bitField0_ |= 0x00000004;
        goldTank_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 goldTank = 3;</code>
       *
       * <pre>
       *金币坦克加成值
       * </pre>
       */
      public Builder clearGoldTank() {
        bitField0_ = (bitField0_ & ~0x00000004);
        goldTank_ = 0;
        
        return this;
      }

      // required uint32 activity = 4;
      private int activity_ ;
      /**
       * <code>required uint32 activity = 4;</code>
       *
       * <pre>
       *活动加成值
       * </pre>
       */
      public boolean hasActivity() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 activity = 4;</code>
       *
       * <pre>
       *活动加成值
       * </pre>
       */
      public int getActivity() {
        return activity_;
      }
      /**
       * <code>required uint32 activity = 4;</code>
       *
       * <pre>
       *活动加成值
       * </pre>
       */
      public Builder setActivity(int value) {
        bitField0_ |= 0x00000008;
        activity_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 activity = 4;</code>
       *
       * <pre>
       *活动加成值
       * </pre>
       */
      public Builder clearActivity() {
        bitField0_ = (bitField0_ & ~0x00000008);
        activity_ = 0;
        
        return this;
      }

      // required uint32 tankId = 5;
      private int tankId_ ;
      /**
       * <code>required uint32 tankId = 5;</code>
       *
       * <pre>
       *所使用的坦克id
       * </pre>
       */
      public boolean hasTankId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 tankId = 5;</code>
       *
       * <pre>
       *所使用的坦克id
       * </pre>
       */
      public int getTankId() {
        return tankId_;
      }
      /**
       * <code>required uint32 tankId = 5;</code>
       *
       * <pre>
       *所使用的坦克id
       * </pre>
       */
      public Builder setTankId(int value) {
        bitField0_ |= 0x00000010;
        tankId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 tankId = 5;</code>
       *
       * <pre>
       *所使用的坦克id
       * </pre>
       */
      public Builder clearTankId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        tankId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.PlusItem)
    }

    static {
      defaultInstance = new PlusItem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.PlusItem)
  }

  public interface WarResultItemOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 mvpRoleId = 1;
    /**
     * <code>required uint32 mvpRoleId = 1;</code>
     *
     * <pre>
     *MVP拥有者
     * </pre>
     */
    boolean hasMvpRoleId();
    /**
     * <code>required uint32 mvpRoleId = 1;</code>
     *
     * <pre>
     *MVP拥有者
     * </pre>
     */
    int getMvpRoleId();

    // required uint32 mvpCount = 2;
    /**
     * <code>required uint32 mvpCount = 2;</code>
     *
     * <pre>
     *获得mvp的累计次数
     * </pre>
     */
    boolean hasMvpCount();
    /**
     * <code>required uint32 mvpCount = 2;</code>
     *
     * <pre>
     *获得mvp的累计次数
     * </pre>
     */
    int getMvpCount();

    // required uint32 time = 3;
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *所用时间
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *所用时间
     * </pre>
     */
    int getTime();

    // required uint32 result = 4;
    /**
     * <code>required uint32 result = 4;</code>
     *
     * <pre>
     *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>required uint32 result = 4;</code>
     *
     * <pre>
     *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
     * </pre>
     */
    int getResult();

    // required uint32 blue = 5;
    /**
     * <code>required uint32 blue = 5;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    boolean hasBlue();
    /**
     * <code>required uint32 blue = 5;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    int getBlue();

    // required uint32 red = 6;
    /**
     * <code>required uint32 red = 6;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    boolean hasRed();
    /**
     * <code>required uint32 red = 6;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    int getRed();

    // required bool flagWin = 7;
    /**
     * <code>required bool flagWin = 7;</code>
     *
     * <pre>
     *是否占旗获胜
     * </pre>
     */
    boolean hasFlagWin();
    /**
     * <code>required bool flagWin = 7;</code>
     *
     * <pre>
     *是否占旗获胜
     * </pre>
     */
    boolean getFlagWin();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.WarResultItem}
   *
   * <pre>
   *比赛结束item
   * </pre>
   */
  public static final class WarResultItem extends
      com.google.protobuf.GeneratedMessageLite
      implements WarResultItemOrBuilder {
    // Use WarResultItem.newBuilder() to construct.
    private WarResultItem(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private WarResultItem(boolean noInit) {}

    private static final WarResultItem defaultInstance;
    public static WarResultItem getDefaultInstance() {
      return defaultInstance;
    }

    public WarResultItem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private WarResultItem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mvpRoleId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mvpCount_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              time_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              result_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              blue_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              red_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              flagWin_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<WarResultItem> PARSER =
        new com.google.protobuf.AbstractParser<WarResultItem>() {
      public WarResultItem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WarResultItem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WarResultItem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 mvpRoleId = 1;
    public static final int MVPROLEID_FIELD_NUMBER = 1;
    private int mvpRoleId_;
    /**
     * <code>required uint32 mvpRoleId = 1;</code>
     *
     * <pre>
     *MVP拥有者
     * </pre>
     */
    public boolean hasMvpRoleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 mvpRoleId = 1;</code>
     *
     * <pre>
     *MVP拥有者
     * </pre>
     */
    public int getMvpRoleId() {
      return mvpRoleId_;
    }

    // required uint32 mvpCount = 2;
    public static final int MVPCOUNT_FIELD_NUMBER = 2;
    private int mvpCount_;
    /**
     * <code>required uint32 mvpCount = 2;</code>
     *
     * <pre>
     *获得mvp的累计次数
     * </pre>
     */
    public boolean hasMvpCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 mvpCount = 2;</code>
     *
     * <pre>
     *获得mvp的累计次数
     * </pre>
     */
    public int getMvpCount() {
      return mvpCount_;
    }

    // required uint32 time = 3;
    public static final int TIME_FIELD_NUMBER = 3;
    private int time_;
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *所用时间
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *所用时间
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    // required uint32 result = 4;
    public static final int RESULT_FIELD_NUMBER = 4;
    private int result_;
    /**
     * <code>required uint32 result = 4;</code>
     *
     * <pre>
     *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 result = 4;</code>
     *
     * <pre>
     *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    // required uint32 blue = 5;
    public static final int BLUE_FIELD_NUMBER = 5;
    private int blue_;
    /**
     * <code>required uint32 blue = 5;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    public boolean hasBlue() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 blue = 5;</code>
     *
     * <pre>
     *蓝方击杀数
     * </pre>
     */
    public int getBlue() {
      return blue_;
    }

    // required uint32 red = 6;
    public static final int RED_FIELD_NUMBER = 6;
    private int red_;
    /**
     * <code>required uint32 red = 6;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    public boolean hasRed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 red = 6;</code>
     *
     * <pre>
     *红方击杀数 
     * </pre>
     */
    public int getRed() {
      return red_;
    }

    // required bool flagWin = 7;
    public static final int FLAGWIN_FIELD_NUMBER = 7;
    private boolean flagWin_;
    /**
     * <code>required bool flagWin = 7;</code>
     *
     * <pre>
     *是否占旗获胜
     * </pre>
     */
    public boolean hasFlagWin() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool flagWin = 7;</code>
     *
     * <pre>
     *是否占旗获胜
     * </pre>
     */
    public boolean getFlagWin() {
      return flagWin_;
    }

    private void initFields() {
      mvpRoleId_ = 0;
      mvpCount_ = 0;
      time_ = 0;
      result_ = 0;
      blue_ = 0;
      red_ = 0;
      flagWin_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMvpRoleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMvpCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFlagWin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, mvpRoleId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, mvpCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, time_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, result_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, blue_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, red_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, flagWin_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, mvpRoleId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mvpCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, time_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, result_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, blue_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, red_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, flagWin_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.WarResultItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.WarResultItem}
     *
     * <pre>
     *比赛结束item
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.WarResultItem, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.WarResultItemOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mvpRoleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mvpCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        blue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        red_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        flagWin_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarResultItem getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarResultItem build() {
        com.ourpalm.tank.message.BATTLE_MSG.WarResultItem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarResultItem buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.WarResultItem result = new com.ourpalm.tank.message.BATTLE_MSG.WarResultItem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mvpRoleId_ = mvpRoleId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mvpCount_ = mvpCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.blue_ = blue_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.red_ = red_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.flagWin_ = flagWin_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.WarResultItem other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance()) return this;
        if (other.hasMvpRoleId()) {
          setMvpRoleId(other.getMvpRoleId());
        }
        if (other.hasMvpCount()) {
          setMvpCount(other.getMvpCount());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasBlue()) {
          setBlue(other.getBlue());
        }
        if (other.hasRed()) {
          setRed(other.getRed());
        }
        if (other.hasFlagWin()) {
          setFlagWin(other.getFlagWin());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMvpRoleId()) {
          
          return false;
        }
        if (!hasMvpCount()) {
          
          return false;
        }
        if (!hasTime()) {
          
          return false;
        }
        if (!hasResult()) {
          
          return false;
        }
        if (!hasBlue()) {
          
          return false;
        }
        if (!hasRed()) {
          
          return false;
        }
        if (!hasFlagWin()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.WarResultItem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.WarResultItem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 mvpRoleId = 1;
      private int mvpRoleId_ ;
      /**
       * <code>required uint32 mvpRoleId = 1;</code>
       *
       * <pre>
       *MVP拥有者
       * </pre>
       */
      public boolean hasMvpRoleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 mvpRoleId = 1;</code>
       *
       * <pre>
       *MVP拥有者
       * </pre>
       */
      public int getMvpRoleId() {
        return mvpRoleId_;
      }
      /**
       * <code>required uint32 mvpRoleId = 1;</code>
       *
       * <pre>
       *MVP拥有者
       * </pre>
       */
      public Builder setMvpRoleId(int value) {
        bitField0_ |= 0x00000001;
        mvpRoleId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 mvpRoleId = 1;</code>
       *
       * <pre>
       *MVP拥有者
       * </pre>
       */
      public Builder clearMvpRoleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mvpRoleId_ = 0;
        
        return this;
      }

      // required uint32 mvpCount = 2;
      private int mvpCount_ ;
      /**
       * <code>required uint32 mvpCount = 2;</code>
       *
       * <pre>
       *获得mvp的累计次数
       * </pre>
       */
      public boolean hasMvpCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 mvpCount = 2;</code>
       *
       * <pre>
       *获得mvp的累计次数
       * </pre>
       */
      public int getMvpCount() {
        return mvpCount_;
      }
      /**
       * <code>required uint32 mvpCount = 2;</code>
       *
       * <pre>
       *获得mvp的累计次数
       * </pre>
       */
      public Builder setMvpCount(int value) {
        bitField0_ |= 0x00000002;
        mvpCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 mvpCount = 2;</code>
       *
       * <pre>
       *获得mvp的累计次数
       * </pre>
       */
      public Builder clearMvpCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mvpCount_ = 0;
        
        return this;
      }

      // required uint32 time = 3;
      private int time_ ;
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *所用时间
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *所用时间
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *所用时间
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000004;
        time_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *所用时间
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        time_ = 0;
        
        return this;
      }

      // required uint32 result = 4;
      private int result_ ;
      /**
       * <code>required uint32 result = 4;</code>
       *
       * <pre>
       *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 result = 4;</code>
       *
       * <pre>
       *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>required uint32 result = 4;</code>
       *
       * <pre>
       *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000008;
        result_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 result = 4;</code>
       *
       * <pre>
       *比赛结果 0：没结果  1：红方获胜 2：蓝方获胜
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000008);
        result_ = 0;
        
        return this;
      }

      // required uint32 blue = 5;
      private int blue_ ;
      /**
       * <code>required uint32 blue = 5;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public boolean hasBlue() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 blue = 5;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public int getBlue() {
        return blue_;
      }
      /**
       * <code>required uint32 blue = 5;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public Builder setBlue(int value) {
        bitField0_ |= 0x00000010;
        blue_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 blue = 5;</code>
       *
       * <pre>
       *蓝方击杀数
       * </pre>
       */
      public Builder clearBlue() {
        bitField0_ = (bitField0_ & ~0x00000010);
        blue_ = 0;
        
        return this;
      }

      // required uint32 red = 6;
      private int red_ ;
      /**
       * <code>required uint32 red = 6;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public boolean hasRed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 red = 6;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public int getRed() {
        return red_;
      }
      /**
       * <code>required uint32 red = 6;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public Builder setRed(int value) {
        bitField0_ |= 0x00000020;
        red_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 red = 6;</code>
       *
       * <pre>
       *红方击杀数 
       * </pre>
       */
      public Builder clearRed() {
        bitField0_ = (bitField0_ & ~0x00000020);
        red_ = 0;
        
        return this;
      }

      // required bool flagWin = 7;
      private boolean flagWin_ ;
      /**
       * <code>required bool flagWin = 7;</code>
       *
       * <pre>
       *是否占旗获胜
       * </pre>
       */
      public boolean hasFlagWin() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool flagWin = 7;</code>
       *
       * <pre>
       *是否占旗获胜
       * </pre>
       */
      public boolean getFlagWin() {
        return flagWin_;
      }
      /**
       * <code>required bool flagWin = 7;</code>
       *
       * <pre>
       *是否占旗获胜
       * </pre>
       */
      public Builder setFlagWin(boolean value) {
        bitField0_ |= 0x00000040;
        flagWin_ = value;
        
        return this;
      }
      /**
       * <code>required bool flagWin = 7;</code>
       *
       * <pre>
       *是否占旗获胜
       * </pre>
       */
      public Builder clearFlagWin() {
        bitField0_ = (bitField0_ & ~0x00000040);
        flagWin_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.WarResultItem)
    }

    static {
      defaultInstance = new WarResultItem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.WarResultItem)
  }

  public interface STC_WAR_REPORT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // repeated .PROTO_BATTLE.WarReportItem reports = 1;
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    java.util.List<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem> 
        getReportsList();
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.WarReportItem getReports(int index);
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    int getReportsCount();

    // required .PROTO_BATTLE.WarResultItem result = 2;
    /**
     * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
     *
     * <pre>
     *比赛结果
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
     *
     * <pre>
     *比赛结果
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.WarResultItem getResult();

    // optional .PROTO_BATTLE.WarRewardsItem rewards = 3;
    /**
     * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
     *
     * <pre>
     *战斗奖励
     * </pre>
     */
    boolean hasRewards();
    /**
     * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
     *
     * <pre>
     *战斗奖励
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem getRewards();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_WAR_REPORT_MSG}
   *
   * <pre>
   *战报信息
   * </pre>
   */
  public static final class STC_WAR_REPORT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_WAR_REPORT_MSGOrBuilder {
    // Use STC_WAR_REPORT_MSG.newBuilder() to construct.
    private STC_WAR_REPORT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_WAR_REPORT_MSG(boolean noInit) {}

    private static final STC_WAR_REPORT_MSG defaultInstance;
    public static STC_WAR_REPORT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_WAR_REPORT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_WAR_REPORT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                reports_ = new java.util.ArrayList<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem>();
                mutable_bitField0_ |= 0x00000001;
              }
              reports_.add(input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = result_.toBuilder();
              }
              result_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(result_);
                result_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 26: {
              com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = rewards_.toBuilder();
              }
              rewards_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rewards_);
                rewards_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          reports_ = java.util.Collections.unmodifiableList(reports_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_WAR_REPORT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_WAR_REPORT_MSG>() {
      public STC_WAR_REPORT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_WAR_REPORT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_WAR_REPORT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .PROTO_BATTLE.WarReportItem reports = 1;
    public static final int REPORTS_FIELD_NUMBER = 1;
    private java.util.List<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem> reports_;
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    public java.util.List<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem> getReportsList() {
      return reports_;
    }
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    public java.util.List<? extends com.ourpalm.tank.message.BATTLE_MSG.WarReportItemOrBuilder> 
        getReportsOrBuilderList() {
      return reports_;
    }
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    public int getReportsCount() {
      return reports_.size();
    }
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.WarReportItem getReports(int index) {
      return reports_.get(index);
    }
    /**
     * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
     *
     * <pre>
     *战报信息
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.WarReportItemOrBuilder getReportsOrBuilder(
        int index) {
      return reports_.get(index);
    }

    // required .PROTO_BATTLE.WarResultItem result = 2;
    public static final int RESULT_FIELD_NUMBER = 2;
    private com.ourpalm.tank.message.BATTLE_MSG.WarResultItem result_;
    /**
     * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
     *
     * <pre>
     *比赛结果
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
     *
     * <pre>
     *比赛结果
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.WarResultItem getResult() {
      return result_;
    }

    // optional .PROTO_BATTLE.WarRewardsItem rewards = 3;
    public static final int REWARDS_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem rewards_;
    /**
     * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
     *
     * <pre>
     *战斗奖励
     * </pre>
     */
    public boolean hasRewards() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
     *
     * <pre>
     *战斗奖励
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem getRewards() {
      return rewards_;
    }

    private void initFields() {
      reports_ = java.util.Collections.emptyList();
      result_ = com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance();
      rewards_ = com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getReportsCount(); i++) {
        if (!getReports(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!getResult().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRewards()) {
        if (!getRewards().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < reports_.size(); i++) {
        output.writeMessage(1, reports_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, result_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, rewards_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < reports_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, reports_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, result_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, rewards_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_WAR_REPORT_MSG}
     *
     * <pre>
     *战报信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        reports_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        rewards_ = com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          reports_ = java.util.Collections.unmodifiableList(reports_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.reports_ = reports_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rewards_ = rewards_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG.getDefaultInstance()) return this;
        if (!other.reports_.isEmpty()) {
          if (reports_.isEmpty()) {
            reports_ = other.reports_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureReportsIsMutable();
            reports_.addAll(other.reports_);
          }
          
        }
        if (other.hasResult()) {
          mergeResult(other.getResult());
        }
        if (other.hasRewards()) {
          mergeRewards(other.getRewards());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        for (int i = 0; i < getReportsCount(); i++) {
          if (!getReports(i).isInitialized()) {
            
            return false;
          }
        }
        if (!getResult().isInitialized()) {
          
          return false;
        }
        if (hasRewards()) {
          if (!getRewards().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_WAR_REPORT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .PROTO_BATTLE.WarReportItem reports = 1;
      private java.util.List<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem> reports_ =
        java.util.Collections.emptyList();
      private void ensureReportsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          reports_ = new java.util.ArrayList<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem>(reports_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public java.util.List<com.ourpalm.tank.message.BATTLE_MSG.WarReportItem> getReportsList() {
        return java.util.Collections.unmodifiableList(reports_);
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public int getReportsCount() {
        return reports_.size();
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.WarReportItem getReports(int index) {
        return reports_.get(index);
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder setReports(
          int index, com.ourpalm.tank.message.BATTLE_MSG.WarReportItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReportsIsMutable();
        reports_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder setReports(
          int index, com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.Builder builderForValue) {
        ensureReportsIsMutable();
        reports_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder addReports(com.ourpalm.tank.message.BATTLE_MSG.WarReportItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReportsIsMutable();
        reports_.add(value);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder addReports(
          int index, com.ourpalm.tank.message.BATTLE_MSG.WarReportItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReportsIsMutable();
        reports_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder addReports(
          com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.Builder builderForValue) {
        ensureReportsIsMutable();
        reports_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder addReports(
          int index, com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.Builder builderForValue) {
        ensureReportsIsMutable();
        reports_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder addAllReports(
          java.lang.Iterable<? extends com.ourpalm.tank.message.BATTLE_MSG.WarReportItem> values) {
        ensureReportsIsMutable();
        super.addAll(values, reports_);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder clearReports() {
        reports_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .PROTO_BATTLE.WarReportItem reports = 1;</code>
       *
       * <pre>
       *战报信息
       * </pre>
       */
      public Builder removeReports(int index) {
        ensureReportsIsMutable();
        reports_.remove(index);

        return this;
      }

      // required .PROTO_BATTLE.WarResultItem result = 2;
      private com.ourpalm.tank.message.BATTLE_MSG.WarResultItem result_ = com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
       *
       * <pre>
       *比赛结果
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
       *
       * <pre>
       *比赛结果
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.WarResultItem getResult() {
        return result_;
      }
      /**
       * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
       *
       * <pre>
       *比赛结果
       * </pre>
       */
      public Builder setResult(com.ourpalm.tank.message.BATTLE_MSG.WarResultItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
       *
       * <pre>
       *比赛结果
       * </pre>
       */
      public Builder setResult(
          com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.Builder builderForValue) {
        result_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
       *
       * <pre>
       *比赛结果
       * </pre>
       */
      public Builder mergeResult(com.ourpalm.tank.message.BATTLE_MSG.WarResultItem value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            result_ != com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance()) {
          result_ =
            com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.newBuilder(result_).mergeFrom(value).buildPartial();
        } else {
          result_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.WarResultItem result = 2;</code>
       *
       * <pre>
       *比赛结果
       * </pre>
       */
      public Builder clearResult() {
        result_ = com.ourpalm.tank.message.BATTLE_MSG.WarResultItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional .PROTO_BATTLE.WarRewardsItem rewards = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem rewards_ = com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance();
      /**
       * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
       *
       * <pre>
       *战斗奖励
       * </pre>
       */
      public boolean hasRewards() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
       *
       * <pre>
       *战斗奖励
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem getRewards() {
        return rewards_;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
       *
       * <pre>
       *战斗奖励
       * </pre>
       */
      public Builder setRewards(com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        rewards_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
       *
       * <pre>
       *战斗奖励
       * </pre>
       */
      public Builder setRewards(
          com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.Builder builderForValue) {
        rewards_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
       *
       * <pre>
       *战斗奖励
       * </pre>
       */
      public Builder mergeRewards(com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            rewards_ != com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance()) {
          rewards_ =
            com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.newBuilder(rewards_).mergeFrom(value).buildPartial();
        } else {
          rewards_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarRewardsItem rewards = 3;</code>
       *
       * <pre>
       *战斗奖励
       * </pre>
       */
      public Builder clearRewards() {
        rewards_ = com.ourpalm.tank.message.BATTLE_MSG.WarRewardsItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_WAR_REPORT_MSG)
    }

    static {
      defaultInstance = new STC_WAR_REPORT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_WAR_REPORT_MSG)
  }

  public interface WarReportItemOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required uint32 tankId = 2;
    /**
     * <code>required uint32 tankId = 2;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    boolean hasTankId();
    /**
     * <code>required uint32 tankId = 2;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    int getTankId();

    // required uint32 elite = 3;
    /**
     * <code>required uint32 elite = 3;</code>
     *
     * <pre>
     *是否为精英坦克(0:不是 1:是)
     * </pre>
     */
    boolean hasElite();
    /**
     * <code>required uint32 elite = 3;</code>
     *
     * <pre>
     *是否为精英坦克(0:不是 1:是)
     * </pre>
     */
    int getElite();

    // required string roleName = 4;
    /**
     * <code>required string roleName = 4;</code>
     *
     * <pre>
     *角色名称
     * </pre>
     */
    boolean hasRoleName();
    /**
     * <code>required string roleName = 4;</code>
     *
     * <pre>
     *角色名称
     * </pre>
     */
    java.lang.String getRoleName();
    /**
     * <code>required string roleName = 4;</code>
     *
     * <pre>
     *角色名称
     * </pre>
     */
    com.google.protobuf.ByteString
        getRoleNameBytes();

    // required uint32 team = 5;
    /**
     * <code>required uint32 team = 5;</code>
     *
     * <pre>
     * 1：红  2：蓝
     * </pre>
     */
    boolean hasTeam();
    /**
     * <code>required uint32 team = 5;</code>
     *
     * <pre>
     * 1：红  2：蓝
     * </pre>
     */
    int getTeam();

    // required uint32 kill = 6;
    /**
     * <code>required uint32 kill = 6;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    boolean hasKill();
    /**
     * <code>required uint32 kill = 6;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    int getKill();

    // required uint32 death = 7;
    /**
     * <code>required uint32 death = 7;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    boolean hasDeath();
    /**
     * <code>required uint32 death = 7;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    int getDeath();

    // required uint32 helpKill = 8;
    /**
     * <code>required uint32 helpKill = 8;</code>
     *
     * <pre>
     *助攻数
     * </pre>
     */
    boolean hasHelpKill();
    /**
     * <code>required uint32 helpKill = 8;</code>
     *
     * <pre>
     *助攻数
     * </pre>
     */
    int getHelpKill();

    // required uint32 aidKill = 9;
    /**
     * <code>required uint32 aidKill = 9;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    boolean hasAidKill();
    /**
     * <code>required uint32 aidKill = 9;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    int getAidKill();

    // required uint32 mvpFlag = 10;
    /**
     * <code>required uint32 mvpFlag = 10;</code>
     *
     * <pre>
     *mvp标识(1: mvp)
     * </pre>
     */
    boolean hasMvpFlag();
    /**
     * <code>required uint32 mvpFlag = 10;</code>
     *
     * <pre>
     *mvp标识(1: mvp)
     * </pre>
     */
    int getMvpFlag();

    // required float mvpScore = 11;
    /**
     * <code>required float mvpScore = 11;</code>
     *
     * <pre>
     *mvp得分
     * </pre>
     */
    boolean hasMvpScore();
    /**
     * <code>required float mvpScore = 11;</code>
     *
     * <pre>
     *mvp得分
     * </pre>
     */
    float getMvpScore();

    // required uint32 level = 12;
    /**
     * <code>required uint32 level = 12;</code>
     *
     * <pre>
     *玩家等级
     * </pre>
     */
    boolean hasLevel();
    /**
     * <code>required uint32 level = 12;</code>
     *
     * <pre>
     *玩家等级
     * </pre>
     */
    int getLevel();

    // required uint32 titleId = 13;
    /**
     * <code>required uint32 titleId = 13;</code>
     *
     * <pre>
     *军衔
     * </pre>
     */
    boolean hasTitleId();
    /**
     * <code>required uint32 titleId = 13;</code>
     *
     * <pre>
     *军衔
     * </pre>
     */
    int getTitleId();

    // required uint32 battleScore = 14;
    /**
     * <code>required uint32 battleScore = 14;</code>
     *
     * <pre>
     *战斗力
     * </pre>
     */
    boolean hasBattleScore();
    /**
     * <code>required uint32 battleScore = 14;</code>
     *
     * <pre>
     *战斗力
     * </pre>
     */
    int getBattleScore();

    // required uint32 roleId = 15;
    /**
     * <code>required uint32 roleId = 15;</code>
     *
     * <pre>
     *角色ID
     * </pre>
     */
    boolean hasRoleId();
    /**
     * <code>required uint32 roleId = 15;</code>
     *
     * <pre>
     *角色ID
     * </pre>
     */
    int getRoleId();

    // optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;
    /**
     * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
     *
     * <pre>
     *统计数据
     * </pre>
     */
    boolean hasStatisItem();
    /**
     * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
     *
     * <pre>
     *统计数据
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem getStatisItem();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.WarReportItem}
   */
  public static final class WarReportItem extends
      com.google.protobuf.GeneratedMessageLite
      implements WarReportItemOrBuilder {
    // Use WarReportItem.newBuilder() to construct.
    private WarReportItem(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private WarReportItem(boolean noInit) {}

    private static final WarReportItem defaultInstance;
    public static WarReportItem getDefaultInstance() {
      return defaultInstance;
    }

    public WarReportItem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private WarReportItem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tankId_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              elite_ = input.readUInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              roleName_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              team_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              kill_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              death_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              helpKill_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              aidKill_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              mvpFlag_ = input.readUInt32();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              mvpScore_ = input.readFloat();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              level_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              titleId_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              battleScore_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              roleId_ = input.readUInt32();
              break;
            }
            case 130: {
              com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = statisItem_.toBuilder();
              }
              statisItem_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(statisItem_);
                statisItem_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<WarReportItem> PARSER =
        new com.google.protobuf.AbstractParser<WarReportItem>() {
      public WarReportItem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WarReportItem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WarReportItem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 tankId = 2;
    public static final int TANKID_FIELD_NUMBER = 2;
    private int tankId_;
    /**
     * <code>required uint32 tankId = 2;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    public boolean hasTankId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 tankId = 2;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    public int getTankId() {
      return tankId_;
    }

    // required uint32 elite = 3;
    public static final int ELITE_FIELD_NUMBER = 3;
    private int elite_;
    /**
     * <code>required uint32 elite = 3;</code>
     *
     * <pre>
     *是否为精英坦克(0:不是 1:是)
     * </pre>
     */
    public boolean hasElite() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 elite = 3;</code>
     *
     * <pre>
     *是否为精英坦克(0:不是 1:是)
     * </pre>
     */
    public int getElite() {
      return elite_;
    }

    // required string roleName = 4;
    public static final int ROLENAME_FIELD_NUMBER = 4;
    private java.lang.Object roleName_;
    /**
     * <code>required string roleName = 4;</code>
     *
     * <pre>
     *角色名称
     * </pre>
     */
    public boolean hasRoleName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string roleName = 4;</code>
     *
     * <pre>
     *角色名称
     * </pre>
     */
    public java.lang.String getRoleName() {
      java.lang.Object ref = roleName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          roleName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string roleName = 4;</code>
     *
     * <pre>
     *角色名称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getRoleNameBytes() {
      java.lang.Object ref = roleName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        roleName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint32 team = 5;
    public static final int TEAM_FIELD_NUMBER = 5;
    private int team_;
    /**
     * <code>required uint32 team = 5;</code>
     *
     * <pre>
     * 1：红  2：蓝
     * </pre>
     */
    public boolean hasTeam() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 team = 5;</code>
     *
     * <pre>
     * 1：红  2：蓝
     * </pre>
     */
    public int getTeam() {
      return team_;
    }

    // required uint32 kill = 6;
    public static final int KILL_FIELD_NUMBER = 6;
    private int kill_;
    /**
     * <code>required uint32 kill = 6;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    public boolean hasKill() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 kill = 6;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    public int getKill() {
      return kill_;
    }

    // required uint32 death = 7;
    public static final int DEATH_FIELD_NUMBER = 7;
    private int death_;
    /**
     * <code>required uint32 death = 7;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    public boolean hasDeath() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint32 death = 7;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    public int getDeath() {
      return death_;
    }

    // required uint32 helpKill = 8;
    public static final int HELPKILL_FIELD_NUMBER = 8;
    private int helpKill_;
    /**
     * <code>required uint32 helpKill = 8;</code>
     *
     * <pre>
     *助攻数
     * </pre>
     */
    public boolean hasHelpKill() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required uint32 helpKill = 8;</code>
     *
     * <pre>
     *助攻数
     * </pre>
     */
    public int getHelpKill() {
      return helpKill_;
    }

    // required uint32 aidKill = 9;
    public static final int AIDKILL_FIELD_NUMBER = 9;
    private int aidKill_;
    /**
     * <code>required uint32 aidKill = 9;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    public boolean hasAidKill() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required uint32 aidKill = 9;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    public int getAidKill() {
      return aidKill_;
    }

    // required uint32 mvpFlag = 10;
    public static final int MVPFLAG_FIELD_NUMBER = 10;
    private int mvpFlag_;
    /**
     * <code>required uint32 mvpFlag = 10;</code>
     *
     * <pre>
     *mvp标识(1: mvp)
     * </pre>
     */
    public boolean hasMvpFlag() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required uint32 mvpFlag = 10;</code>
     *
     * <pre>
     *mvp标识(1: mvp)
     * </pre>
     */
    public int getMvpFlag() {
      return mvpFlag_;
    }

    // required float mvpScore = 11;
    public static final int MVPSCORE_FIELD_NUMBER = 11;
    private float mvpScore_;
    /**
     * <code>required float mvpScore = 11;</code>
     *
     * <pre>
     *mvp得分
     * </pre>
     */
    public boolean hasMvpScore() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required float mvpScore = 11;</code>
     *
     * <pre>
     *mvp得分
     * </pre>
     */
    public float getMvpScore() {
      return mvpScore_;
    }

    // required uint32 level = 12;
    public static final int LEVEL_FIELD_NUMBER = 12;
    private int level_;
    /**
     * <code>required uint32 level = 12;</code>
     *
     * <pre>
     *玩家等级
     * </pre>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required uint32 level = 12;</code>
     *
     * <pre>
     *玩家等级
     * </pre>
     */
    public int getLevel() {
      return level_;
    }

    // required uint32 titleId = 13;
    public static final int TITLEID_FIELD_NUMBER = 13;
    private int titleId_;
    /**
     * <code>required uint32 titleId = 13;</code>
     *
     * <pre>
     *军衔
     * </pre>
     */
    public boolean hasTitleId() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required uint32 titleId = 13;</code>
     *
     * <pre>
     *军衔
     * </pre>
     */
    public int getTitleId() {
      return titleId_;
    }

    // required uint32 battleScore = 14;
    public static final int BATTLESCORE_FIELD_NUMBER = 14;
    private int battleScore_;
    /**
     * <code>required uint32 battleScore = 14;</code>
     *
     * <pre>
     *战斗力
     * </pre>
     */
    public boolean hasBattleScore() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required uint32 battleScore = 14;</code>
     *
     * <pre>
     *战斗力
     * </pre>
     */
    public int getBattleScore() {
      return battleScore_;
    }

    // required uint32 roleId = 15;
    public static final int ROLEID_FIELD_NUMBER = 15;
    private int roleId_;
    /**
     * <code>required uint32 roleId = 15;</code>
     *
     * <pre>
     *角色ID
     * </pre>
     */
    public boolean hasRoleId() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required uint32 roleId = 15;</code>
     *
     * <pre>
     *角色ID
     * </pre>
     */
    public int getRoleId() {
      return roleId_;
    }

    // optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;
    public static final int STATISITEM_FIELD_NUMBER = 16;
    private com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem statisItem_;
    /**
     * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
     *
     * <pre>
     *统计数据
     * </pre>
     */
    public boolean hasStatisItem() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
     *
     * <pre>
     *统计数据
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem getStatisItem() {
      return statisItem_;
    }

    private void initFields() {
      id_ = 0;
      tankId_ = 0;
      elite_ = 0;
      roleName_ = "";
      team_ = 0;
      kill_ = 0;
      death_ = 0;
      helpKill_ = 0;
      aidKill_ = 0;
      mvpFlag_ = 0;
      mvpScore_ = 0F;
      level_ = 0;
      titleId_ = 0;
      battleScore_ = 0;
      roleId_ = 0;
      statisItem_ = com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTankId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasElite()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoleName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTeam()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDeath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHelpKill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAidKill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMvpFlag()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMvpScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLevel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTitleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBattleScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasStatisItem()) {
        if (!getStatisItem().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, tankId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, elite_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getRoleNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, team_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, kill_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, death_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, helpKill_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, aidKill_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, mvpFlag_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, mvpScore_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, level_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, titleId_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, battleScore_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, roleId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, statisItem_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, tankId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, elite_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getRoleNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, team_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, kill_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, death_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, helpKill_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, aidKill_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, mvpFlag_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, mvpScore_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, level_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, titleId_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, battleScore_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, roleId_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, statisItem_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.WarReportItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.WarReportItem}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.WarReportItem, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.WarReportItemOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        tankId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        elite_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        roleName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        team_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        kill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        death_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        helpKill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        aidKill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        mvpFlag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        mvpScore_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        level_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        titleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        battleScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        roleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        statisItem_ = com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarReportItem getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarReportItem build() {
        com.ourpalm.tank.message.BATTLE_MSG.WarReportItem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarReportItem buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.WarReportItem result = new com.ourpalm.tank.message.BATTLE_MSG.WarReportItem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tankId_ = tankId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.elite_ = elite_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.roleName_ = roleName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.team_ = team_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.kill_ = kill_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.death_ = death_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.helpKill_ = helpKill_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.aidKill_ = aidKill_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mvpFlag_ = mvpFlag_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mvpScore_ = mvpScore_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.level_ = level_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.titleId_ = titleId_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.battleScore_ = battleScore_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.roleId_ = roleId_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.statisItem_ = statisItem_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.WarReportItem other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.WarReportItem.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasTankId()) {
          setTankId(other.getTankId());
        }
        if (other.hasElite()) {
          setElite(other.getElite());
        }
        if (other.hasRoleName()) {
          bitField0_ |= 0x00000008;
          roleName_ = other.roleName_;
          
        }
        if (other.hasTeam()) {
          setTeam(other.getTeam());
        }
        if (other.hasKill()) {
          setKill(other.getKill());
        }
        if (other.hasDeath()) {
          setDeath(other.getDeath());
        }
        if (other.hasHelpKill()) {
          setHelpKill(other.getHelpKill());
        }
        if (other.hasAidKill()) {
          setAidKill(other.getAidKill());
        }
        if (other.hasMvpFlag()) {
          setMvpFlag(other.getMvpFlag());
        }
        if (other.hasMvpScore()) {
          setMvpScore(other.getMvpScore());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasTitleId()) {
          setTitleId(other.getTitleId());
        }
        if (other.hasBattleScore()) {
          setBattleScore(other.getBattleScore());
        }
        if (other.hasRoleId()) {
          setRoleId(other.getRoleId());
        }
        if (other.hasStatisItem()) {
          mergeStatisItem(other.getStatisItem());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasTankId()) {
          
          return false;
        }
        if (!hasElite()) {
          
          return false;
        }
        if (!hasRoleName()) {
          
          return false;
        }
        if (!hasTeam()) {
          
          return false;
        }
        if (!hasKill()) {
          
          return false;
        }
        if (!hasDeath()) {
          
          return false;
        }
        if (!hasHelpKill()) {
          
          return false;
        }
        if (!hasAidKill()) {
          
          return false;
        }
        if (!hasMvpFlag()) {
          
          return false;
        }
        if (!hasMvpScore()) {
          
          return false;
        }
        if (!hasLevel()) {
          
          return false;
        }
        if (!hasTitleId()) {
          
          return false;
        }
        if (!hasBattleScore()) {
          
          return false;
        }
        if (!hasRoleId()) {
          
          return false;
        }
        if (hasStatisItem()) {
          if (!getStatisItem().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.WarReportItem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.WarReportItem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 tankId = 2;
      private int tankId_ ;
      /**
       * <code>required uint32 tankId = 2;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public boolean hasTankId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 tankId = 2;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public int getTankId() {
        return tankId_;
      }
      /**
       * <code>required uint32 tankId = 2;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public Builder setTankId(int value) {
        bitField0_ |= 0x00000002;
        tankId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 tankId = 2;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public Builder clearTankId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tankId_ = 0;
        
        return this;
      }

      // required uint32 elite = 3;
      private int elite_ ;
      /**
       * <code>required uint32 elite = 3;</code>
       *
       * <pre>
       *是否为精英坦克(0:不是 1:是)
       * </pre>
       */
      public boolean hasElite() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 elite = 3;</code>
       *
       * <pre>
       *是否为精英坦克(0:不是 1:是)
       * </pre>
       */
      public int getElite() {
        return elite_;
      }
      /**
       * <code>required uint32 elite = 3;</code>
       *
       * <pre>
       *是否为精英坦克(0:不是 1:是)
       * </pre>
       */
      public Builder setElite(int value) {
        bitField0_ |= 0x00000004;
        elite_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 elite = 3;</code>
       *
       * <pre>
       *是否为精英坦克(0:不是 1:是)
       * </pre>
       */
      public Builder clearElite() {
        bitField0_ = (bitField0_ & ~0x00000004);
        elite_ = 0;
        
        return this;
      }

      // required string roleName = 4;
      private java.lang.Object roleName_ = "";
      /**
       * <code>required string roleName = 4;</code>
       *
       * <pre>
       *角色名称
       * </pre>
       */
      public boolean hasRoleName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string roleName = 4;</code>
       *
       * <pre>
       *角色名称
       * </pre>
       */
      public java.lang.String getRoleName() {
        java.lang.Object ref = roleName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          roleName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string roleName = 4;</code>
       *
       * <pre>
       *角色名称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRoleNameBytes() {
        java.lang.Object ref = roleName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          roleName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string roleName = 4;</code>
       *
       * <pre>
       *角色名称
       * </pre>
       */
      public Builder setRoleName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        roleName_ = value;
        
        return this;
      }
      /**
       * <code>required string roleName = 4;</code>
       *
       * <pre>
       *角色名称
       * </pre>
       */
      public Builder clearRoleName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        roleName_ = getDefaultInstance().getRoleName();
        
        return this;
      }
      /**
       * <code>required string roleName = 4;</code>
       *
       * <pre>
       *角色名称
       * </pre>
       */
      public Builder setRoleNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        roleName_ = value;
        
        return this;
      }

      // required uint32 team = 5;
      private int team_ ;
      /**
       * <code>required uint32 team = 5;</code>
       *
       * <pre>
       * 1：红  2：蓝
       * </pre>
       */
      public boolean hasTeam() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 team = 5;</code>
       *
       * <pre>
       * 1：红  2：蓝
       * </pre>
       */
      public int getTeam() {
        return team_;
      }
      /**
       * <code>required uint32 team = 5;</code>
       *
       * <pre>
       * 1：红  2：蓝
       * </pre>
       */
      public Builder setTeam(int value) {
        bitField0_ |= 0x00000010;
        team_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 team = 5;</code>
       *
       * <pre>
       * 1：红  2：蓝
       * </pre>
       */
      public Builder clearTeam() {
        bitField0_ = (bitField0_ & ~0x00000010);
        team_ = 0;
        
        return this;
      }

      // required uint32 kill = 6;
      private int kill_ ;
      /**
       * <code>required uint32 kill = 6;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public boolean hasKill() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 kill = 6;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public int getKill() {
        return kill_;
      }
      /**
       * <code>required uint32 kill = 6;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public Builder setKill(int value) {
        bitField0_ |= 0x00000020;
        kill_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 kill = 6;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public Builder clearKill() {
        bitField0_ = (bitField0_ & ~0x00000020);
        kill_ = 0;
        
        return this;
      }

      // required uint32 death = 7;
      private int death_ ;
      /**
       * <code>required uint32 death = 7;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public boolean hasDeath() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 death = 7;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public int getDeath() {
        return death_;
      }
      /**
       * <code>required uint32 death = 7;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public Builder setDeath(int value) {
        bitField0_ |= 0x00000040;
        death_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 death = 7;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public Builder clearDeath() {
        bitField0_ = (bitField0_ & ~0x00000040);
        death_ = 0;
        
        return this;
      }

      // required uint32 helpKill = 8;
      private int helpKill_ ;
      /**
       * <code>required uint32 helpKill = 8;</code>
       *
       * <pre>
       *助攻数
       * </pre>
       */
      public boolean hasHelpKill() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint32 helpKill = 8;</code>
       *
       * <pre>
       *助攻数
       * </pre>
       */
      public int getHelpKill() {
        return helpKill_;
      }
      /**
       * <code>required uint32 helpKill = 8;</code>
       *
       * <pre>
       *助攻数
       * </pre>
       */
      public Builder setHelpKill(int value) {
        bitField0_ |= 0x00000080;
        helpKill_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 helpKill = 8;</code>
       *
       * <pre>
       *助攻数
       * </pre>
       */
      public Builder clearHelpKill() {
        bitField0_ = (bitField0_ & ~0x00000080);
        helpKill_ = 0;
        
        return this;
      }

      // required uint32 aidKill = 9;
      private int aidKill_ ;
      /**
       * <code>required uint32 aidKill = 9;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public boolean hasAidKill() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required uint32 aidKill = 9;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public int getAidKill() {
        return aidKill_;
      }
      /**
       * <code>required uint32 aidKill = 9;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public Builder setAidKill(int value) {
        bitField0_ |= 0x00000100;
        aidKill_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 aidKill = 9;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public Builder clearAidKill() {
        bitField0_ = (bitField0_ & ~0x00000100);
        aidKill_ = 0;
        
        return this;
      }

      // required uint32 mvpFlag = 10;
      private int mvpFlag_ ;
      /**
       * <code>required uint32 mvpFlag = 10;</code>
       *
       * <pre>
       *mvp标识(1: mvp)
       * </pre>
       */
      public boolean hasMvpFlag() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required uint32 mvpFlag = 10;</code>
       *
       * <pre>
       *mvp标识(1: mvp)
       * </pre>
       */
      public int getMvpFlag() {
        return mvpFlag_;
      }
      /**
       * <code>required uint32 mvpFlag = 10;</code>
       *
       * <pre>
       *mvp标识(1: mvp)
       * </pre>
       */
      public Builder setMvpFlag(int value) {
        bitField0_ |= 0x00000200;
        mvpFlag_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 mvpFlag = 10;</code>
       *
       * <pre>
       *mvp标识(1: mvp)
       * </pre>
       */
      public Builder clearMvpFlag() {
        bitField0_ = (bitField0_ & ~0x00000200);
        mvpFlag_ = 0;
        
        return this;
      }

      // required float mvpScore = 11;
      private float mvpScore_ ;
      /**
       * <code>required float mvpScore = 11;</code>
       *
       * <pre>
       *mvp得分
       * </pre>
       */
      public boolean hasMvpScore() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required float mvpScore = 11;</code>
       *
       * <pre>
       *mvp得分
       * </pre>
       */
      public float getMvpScore() {
        return mvpScore_;
      }
      /**
       * <code>required float mvpScore = 11;</code>
       *
       * <pre>
       *mvp得分
       * </pre>
       */
      public Builder setMvpScore(float value) {
        bitField0_ |= 0x00000400;
        mvpScore_ = value;
        
        return this;
      }
      /**
       * <code>required float mvpScore = 11;</code>
       *
       * <pre>
       *mvp得分
       * </pre>
       */
      public Builder clearMvpScore() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mvpScore_ = 0F;
        
        return this;
      }

      // required uint32 level = 12;
      private int level_ ;
      /**
       * <code>required uint32 level = 12;</code>
       *
       * <pre>
       *玩家等级
       * </pre>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required uint32 level = 12;</code>
       *
       * <pre>
       *玩家等级
       * </pre>
       */
      public int getLevel() {
        return level_;
      }
      /**
       * <code>required uint32 level = 12;</code>
       *
       * <pre>
       *玩家等级
       * </pre>
       */
      public Builder setLevel(int value) {
        bitField0_ |= 0x00000800;
        level_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 level = 12;</code>
       *
       * <pre>
       *玩家等级
       * </pre>
       */
      public Builder clearLevel() {
        bitField0_ = (bitField0_ & ~0x00000800);
        level_ = 0;
        
        return this;
      }

      // required uint32 titleId = 13;
      private int titleId_ ;
      /**
       * <code>required uint32 titleId = 13;</code>
       *
       * <pre>
       *军衔
       * </pre>
       */
      public boolean hasTitleId() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required uint32 titleId = 13;</code>
       *
       * <pre>
       *军衔
       * </pre>
       */
      public int getTitleId() {
        return titleId_;
      }
      /**
       * <code>required uint32 titleId = 13;</code>
       *
       * <pre>
       *军衔
       * </pre>
       */
      public Builder setTitleId(int value) {
        bitField0_ |= 0x00001000;
        titleId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 titleId = 13;</code>
       *
       * <pre>
       *军衔
       * </pre>
       */
      public Builder clearTitleId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        titleId_ = 0;
        
        return this;
      }

      // required uint32 battleScore = 14;
      private int battleScore_ ;
      /**
       * <code>required uint32 battleScore = 14;</code>
       *
       * <pre>
       *战斗力
       * </pre>
       */
      public boolean hasBattleScore() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required uint32 battleScore = 14;</code>
       *
       * <pre>
       *战斗力
       * </pre>
       */
      public int getBattleScore() {
        return battleScore_;
      }
      /**
       * <code>required uint32 battleScore = 14;</code>
       *
       * <pre>
       *战斗力
       * </pre>
       */
      public Builder setBattleScore(int value) {
        bitField0_ |= 0x00002000;
        battleScore_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 battleScore = 14;</code>
       *
       * <pre>
       *战斗力
       * </pre>
       */
      public Builder clearBattleScore() {
        bitField0_ = (bitField0_ & ~0x00002000);
        battleScore_ = 0;
        
        return this;
      }

      // required uint32 roleId = 15;
      private int roleId_ ;
      /**
       * <code>required uint32 roleId = 15;</code>
       *
       * <pre>
       *角色ID
       * </pre>
       */
      public boolean hasRoleId() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required uint32 roleId = 15;</code>
       *
       * <pre>
       *角色ID
       * </pre>
       */
      public int getRoleId() {
        return roleId_;
      }
      /**
       * <code>required uint32 roleId = 15;</code>
       *
       * <pre>
       *角色ID
       * </pre>
       */
      public Builder setRoleId(int value) {
        bitField0_ |= 0x00004000;
        roleId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 roleId = 15;</code>
       *
       * <pre>
       *角色ID
       * </pre>
       */
      public Builder clearRoleId() {
        bitField0_ = (bitField0_ & ~0x00004000);
        roleId_ = 0;
        
        return this;
      }

      // optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;
      private com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem statisItem_ = com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance();
      /**
       * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
       *
       * <pre>
       *统计数据
       * </pre>
       */
      public boolean hasStatisItem() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
       *
       * <pre>
       *统计数据
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem getStatisItem() {
        return statisItem_;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
       *
       * <pre>
       *统计数据
       * </pre>
       */
      public Builder setStatisItem(com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        statisItem_ = value;

        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
       *
       * <pre>
       *统计数据
       * </pre>
       */
      public Builder setStatisItem(
          com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.Builder builderForValue) {
        statisItem_ = builderForValue.build();

        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
       *
       * <pre>
       *统计数据
       * </pre>
       */
      public Builder mergeStatisItem(com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem value) {
        if (((bitField0_ & 0x00008000) == 0x00008000) &&
            statisItem_ != com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance()) {
          statisItem_ =
            com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.newBuilder(statisItem_).mergeFrom(value).buildPartial();
        } else {
          statisItem_ = value;
        }

        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .PROTO_BATTLE.WarStatisticsItem statisItem = 16;</code>
       *
       * <pre>
       *统计数据
       * </pre>
       */
      public Builder clearStatisItem() {
        statisItem_ = com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.WarReportItem)
    }

    static {
      defaultInstance = new WarReportItem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.WarReportItem)
  }

  public interface WarStatisticsItemOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 damage = 1;
    /**
     * <code>required uint32 damage = 1;</code>
     *
     * <pre>
     *输出总伤害
     * </pre>
     */
    boolean hasDamage();
    /**
     * <code>required uint32 damage = 1;</code>
     *
     * <pre>
     *输出总伤害
     * </pre>
     */
    int getDamage();

    // required float damagePer = 2;
    /**
     * <code>required float damagePer = 2;</code>
     *
     * <pre>
     *输出伤害占比
     * </pre>
     */
    boolean hasDamagePer();
    /**
     * <code>required float damagePer = 2;</code>
     *
     * <pre>
     *输出伤害占比
     * </pre>
     */
    float getDamagePer();

    // required uint32 receiveDamage = 3;
    /**
     * <code>required uint32 receiveDamage = 3;</code>
     *
     * <pre>
     *承受总伤害
     * </pre>
     */
    boolean hasReceiveDamage();
    /**
     * <code>required uint32 receiveDamage = 3;</code>
     *
     * <pre>
     *承受总伤害
     * </pre>
     */
    int getReceiveDamage();

    // required float receiveDamagePer = 4;
    /**
     * <code>required float receiveDamagePer = 4;</code>
     *
     * <pre>
     *承受伤害占比
     * </pre>
     */
    boolean hasReceiveDamagePer();
    /**
     * <code>required float receiveDamagePer = 4;</code>
     *
     * <pre>
     *承受伤害占比
     * </pre>
     */
    float getReceiveDamagePer();

    // required uint32 aidDamage = 5;
    /**
     * <code>required uint32 aidDamage = 5;</code>
     *
     * <pre>
     *协作伤害
     * </pre>
     */
    boolean hasAidDamage();
    /**
     * <code>required uint32 aidDamage = 5;</code>
     *
     * <pre>
     *协作伤害
     * </pre>
     */
    int getAidDamage();

    // required float aidDamagePer = 6;
    /**
     * <code>required float aidDamagePer = 6;</code>
     *
     * <pre>
     *协作伤害占比
     * </pre>
     */
    boolean hasAidDamagePer();
    /**
     * <code>required float aidDamagePer = 6;</code>
     *
     * <pre>
     *协作伤害占比
     * </pre>
     */
    float getAidDamagePer();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.WarStatisticsItem}
   *
   * <pre>
   *统计信息
   * </pre>
   */
  public static final class WarStatisticsItem extends
      com.google.protobuf.GeneratedMessageLite
      implements WarStatisticsItemOrBuilder {
    // Use WarStatisticsItem.newBuilder() to construct.
    private WarStatisticsItem(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private WarStatisticsItem(boolean noInit) {}

    private static final WarStatisticsItem defaultInstance;
    public static WarStatisticsItem getDefaultInstance() {
      return defaultInstance;
    }

    public WarStatisticsItem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private WarStatisticsItem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              damage_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              damagePer_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              receiveDamage_ = input.readUInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              receiveDamagePer_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              aidDamage_ = input.readUInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              aidDamagePer_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<WarStatisticsItem> PARSER =
        new com.google.protobuf.AbstractParser<WarStatisticsItem>() {
      public WarStatisticsItem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WarStatisticsItem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WarStatisticsItem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 damage = 1;
    public static final int DAMAGE_FIELD_NUMBER = 1;
    private int damage_;
    /**
     * <code>required uint32 damage = 1;</code>
     *
     * <pre>
     *输出总伤害
     * </pre>
     */
    public boolean hasDamage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 damage = 1;</code>
     *
     * <pre>
     *输出总伤害
     * </pre>
     */
    public int getDamage() {
      return damage_;
    }

    // required float damagePer = 2;
    public static final int DAMAGEPER_FIELD_NUMBER = 2;
    private float damagePer_;
    /**
     * <code>required float damagePer = 2;</code>
     *
     * <pre>
     *输出伤害占比
     * </pre>
     */
    public boolean hasDamagePer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float damagePer = 2;</code>
     *
     * <pre>
     *输出伤害占比
     * </pre>
     */
    public float getDamagePer() {
      return damagePer_;
    }

    // required uint32 receiveDamage = 3;
    public static final int RECEIVEDAMAGE_FIELD_NUMBER = 3;
    private int receiveDamage_;
    /**
     * <code>required uint32 receiveDamage = 3;</code>
     *
     * <pre>
     *承受总伤害
     * </pre>
     */
    public boolean hasReceiveDamage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 receiveDamage = 3;</code>
     *
     * <pre>
     *承受总伤害
     * </pre>
     */
    public int getReceiveDamage() {
      return receiveDamage_;
    }

    // required float receiveDamagePer = 4;
    public static final int RECEIVEDAMAGEPER_FIELD_NUMBER = 4;
    private float receiveDamagePer_;
    /**
     * <code>required float receiveDamagePer = 4;</code>
     *
     * <pre>
     *承受伤害占比
     * </pre>
     */
    public boolean hasReceiveDamagePer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float receiveDamagePer = 4;</code>
     *
     * <pre>
     *承受伤害占比
     * </pre>
     */
    public float getReceiveDamagePer() {
      return receiveDamagePer_;
    }

    // required uint32 aidDamage = 5;
    public static final int AIDDAMAGE_FIELD_NUMBER = 5;
    private int aidDamage_;
    /**
     * <code>required uint32 aidDamage = 5;</code>
     *
     * <pre>
     *协作伤害
     * </pre>
     */
    public boolean hasAidDamage() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 aidDamage = 5;</code>
     *
     * <pre>
     *协作伤害
     * </pre>
     */
    public int getAidDamage() {
      return aidDamage_;
    }

    // required float aidDamagePer = 6;
    public static final int AIDDAMAGEPER_FIELD_NUMBER = 6;
    private float aidDamagePer_;
    /**
     * <code>required float aidDamagePer = 6;</code>
     *
     * <pre>
     *协作伤害占比
     * </pre>
     */
    public boolean hasAidDamagePer() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float aidDamagePer = 6;</code>
     *
     * <pre>
     *协作伤害占比
     * </pre>
     */
    public float getAidDamagePer() {
      return aidDamagePer_;
    }

    private void initFields() {
      damage_ = 0;
      damagePer_ = 0F;
      receiveDamage_ = 0;
      receiveDamagePer_ = 0F;
      aidDamage_ = 0;
      aidDamagePer_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasDamage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDamagePer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReceiveDamage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReceiveDamagePer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAidDamage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAidDamagePer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, damage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, damagePer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, receiveDamage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, receiveDamagePer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, aidDamage_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, aidDamagePer_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, damage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, damagePer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, receiveDamage_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, receiveDamagePer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, aidDamage_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, aidDamagePer_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.WarStatisticsItem}
     *
     * <pre>
     *统计信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItemOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        damage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        damagePer_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        receiveDamage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        receiveDamagePer_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        aidDamage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        aidDamagePer_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem build() {
        com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem result = new com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.damage_ = damage_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.damagePer_ = damagePer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.receiveDamage_ = receiveDamage_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.receiveDamagePer_ = receiveDamagePer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.aidDamage_ = aidDamage_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.aidDamagePer_ = aidDamagePer_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem.getDefaultInstance()) return this;
        if (other.hasDamage()) {
          setDamage(other.getDamage());
        }
        if (other.hasDamagePer()) {
          setDamagePer(other.getDamagePer());
        }
        if (other.hasReceiveDamage()) {
          setReceiveDamage(other.getReceiveDamage());
        }
        if (other.hasReceiveDamagePer()) {
          setReceiveDamagePer(other.getReceiveDamagePer());
        }
        if (other.hasAidDamage()) {
          setAidDamage(other.getAidDamage());
        }
        if (other.hasAidDamagePer()) {
          setAidDamagePer(other.getAidDamagePer());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDamage()) {
          
          return false;
        }
        if (!hasDamagePer()) {
          
          return false;
        }
        if (!hasReceiveDamage()) {
          
          return false;
        }
        if (!hasReceiveDamagePer()) {
          
          return false;
        }
        if (!hasAidDamage()) {
          
          return false;
        }
        if (!hasAidDamagePer()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.WarStatisticsItem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 damage = 1;
      private int damage_ ;
      /**
       * <code>required uint32 damage = 1;</code>
       *
       * <pre>
       *输出总伤害
       * </pre>
       */
      public boolean hasDamage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 damage = 1;</code>
       *
       * <pre>
       *输出总伤害
       * </pre>
       */
      public int getDamage() {
        return damage_;
      }
      /**
       * <code>required uint32 damage = 1;</code>
       *
       * <pre>
       *输出总伤害
       * </pre>
       */
      public Builder setDamage(int value) {
        bitField0_ |= 0x00000001;
        damage_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 damage = 1;</code>
       *
       * <pre>
       *输出总伤害
       * </pre>
       */
      public Builder clearDamage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        damage_ = 0;
        
        return this;
      }

      // required float damagePer = 2;
      private float damagePer_ ;
      /**
       * <code>required float damagePer = 2;</code>
       *
       * <pre>
       *输出伤害占比
       * </pre>
       */
      public boolean hasDamagePer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float damagePer = 2;</code>
       *
       * <pre>
       *输出伤害占比
       * </pre>
       */
      public float getDamagePer() {
        return damagePer_;
      }
      /**
       * <code>required float damagePer = 2;</code>
       *
       * <pre>
       *输出伤害占比
       * </pre>
       */
      public Builder setDamagePer(float value) {
        bitField0_ |= 0x00000002;
        damagePer_ = value;
        
        return this;
      }
      /**
       * <code>required float damagePer = 2;</code>
       *
       * <pre>
       *输出伤害占比
       * </pre>
       */
      public Builder clearDamagePer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        damagePer_ = 0F;
        
        return this;
      }

      // required uint32 receiveDamage = 3;
      private int receiveDamage_ ;
      /**
       * <code>required uint32 receiveDamage = 3;</code>
       *
       * <pre>
       *承受总伤害
       * </pre>
       */
      public boolean hasReceiveDamage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 receiveDamage = 3;</code>
       *
       * <pre>
       *承受总伤害
       * </pre>
       */
      public int getReceiveDamage() {
        return receiveDamage_;
      }
      /**
       * <code>required uint32 receiveDamage = 3;</code>
       *
       * <pre>
       *承受总伤害
       * </pre>
       */
      public Builder setReceiveDamage(int value) {
        bitField0_ |= 0x00000004;
        receiveDamage_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 receiveDamage = 3;</code>
       *
       * <pre>
       *承受总伤害
       * </pre>
       */
      public Builder clearReceiveDamage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        receiveDamage_ = 0;
        
        return this;
      }

      // required float receiveDamagePer = 4;
      private float receiveDamagePer_ ;
      /**
       * <code>required float receiveDamagePer = 4;</code>
       *
       * <pre>
       *承受伤害占比
       * </pre>
       */
      public boolean hasReceiveDamagePer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float receiveDamagePer = 4;</code>
       *
       * <pre>
       *承受伤害占比
       * </pre>
       */
      public float getReceiveDamagePer() {
        return receiveDamagePer_;
      }
      /**
       * <code>required float receiveDamagePer = 4;</code>
       *
       * <pre>
       *承受伤害占比
       * </pre>
       */
      public Builder setReceiveDamagePer(float value) {
        bitField0_ |= 0x00000008;
        receiveDamagePer_ = value;
        
        return this;
      }
      /**
       * <code>required float receiveDamagePer = 4;</code>
       *
       * <pre>
       *承受伤害占比
       * </pre>
       */
      public Builder clearReceiveDamagePer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        receiveDamagePer_ = 0F;
        
        return this;
      }

      // required uint32 aidDamage = 5;
      private int aidDamage_ ;
      /**
       * <code>required uint32 aidDamage = 5;</code>
       *
       * <pre>
       *协作伤害
       * </pre>
       */
      public boolean hasAidDamage() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 aidDamage = 5;</code>
       *
       * <pre>
       *协作伤害
       * </pre>
       */
      public int getAidDamage() {
        return aidDamage_;
      }
      /**
       * <code>required uint32 aidDamage = 5;</code>
       *
       * <pre>
       *协作伤害
       * </pre>
       */
      public Builder setAidDamage(int value) {
        bitField0_ |= 0x00000010;
        aidDamage_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 aidDamage = 5;</code>
       *
       * <pre>
       *协作伤害
       * </pre>
       */
      public Builder clearAidDamage() {
        bitField0_ = (bitField0_ & ~0x00000010);
        aidDamage_ = 0;
        
        return this;
      }

      // required float aidDamagePer = 6;
      private float aidDamagePer_ ;
      /**
       * <code>required float aidDamagePer = 6;</code>
       *
       * <pre>
       *协作伤害占比
       * </pre>
       */
      public boolean hasAidDamagePer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float aidDamagePer = 6;</code>
       *
       * <pre>
       *协作伤害占比
       * </pre>
       */
      public float getAidDamagePer() {
        return aidDamagePer_;
      }
      /**
       * <code>required float aidDamagePer = 6;</code>
       *
       * <pre>
       *协作伤害占比
       * </pre>
       */
      public Builder setAidDamagePer(float value) {
        bitField0_ |= 0x00000020;
        aidDamagePer_ = value;
        
        return this;
      }
      /**
       * <code>required float aidDamagePer = 6;</code>
       *
       * <pre>
       *协作伤害占比
       * </pre>
       */
      public Builder clearAidDamagePer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        aidDamagePer_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.WarStatisticsItem)
    }

    static {
      defaultInstance = new WarStatisticsItem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.WarStatisticsItem)
  }

  public interface STC_HIT_EFFECT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required uint32 effectId = 2;
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *效果类型
     * </pre>
     */
    boolean hasEffectId();
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *效果类型
     * </pre>
     */
    int getEffectId();

    // required uint32 time = 3;
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *持续时间(单位:秒)
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *持续时间(单位:秒)
     * </pre>
     */
    int getTime();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_HIT_EFFECT_MSG}
   *
   * <pre>
   *触发效果
   * </pre>
   */
  public static final class STC_HIT_EFFECT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_HIT_EFFECT_MSGOrBuilder {
    // Use STC_HIT_EFFECT_MSG.newBuilder() to construct.
    private STC_HIT_EFFECT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_HIT_EFFECT_MSG(boolean noInit) {}

    private static final STC_HIT_EFFECT_MSG defaultInstance;
    public static STC_HIT_EFFECT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_HIT_EFFECT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_HIT_EFFECT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              effectId_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              time_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_HIT_EFFECT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_HIT_EFFECT_MSG>() {
      public STC_HIT_EFFECT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_HIT_EFFECT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_HIT_EFFECT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 effectId = 2;
    public static final int EFFECTID_FIELD_NUMBER = 2;
    private int effectId_;
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *效果类型
     * </pre>
     */
    public boolean hasEffectId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *效果类型
     * </pre>
     */
    public int getEffectId() {
      return effectId_;
    }

    // required uint32 time = 3;
    public static final int TIME_FIELD_NUMBER = 3;
    private int time_;
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *持续时间(单位:秒)
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     *持续时间(单位:秒)
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    private void initFields() {
      id_ = 0;
      effectId_ = 0;
      time_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEffectId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, effectId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, time_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, effectId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, time_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_HIT_EFFECT_MSG}
     *
     * <pre>
     *触发效果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        effectId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.effectId_ = effectId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.time_ = time_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasEffectId()) {
          setEffectId(other.getEffectId());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasEffectId()) {
          
          return false;
        }
        if (!hasTime()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_HIT_EFFECT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 effectId = 2;
      private int effectId_ ;
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *效果类型
       * </pre>
       */
      public boolean hasEffectId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *效果类型
       * </pre>
       */
      public int getEffectId() {
        return effectId_;
      }
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *效果类型
       * </pre>
       */
      public Builder setEffectId(int value) {
        bitField0_ |= 0x00000002;
        effectId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *效果类型
       * </pre>
       */
      public Builder clearEffectId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        effectId_ = 0;
        
        return this;
      }

      // required uint32 time = 3;
      private int time_ ;
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *持续时间(单位:秒)
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *持续时间(单位:秒)
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *持续时间(单位:秒)
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000004;
        time_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       *持续时间(单位:秒)
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        time_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_HIT_EFFECT_MSG)
    }

    static {
      defaultInstance = new STC_HIT_EFFECT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_HIT_EFFECT_MSG)
  }

  public interface STC_DEL_EFFECT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required uint32 effectId = 2;
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *删除效果类型
     * </pre>
     */
    boolean hasEffectId();
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *删除效果类型
     * </pre>
     */
    int getEffectId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_DEL_EFFECT_MSG}
   *
   * <pre>
   *删除buff效果
   * </pre>
   */
  public static final class STC_DEL_EFFECT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_DEL_EFFECT_MSGOrBuilder {
    // Use STC_DEL_EFFECT_MSG.newBuilder() to construct.
    private STC_DEL_EFFECT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_DEL_EFFECT_MSG(boolean noInit) {}

    private static final STC_DEL_EFFECT_MSG defaultInstance;
    public static STC_DEL_EFFECT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_DEL_EFFECT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_DEL_EFFECT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              effectId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_DEL_EFFECT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_DEL_EFFECT_MSG>() {
      public STC_DEL_EFFECT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_DEL_EFFECT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_DEL_EFFECT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 effectId = 2;
    public static final int EFFECTID_FIELD_NUMBER = 2;
    private int effectId_;
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *删除效果类型
     * </pre>
     */
    public boolean hasEffectId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 effectId = 2;</code>
     *
     * <pre>
     *删除效果类型
     * </pre>
     */
    public int getEffectId() {
      return effectId_;
    }

    private void initFields() {
      id_ = 0;
      effectId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEffectId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, effectId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, effectId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_DEL_EFFECT_MSG}
     *
     * <pre>
     *删除buff效果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        effectId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.effectId_ = effectId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasEffectId()) {
          setEffectId(other.getEffectId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasEffectId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_DEL_EFFECT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 effectId = 2;
      private int effectId_ ;
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *删除效果类型
       * </pre>
       */
      public boolean hasEffectId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *删除效果类型
       * </pre>
       */
      public int getEffectId() {
        return effectId_;
      }
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *删除效果类型
       * </pre>
       */
      public Builder setEffectId(int value) {
        bitField0_ |= 0x00000002;
        effectId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 effectId = 2;</code>
       *
       * <pre>
       *删除效果类型
       * </pre>
       */
      public Builder clearEffectId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        effectId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_DEL_EFFECT_MSG)
    }

    static {
      defaultInstance = new STC_DEL_EFFECT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_DEL_EFFECT_MSG)
  }

  public interface CTS_ROBOT_MOVE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    int getId();

    // required uint32 tickCount = 2;
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    boolean hasTickCount();
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    int getTickCount();

    // required .PROTO_BATTLE.Coordinate3D position = 3;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition();

    // required uint32 aimDirection = 4;
    /**
     * <code>required uint32 aimDirection = 4;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    boolean hasAimDirection();
    /**
     * <code>required uint32 aimDirection = 4;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    int getAimDirection();

    // required uint32 moveDirection = 5;
    /**
     * <code>required uint32 moveDirection = 5;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    boolean hasMoveDirection();
    /**
     * <code>required uint32 moveDirection = 5;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    int getMoveDirection();

    // required float moveSpeed = 6;
    /**
     * <code>required float moveSpeed = 6;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    boolean hasMoveSpeed();
    /**
     * <code>required float moveSpeed = 6;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    float getMoveSpeed();

    // required uint32 state = 7;
    /**
     * <code>required uint32 state = 7;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    boolean hasState();
    /**
     * <code>required uint32 state = 7;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    int getState();

    // required .PROTO_BATTLE.Coordinate3D rotation = 8;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    boolean hasRotation();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation();

    // required .PROTO_BATTLE.Coordinate3D force = 9;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
     */
    boolean hasForce();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_ROBOT_MOVE_MSG}
   *
   * <pre>
   *AI移动
   * </pre>
   */
  public static final class CTS_ROBOT_MOVE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_ROBOT_MOVE_MSGOrBuilder {
    // Use CTS_ROBOT_MOVE_MSG.newBuilder() to construct.
    private CTS_ROBOT_MOVE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_ROBOT_MOVE_MSG(boolean noInit) {}

    private static final CTS_ROBOT_MOVE_MSG defaultInstance;
    public static CTS_ROBOT_MOVE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_ROBOT_MOVE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_ROBOT_MOVE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tickCount_ = input.readUInt32();
              break;
            }
            case 26: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              aimDirection_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              moveDirection_ = input.readUInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              moveSpeed_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              state_ = input.readUInt32();
              break;
            }
            case 66: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = rotation_.toBuilder();
              }
              rotation_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rotation_);
                rotation_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = force_.toBuilder();
              }
              force_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(force_);
                force_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_ROBOT_MOVE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_ROBOT_MOVE_MSG>() {
      public CTS_ROBOT_MOVE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_ROBOT_MOVE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_ROBOT_MOVE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 tickCount = 2;
    public static final int TICKCOUNT_FIELD_NUMBER = 2;
    private int tickCount_;
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public boolean hasTickCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public int getTickCount() {
      return tickCount_;
    }

    // required .PROTO_BATTLE.Coordinate3D position = 3;
    public static final int POSITION_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
      return position_;
    }

    // required uint32 aimDirection = 4;
    public static final int AIMDIRECTION_FIELD_NUMBER = 4;
    private int aimDirection_;
    /**
     * <code>required uint32 aimDirection = 4;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    public boolean hasAimDirection() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 aimDirection = 4;</code>
     *
     * <pre>
     *当前瞄准方向
     * </pre>
     */
    public int getAimDirection() {
      return aimDirection_;
    }

    // required uint32 moveDirection = 5;
    public static final int MOVEDIRECTION_FIELD_NUMBER = 5;
    private int moveDirection_;
    /**
     * <code>required uint32 moveDirection = 5;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    public boolean hasMoveDirection() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 moveDirection = 5;</code>
     *
     * <pre>
     *当前移动方向
     * </pre>
     */
    public int getMoveDirection() {
      return moveDirection_;
    }

    // required float moveSpeed = 6;
    public static final int MOVESPEED_FIELD_NUMBER = 6;
    private float moveSpeed_;
    /**
     * <code>required float moveSpeed = 6;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    public boolean hasMoveSpeed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float moveSpeed = 6;</code>
     *
     * <pre>
     *当前移动速度
     * </pre>
     */
    public float getMoveSpeed() {
      return moveSpeed_;
    }

    // required uint32 state = 7;
    public static final int STATE_FIELD_NUMBER = 7;
    private int state_;
    /**
     * <code>required uint32 state = 7;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint32 state = 7;</code>
     *
     * <pre>
     *移动状态
     * </pre>
     */
    public int getState() {
      return state_;
    }

    // required .PROTO_BATTLE.Coordinate3D rotation = 8;
    public static final int ROTATION_FIELD_NUMBER = 8;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D rotation_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    public boolean hasRotation() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
     *
     * <pre>
     *旋转方向
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation() {
      return rotation_;
    }

    // required .PROTO_BATTLE.Coordinate3D force = 9;
    public static final int FORCE_FIELD_NUMBER = 9;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D force_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
     */
    public boolean hasForce() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce() {
      return force_;
    }

    private void initFields() {
      id_ = 0;
      tickCount_ = 0;
      position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      aimDirection_ = 0;
      moveDirection_ = 0;
      moveSpeed_ = 0F;
      state_ = 0;
      rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTickCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAimDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoveDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoveSpeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRotation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasForce()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRotation().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getForce().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, tickCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, aimDirection_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, moveDirection_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, moveSpeed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, state_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, rotation_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, force_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, tickCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, position_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, aimDirection_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, moveDirection_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, moveSpeed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, state_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, rotation_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, force_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_ROBOT_MOVE_MSG}
     *
     * <pre>
     *AI移动
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        tickCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        aimDirection_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        moveDirection_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        moveSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tickCount_ = tickCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.aimDirection_ = aimDirection_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.moveDirection_ = moveDirection_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.moveSpeed_ = moveSpeed_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.rotation_ = rotation_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.force_ = force_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasTickCount()) {
          setTickCount(other.getTickCount());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasAimDirection()) {
          setAimDirection(other.getAimDirection());
        }
        if (other.hasMoveDirection()) {
          setMoveDirection(other.getMoveDirection());
        }
        if (other.hasMoveSpeed()) {
          setMoveSpeed(other.getMoveSpeed());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasRotation()) {
          mergeRotation(other.getRotation());
        }
        if (other.hasForce()) {
          mergeForce(other.getForce());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasTickCount()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasAimDirection()) {
          
          return false;
        }
        if (!hasMoveDirection()) {
          
          return false;
        }
        if (!hasMoveSpeed()) {
          
          return false;
        }
        if (!hasState()) {
          
          return false;
        }
        if (!hasRotation()) {
          
          return false;
        }
        if (!hasForce()) {
          
          return false;
        }
        if (!getPosition().isInitialized()) {
          
          return false;
        }
        if (!getRotation().isInitialized()) {
          
          return false;
        }
        if (!getForce().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_MOVE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 tickCount = 2;
      private int tickCount_ ;
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public boolean hasTickCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public int getTickCount() {
        return tickCount_;
      }
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder setTickCount(int value) {
        bitField0_ |= 0x00000002;
        tickCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder clearTickCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tickCount_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D position = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
        return position_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder setPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        position_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder setPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        position_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder mergePosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            position_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          position_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(position_).mergeFrom(value).buildPartial();
        } else {
          position_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 3;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder clearPosition() {
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // required uint32 aimDirection = 4;
      private int aimDirection_ ;
      /**
       * <code>required uint32 aimDirection = 4;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public boolean hasAimDirection() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 aimDirection = 4;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public int getAimDirection() {
        return aimDirection_;
      }
      /**
       * <code>required uint32 aimDirection = 4;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public Builder setAimDirection(int value) {
        bitField0_ |= 0x00000008;
        aimDirection_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 aimDirection = 4;</code>
       *
       * <pre>
       *当前瞄准方向
       * </pre>
       */
      public Builder clearAimDirection() {
        bitField0_ = (bitField0_ & ~0x00000008);
        aimDirection_ = 0;
        
        return this;
      }

      // required uint32 moveDirection = 5;
      private int moveDirection_ ;
      /**
       * <code>required uint32 moveDirection = 5;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public boolean hasMoveDirection() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 moveDirection = 5;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public int getMoveDirection() {
        return moveDirection_;
      }
      /**
       * <code>required uint32 moveDirection = 5;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public Builder setMoveDirection(int value) {
        bitField0_ |= 0x00000010;
        moveDirection_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 moveDirection = 5;</code>
       *
       * <pre>
       *当前移动方向
       * </pre>
       */
      public Builder clearMoveDirection() {
        bitField0_ = (bitField0_ & ~0x00000010);
        moveDirection_ = 0;
        
        return this;
      }

      // required float moveSpeed = 6;
      private float moveSpeed_ ;
      /**
       * <code>required float moveSpeed = 6;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public boolean hasMoveSpeed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float moveSpeed = 6;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public float getMoveSpeed() {
        return moveSpeed_;
      }
      /**
       * <code>required float moveSpeed = 6;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public Builder setMoveSpeed(float value) {
        bitField0_ |= 0x00000020;
        moveSpeed_ = value;
        
        return this;
      }
      /**
       * <code>required float moveSpeed = 6;</code>
       *
       * <pre>
       *当前移动速度
       * </pre>
       */
      public Builder clearMoveSpeed() {
        bitField0_ = (bitField0_ & ~0x00000020);
        moveSpeed_ = 0F;
        
        return this;
      }

      // required uint32 state = 7;
      private int state_ ;
      /**
       * <code>required uint32 state = 7;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 state = 7;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>required uint32 state = 7;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000040;
        state_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 state = 7;</code>
       *
       * <pre>
       *移动状态
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000040);
        state_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D rotation = 8;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public boolean hasRotation() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getRotation() {
        return rotation_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder setRotation(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        rotation_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder setRotation(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        rotation_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder mergeRotation(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            rotation_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          rotation_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(rotation_).mergeFrom(value).buildPartial();
        } else {
          rotation_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D rotation = 8;</code>
       *
       * <pre>
       *旋转方向
       * </pre>
       */
      public Builder clearRotation() {
        rotation_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D force = 9;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
       */
      public boolean hasForce() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getForce() {
        return force_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
       */
      public Builder setForce(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        force_ = value;

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
       */
      public Builder setForce(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        force_ = builderForValue.build();

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
       */
      public Builder mergeForce(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            force_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          force_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(force_).mergeFrom(value).buildPartial();
        } else {
          force_ = value;
        }

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D force = 9;</code>
       */
      public Builder clearForce() {
        force_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_ROBOT_MOVE_MSG)
    }

    static {
      defaultInstance = new CTS_ROBOT_MOVE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_ROBOT_MOVE_MSG)
  }

  public interface CTS_ROBOT_FIRE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    int getId();

    // required uint32 tickCount = 2;
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    boolean hasTickCount();
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    int getTickCount();

    // required uint32 targetId = 3;
    /**
     * <code>required uint32 targetId = 3;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 targetId = 3;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    int getTargetId();

    // required .PROTO_BATTLE.Coordinate3D targetPosition = 4;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    boolean hasTargetPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition();

    // required float direction = 5;
    /**
     * <code>required float direction = 5;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    boolean hasDirection();
    /**
     * <code>required float direction = 5;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    float getDirection();

    // required uint32 stdItem = 6;
    /**
     * <code>required uint32 stdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    boolean hasStdItem();
    /**
     * <code>required uint32 stdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    int getStdItem();

    // required bool hadDodge = 7;
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean hasHadDodge();
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean getHadDodge();

    // required float skewX = 8;
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    boolean hasSkewX();
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    float getSkewX();

    // required float skewY = 9;
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    boolean hasSkewY();
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    float getSkewY();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_ROBOT_FIRE_MSG}
   *
   * <pre>
   *AI开火
   * </pre>
   */
  public static final class CTS_ROBOT_FIRE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_ROBOT_FIRE_MSGOrBuilder {
    // Use CTS_ROBOT_FIRE_MSG.newBuilder() to construct.
    private CTS_ROBOT_FIRE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_ROBOT_FIRE_MSG(boolean noInit) {}

    private static final CTS_ROBOT_FIRE_MSG defaultInstance;
    public static CTS_ROBOT_FIRE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_ROBOT_FIRE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_ROBOT_FIRE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tickCount_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              targetId_ = input.readUInt32();
              break;
            }
            case 34: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = targetPosition_.toBuilder();
              }
              targetPosition_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(targetPosition_);
                targetPosition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              direction_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              stdItem_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              hadDodge_ = input.readBool();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              skewX_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              skewY_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_ROBOT_FIRE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_ROBOT_FIRE_MSG>() {
      public CTS_ROBOT_FIRE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_ROBOT_FIRE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_ROBOT_FIRE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *AI Id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 tickCount = 2;
    public static final int TICKCOUNT_FIELD_NUMBER = 2;
    private int tickCount_;
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public boolean hasTickCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 tickCount = 2;</code>
     *
     * <pre>
     *客户端计时
     * </pre>
     */
    public int getTickCount() {
      return tickCount_;
    }

    // required uint32 targetId = 3;
    public static final int TARGETID_FIELD_NUMBER = 3;
    private int targetId_;
    /**
     * <code>required uint32 targetId = 3;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 targetId = 3;</code>
     *
     * <pre>
     *攻击的目标
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required .PROTO_BATTLE.Coordinate3D targetPosition = 4;
    public static final int TARGETPOSITION_FIELD_NUMBER = 4;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D targetPosition_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    public boolean hasTargetPosition() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
     *
     * <pre>
     *攻击的位置
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition() {
      return targetPosition_;
    }

    // required float direction = 5;
    public static final int DIRECTION_FIELD_NUMBER = 5;
    private float direction_;
    /**
     * <code>required float direction = 5;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float direction = 5;</code>
     *
     * <pre>
     *炮塔的角度
     * </pre>
     */
    public float getDirection() {
      return direction_;
    }

    // required uint32 stdItem = 6;
    public static final int STDITEM_FIELD_NUMBER = 6;
    private int stdItem_;
    /**
     * <code>required uint32 stdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public boolean hasStdItem() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 stdItem = 6;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public int getStdItem() {
      return stdItem_;
    }

    // required bool hadDodge = 7;
    public static final int HADDODGE_FIELD_NUMBER = 7;
    private boolean hadDodge_;
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean hasHadDodge() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool hadDodge = 7;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean getHadDodge() {
      return hadDodge_;
    }

    // required float skewX = 8;
    public static final int SKEWX_FIELD_NUMBER = 8;
    private float skewX_;
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public boolean hasSkewX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float skewX = 8;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public float getSkewX() {
      return skewX_;
    }

    // required float skewY = 9;
    public static final int SKEWY_FIELD_NUMBER = 9;
    private float skewY_;
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public boolean hasSkewY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float skewY = 9;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public float getSkewY() {
      return skewY_;
    }

    private void initFields() {
      id_ = 0;
      tickCount_ = 0;
      targetId_ = 0;
      targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      direction_ = 0F;
      stdItem_ = 0;
      hadDodge_ = false;
      skewX_ = 0F;
      skewY_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTickCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDirection()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStdItem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHadDodge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTargetPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, tickCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, targetId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, targetPosition_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, direction_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, stdItem_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, hadDodge_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, skewX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, skewY_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, tickCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, targetId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, targetPosition_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, direction_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stdItem_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hadDodge_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, skewX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, skewY_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_ROBOT_FIRE_MSG}
     *
     * <pre>
     *AI开火
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        tickCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        direction_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        stdItem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        hadDodge_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        skewX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        skewY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tickCount_ = tickCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.targetPosition_ = targetPosition_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.stdItem_ = stdItem_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hadDodge_ = hadDodge_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.skewX_ = skewX_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.skewY_ = skewY_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasTickCount()) {
          setTickCount(other.getTickCount());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasTargetPosition()) {
          mergeTargetPosition(other.getTargetPosition());
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasStdItem()) {
          setStdItem(other.getStdItem());
        }
        if (other.hasHadDodge()) {
          setHadDodge(other.getHadDodge());
        }
        if (other.hasSkewX()) {
          setSkewX(other.getSkewX());
        }
        if (other.hasSkewY()) {
          setSkewY(other.getSkewY());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasTickCount()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasTargetPosition()) {
          
          return false;
        }
        if (!hasDirection()) {
          
          return false;
        }
        if (!hasStdItem()) {
          
          return false;
        }
        if (!hasHadDodge()) {
          
          return false;
        }
        if (!hasSkewX()) {
          
          return false;
        }
        if (!hasSkewY()) {
          
          return false;
        }
        if (!getTargetPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_FIRE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *AI Id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 tickCount = 2;
      private int tickCount_ ;
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public boolean hasTickCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public int getTickCount() {
        return tickCount_;
      }
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder setTickCount(int value) {
        bitField0_ |= 0x00000002;
        tickCount_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 tickCount = 2;</code>
       *
       * <pre>
       *客户端计时
       * </pre>
       */
      public Builder clearTickCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tickCount_ = 0;
        
        return this;
      }

      // required uint32 targetId = 3;
      private int targetId_ ;
      /**
       * <code>required uint32 targetId = 3;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 targetId = 3;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 targetId = 3;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000004;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 targetId = 3;</code>
       *
       * <pre>
       *攻击的目标
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        targetId_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D targetPosition = 4;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public boolean hasTargetPosition() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getTargetPosition() {
        return targetPosition_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder setTargetPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        targetPosition_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder setTargetPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        targetPosition_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder mergeTargetPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            targetPosition_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          targetPosition_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(targetPosition_).mergeFrom(value).buildPartial();
        } else {
          targetPosition_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D targetPosition = 4;</code>
       *
       * <pre>
       *攻击的位置
       * </pre>
       */
      public Builder clearTargetPosition() {
        targetPosition_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // required float direction = 5;
      private float direction_ ;
      /**
       * <code>required float direction = 5;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float direction = 5;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public float getDirection() {
        return direction_;
      }
      /**
       * <code>required float direction = 5;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public Builder setDirection(float value) {
        bitField0_ |= 0x00000010;
        direction_ = value;
        
        return this;
      }
      /**
       * <code>required float direction = 5;</code>
       *
       * <pre>
       *炮塔的角度
       * </pre>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000010);
        direction_ = 0F;
        
        return this;
      }

      // required uint32 stdItem = 6;
      private int stdItem_ ;
      /**
       * <code>required uint32 stdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public boolean hasStdItem() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 stdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public int getStdItem() {
        return stdItem_;
      }
      /**
       * <code>required uint32 stdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder setStdItem(int value) {
        bitField0_ |= 0x00000020;
        stdItem_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 stdItem = 6;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder clearStdItem() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stdItem_ = 0;
        
        return this;
      }

      // required bool hadDodge = 7;
      private boolean hadDodge_ ;
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean hasHadDodge() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean getHadDodge() {
        return hadDodge_;
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder setHadDodge(boolean value) {
        bitField0_ |= 0x00000040;
        hadDodge_ = value;
        
        return this;
      }
      /**
       * <code>required bool hadDodge = 7;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder clearHadDodge() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hadDodge_ = false;
        
        return this;
      }

      // required float skewX = 8;
      private float skewX_ ;
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public boolean hasSkewX() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public float getSkewX() {
        return skewX_;
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder setSkewX(float value) {
        bitField0_ |= 0x00000080;
        skewX_ = value;
        
        return this;
      }
      /**
       * <code>required float skewX = 8;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder clearSkewX() {
        bitField0_ = (bitField0_ & ~0x00000080);
        skewX_ = 0F;
        
        return this;
      }

      // required float skewY = 9;
      private float skewY_ ;
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public boolean hasSkewY() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public float getSkewY() {
        return skewY_;
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder setSkewY(float value) {
        bitField0_ |= 0x00000100;
        skewY_ = value;
        
        return this;
      }
      /**
       * <code>required float skewY = 9;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder clearSkewY() {
        bitField0_ = (bitField0_ & ~0x00000100);
        skewY_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_ROBOT_FIRE_MSG)
    }

    static {
      defaultInstance = new CTS_ROBOT_FIRE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_ROBOT_FIRE_MSG)
  }

  public interface CTS_ROBOT_HIT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 SourceId = 1;
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *开火者
     * </pre>
     */
    boolean hasSourceId();
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *开火者
     * </pre>
     */
    int getSourceId();

    // required uint32 TargetId = 2;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    int getTargetId();

    // required uint32 HitPart = 3;
    /**
     * <code>required uint32 HitPart = 3;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    boolean hasHitPart();
    /**
     * <code>required uint32 HitPart = 3;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    int getHitPart();

    // required bool hadDodge = 4;
    /**
     * <code>required bool hadDodge = 4;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean hasHadDodge();
    /**
     * <code>required bool hadDodge = 4;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean getHadDodge();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_ROBOT_HIT_MSG}
   *
   * <pre>
   *AI命中
   * </pre>
   */
  public static final class CTS_ROBOT_HIT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_ROBOT_HIT_MSGOrBuilder {
    // Use CTS_ROBOT_HIT_MSG.newBuilder() to construct.
    private CTS_ROBOT_HIT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_ROBOT_HIT_MSG(boolean noInit) {}

    private static final CTS_ROBOT_HIT_MSG defaultInstance;
    public static CTS_ROBOT_HIT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_ROBOT_HIT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_ROBOT_HIT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sourceId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetId_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              hitPart_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              hadDodge_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_ROBOT_HIT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_ROBOT_HIT_MSG>() {
      public CTS_ROBOT_HIT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_ROBOT_HIT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_ROBOT_HIT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 SourceId = 1;
    public static final int SOURCEID_FIELD_NUMBER = 1;
    private int sourceId_;
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *开火者
     * </pre>
     */
    public boolean hasSourceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 SourceId = 1;</code>
     *
     * <pre>
     *开火者
     * </pre>
     */
    public int getSourceId() {
      return sourceId_;
    }

    // required uint32 TargetId = 2;
    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 TargetId = 2;</code>
     *
     * <pre>
     *命中目标
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required uint32 HitPart = 3;
    public static final int HITPART_FIELD_NUMBER = 3;
    private int hitPart_;
    /**
     * <code>required uint32 HitPart = 3;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    public boolean hasHitPart() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 HitPart = 3;</code>
     *
     * <pre>
     *命中部位 0前,1侧,2后
     * </pre>
     */
    public int getHitPart() {
      return hitPart_;
    }

    // required bool hadDodge = 4;
    public static final int HADDODGE_FIELD_NUMBER = 4;
    private boolean hadDodge_;
    /**
     * <code>required bool hadDodge = 4;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean hasHadDodge() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool hadDodge = 4;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean getHadDodge() {
      return hadDodge_;
    }

    private void initFields() {
      sourceId_ = 0;
      targetId_ = 0;
      hitPart_ = 0;
      hadDodge_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSourceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHitPart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHadDodge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, hitPart_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, hadDodge_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, hitPart_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, hadDodge_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_ROBOT_HIT_MSG}
     *
     * <pre>
     *AI命中
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sourceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        hitPart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        hadDodge_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sourceId_ = sourceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hitPart_ = hitPart_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.hadDodge_ = hadDodge_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG.getDefaultInstance()) return this;
        if (other.hasSourceId()) {
          setSourceId(other.getSourceId());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasHitPart()) {
          setHitPart(other.getHitPart());
        }
        if (other.hasHadDodge()) {
          setHadDodge(other.getHadDodge());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSourceId()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasHitPart()) {
          
          return false;
        }
        if (!hasHadDodge()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_ROBOT_HIT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 SourceId = 1;
      private int sourceId_ ;
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *开火者
       * </pre>
       */
      public boolean hasSourceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *开火者
       * </pre>
       */
      public int getSourceId() {
        return sourceId_;
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *开火者
       * </pre>
       */
      public Builder setSourceId(int value) {
        bitField0_ |= 0x00000001;
        sourceId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 SourceId = 1;</code>
       *
       * <pre>
       *开火者
       * </pre>
       */
      public Builder clearSourceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sourceId_ = 0;
        
        return this;
      }

      // required uint32 TargetId = 2;
      private int targetId_ ;
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000002;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 TargetId = 2;</code>
       *
       * <pre>
       *命中目标
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        
        return this;
      }

      // required uint32 HitPart = 3;
      private int hitPart_ ;
      /**
       * <code>required uint32 HitPart = 3;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public boolean hasHitPart() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 HitPart = 3;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public int getHitPart() {
        return hitPart_;
      }
      /**
       * <code>required uint32 HitPart = 3;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public Builder setHitPart(int value) {
        bitField0_ |= 0x00000004;
        hitPart_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 HitPart = 3;</code>
       *
       * <pre>
       *命中部位 0前,1侧,2后
       * </pre>
       */
      public Builder clearHitPart() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hitPart_ = 0;
        
        return this;
      }

      // required bool hadDodge = 4;
      private boolean hadDodge_ ;
      /**
       * <code>required bool hadDodge = 4;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean hasHadDodge() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool hadDodge = 4;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean getHadDodge() {
        return hadDodge_;
      }
      /**
       * <code>required bool hadDodge = 4;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder setHadDodge(boolean value) {
        bitField0_ |= 0x00000008;
        hadDodge_ = value;
        
        return this;
      }
      /**
       * <code>required bool hadDodge = 4;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder clearHadDodge() {
        bitField0_ = (bitField0_ & ~0x00000008);
        hadDodge_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_ROBOT_HIT_MSG)
    }

    static {
      defaultInstance = new CTS_ROBOT_HIT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_ROBOT_HIT_MSG)
  }

  public interface STC_HOLD_FLAG_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 teamId = 1;
    /**
     * <code>required uint32 teamId = 1;</code>
     *
     * <pre>
     *占领方 1:红 2: 蓝
     * </pre>
     */
    boolean hasTeamId();
    /**
     * <code>required uint32 teamId = 1;</code>
     *
     * <pre>
     *占领方 1:红 2: 蓝
     * </pre>
     */
    int getTeamId();

    // required uint32 currTime = 2;
    /**
     * <code>required uint32 currTime = 2;</code>
     *
     * <pre>
     *当前占领秒数
     * </pre>
     */
    boolean hasCurrTime();
    /**
     * <code>required uint32 currTime = 2;</code>
     *
     * <pre>
     *当前占领秒数
     * </pre>
     */
    int getCurrTime();

    // required uint32 endTime = 3;
    /**
     * <code>required uint32 endTime = 3;</code>
     *
     * <pre>
     *最大结束秒数
     * </pre>
     */
    boolean hasEndTime();
    /**
     * <code>required uint32 endTime = 3;</code>
     *
     * <pre>
     *最大结束秒数
     * </pre>
     */
    int getEndTime();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_HOLD_FLAG_MSG}
   *
   * <pre>
   *战旗时间
   * </pre>
   */
  public static final class STC_HOLD_FLAG_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_HOLD_FLAG_MSGOrBuilder {
    // Use STC_HOLD_FLAG_MSG.newBuilder() to construct.
    private STC_HOLD_FLAG_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_HOLD_FLAG_MSG(boolean noInit) {}

    private static final STC_HOLD_FLAG_MSG defaultInstance;
    public static STC_HOLD_FLAG_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_HOLD_FLAG_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_HOLD_FLAG_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              teamId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currTime_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              endTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_HOLD_FLAG_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_HOLD_FLAG_MSG>() {
      public STC_HOLD_FLAG_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_HOLD_FLAG_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_HOLD_FLAG_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 teamId = 1;
    public static final int TEAMID_FIELD_NUMBER = 1;
    private int teamId_;
    /**
     * <code>required uint32 teamId = 1;</code>
     *
     * <pre>
     *占领方 1:红 2: 蓝
     * </pre>
     */
    public boolean hasTeamId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 teamId = 1;</code>
     *
     * <pre>
     *占领方 1:红 2: 蓝
     * </pre>
     */
    public int getTeamId() {
      return teamId_;
    }

    // required uint32 currTime = 2;
    public static final int CURRTIME_FIELD_NUMBER = 2;
    private int currTime_;
    /**
     * <code>required uint32 currTime = 2;</code>
     *
     * <pre>
     *当前占领秒数
     * </pre>
     */
    public boolean hasCurrTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 currTime = 2;</code>
     *
     * <pre>
     *当前占领秒数
     * </pre>
     */
    public int getCurrTime() {
      return currTime_;
    }

    // required uint32 endTime = 3;
    public static final int ENDTIME_FIELD_NUMBER = 3;
    private int endTime_;
    /**
     * <code>required uint32 endTime = 3;</code>
     *
     * <pre>
     *最大结束秒数
     * </pre>
     */
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 endTime = 3;</code>
     *
     * <pre>
     *最大结束秒数
     * </pre>
     */
    public int getEndTime() {
      return endTime_;
    }

    private void initFields() {
      teamId_ = 0;
      currTime_ = 0;
      endTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTeamId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCurrTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEndTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, teamId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, currTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, endTime_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, teamId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, currTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, endTime_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_HOLD_FLAG_MSG}
     *
     * <pre>
     *战旗时间
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        teamId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        endTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.teamId_ = teamId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currTime_ = currTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.endTime_ = endTime_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG.getDefaultInstance()) return this;
        if (other.hasTeamId()) {
          setTeamId(other.getTeamId());
        }
        if (other.hasCurrTime()) {
          setCurrTime(other.getCurrTime());
        }
        if (other.hasEndTime()) {
          setEndTime(other.getEndTime());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTeamId()) {
          
          return false;
        }
        if (!hasCurrTime()) {
          
          return false;
        }
        if (!hasEndTime()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_HOLD_FLAG_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 teamId = 1;
      private int teamId_ ;
      /**
       * <code>required uint32 teamId = 1;</code>
       *
       * <pre>
       *占领方 1:红 2: 蓝
       * </pre>
       */
      public boolean hasTeamId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 teamId = 1;</code>
       *
       * <pre>
       *占领方 1:红 2: 蓝
       * </pre>
       */
      public int getTeamId() {
        return teamId_;
      }
      /**
       * <code>required uint32 teamId = 1;</code>
       *
       * <pre>
       *占领方 1:红 2: 蓝
       * </pre>
       */
      public Builder setTeamId(int value) {
        bitField0_ |= 0x00000001;
        teamId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 teamId = 1;</code>
       *
       * <pre>
       *占领方 1:红 2: 蓝
       * </pre>
       */
      public Builder clearTeamId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        teamId_ = 0;
        
        return this;
      }

      // required uint32 currTime = 2;
      private int currTime_ ;
      /**
       * <code>required uint32 currTime = 2;</code>
       *
       * <pre>
       *当前占领秒数
       * </pre>
       */
      public boolean hasCurrTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 currTime = 2;</code>
       *
       * <pre>
       *当前占领秒数
       * </pre>
       */
      public int getCurrTime() {
        return currTime_;
      }
      /**
       * <code>required uint32 currTime = 2;</code>
       *
       * <pre>
       *当前占领秒数
       * </pre>
       */
      public Builder setCurrTime(int value) {
        bitField0_ |= 0x00000002;
        currTime_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 currTime = 2;</code>
       *
       * <pre>
       *当前占领秒数
       * </pre>
       */
      public Builder clearCurrTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currTime_ = 0;
        
        return this;
      }

      // required uint32 endTime = 3;
      private int endTime_ ;
      /**
       * <code>required uint32 endTime = 3;</code>
       *
       * <pre>
       *最大结束秒数
       * </pre>
       */
      public boolean hasEndTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 endTime = 3;</code>
       *
       * <pre>
       *最大结束秒数
       * </pre>
       */
      public int getEndTime() {
        return endTime_;
      }
      /**
       * <code>required uint32 endTime = 3;</code>
       *
       * <pre>
       *最大结束秒数
       * </pre>
       */
      public Builder setEndTime(int value) {
        bitField0_ |= 0x00000004;
        endTime_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 endTime = 3;</code>
       *
       * <pre>
       *最大结束秒数
       * </pre>
       */
      public Builder clearEndTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        endTime_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_HOLD_FLAG_MSG)
    }

    static {
      defaultInstance = new STC_HOLD_FLAG_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_HOLD_FLAG_MSG)
  }

  public interface STC_KILL_TIPS_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 tankId = 1;
    /**
     * <code>required uint32 tankId = 1;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    boolean hasTankId();
    /**
     * <code>required uint32 tankId = 1;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    int getTankId();

    // required string userName = 2;
    /**
     * <code>required string userName = 2;</code>
     *
     * <pre>
     *玩家名称
     * </pre>
     */
    boolean hasUserName();
    /**
     * <code>required string userName = 2;</code>
     *
     * <pre>
     *玩家名称
     * </pre>
     */
    java.lang.String getUserName();
    /**
     * <code>required string userName = 2;</code>
     *
     * <pre>
     *玩家名称
     * </pre>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    // required uint32 team = 3;
    /**
     * <code>required uint32 team = 3;</code>
     *
     * <pre>
     *所属团队 1：红 2：蓝
     * </pre>
     */
    boolean hasTeam();
    /**
     * <code>required uint32 team = 3;</code>
     *
     * <pre>
     *所属团队 1：红 2：蓝
     * </pre>
     */
    int getTeam();

    // required uint32 dieTankId = 4;
    /**
     * <code>required uint32 dieTankId = 4;</code>
     *
     * <pre>
     *被击杀坦克模板ID
     * </pre>
     */
    boolean hasDieTankId();
    /**
     * <code>required uint32 dieTankId = 4;</code>
     *
     * <pre>
     *被击杀坦克模板ID
     * </pre>
     */
    int getDieTankId();

    // required .PROTO_BATTLE.TipType tipType = 5;
    /**
     * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
     *
     * <pre>
     *提示类型
     * </pre>
     */
    boolean hasTipType();
    /**
     * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
     *
     * <pre>
     *提示类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.TipType getTipType();

    // required string dieName = 6;
    /**
     * <code>required string dieName = 6;</code>
     *
     * <pre>
     *死亡玩家名称
     * </pre>
     */
    boolean hasDieName();
    /**
     * <code>required string dieName = 6;</code>
     *
     * <pre>
     *死亡玩家名称
     * </pre>
     */
    java.lang.String getDieName();
    /**
     * <code>required string dieName = 6;</code>
     *
     * <pre>
     *死亡玩家名称
     * </pre>
     */
    com.google.protobuf.ByteString
        getDieNameBytes();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_KILL_TIPS_MSG}
   *
   * <pre>
   *击杀提示
   * </pre>
   */
  public static final class STC_KILL_TIPS_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_KILL_TIPS_MSGOrBuilder {
    // Use STC_KILL_TIPS_MSG.newBuilder() to construct.
    private STC_KILL_TIPS_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_KILL_TIPS_MSG(boolean noInit) {}

    private static final STC_KILL_TIPS_MSG defaultInstance;
    public static STC_KILL_TIPS_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_KILL_TIPS_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_KILL_TIPS_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tankId_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              userName_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              team_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              dieTankId_ = input.readUInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.TipType value = com.ourpalm.tank.message.BATTLE_MSG.TipType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000010;
                tipType_ = value;
              }
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              dieName_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_KILL_TIPS_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_KILL_TIPS_MSG>() {
      public STC_KILL_TIPS_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_KILL_TIPS_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_KILL_TIPS_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 tankId = 1;
    public static final int TANKID_FIELD_NUMBER = 1;
    private int tankId_;
    /**
     * <code>required uint32 tankId = 1;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    public boolean hasTankId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 tankId = 1;</code>
     *
     * <pre>
     *坦克模板ID
     * </pre>
     */
    public int getTankId() {
      return tankId_;
    }

    // required string userName = 2;
    public static final int USERNAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>required string userName = 2;</code>
     *
     * <pre>
     *玩家名称
     * </pre>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string userName = 2;</code>
     *
     * <pre>
     *玩家名称
     * </pre>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string userName = 2;</code>
     *
     * <pre>
     *玩家名称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint32 team = 3;
    public static final int TEAM_FIELD_NUMBER = 3;
    private int team_;
    /**
     * <code>required uint32 team = 3;</code>
     *
     * <pre>
     *所属团队 1：红 2：蓝
     * </pre>
     */
    public boolean hasTeam() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 team = 3;</code>
     *
     * <pre>
     *所属团队 1：红 2：蓝
     * </pre>
     */
    public int getTeam() {
      return team_;
    }

    // required uint32 dieTankId = 4;
    public static final int DIETANKID_FIELD_NUMBER = 4;
    private int dieTankId_;
    /**
     * <code>required uint32 dieTankId = 4;</code>
     *
     * <pre>
     *被击杀坦克模板ID
     * </pre>
     */
    public boolean hasDieTankId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 dieTankId = 4;</code>
     *
     * <pre>
     *被击杀坦克模板ID
     * </pre>
     */
    public int getDieTankId() {
      return dieTankId_;
    }

    // required .PROTO_BATTLE.TipType tipType = 5;
    public static final int TIPTYPE_FIELD_NUMBER = 5;
    private com.ourpalm.tank.message.BATTLE_MSG.TipType tipType_;
    /**
     * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
     *
     * <pre>
     *提示类型
     * </pre>
     */
    public boolean hasTipType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
     *
     * <pre>
     *提示类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.TipType getTipType() {
      return tipType_;
    }

    // required string dieName = 6;
    public static final int DIENAME_FIELD_NUMBER = 6;
    private java.lang.Object dieName_;
    /**
     * <code>required string dieName = 6;</code>
     *
     * <pre>
     *死亡玩家名称
     * </pre>
     */
    public boolean hasDieName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required string dieName = 6;</code>
     *
     * <pre>
     *死亡玩家名称
     * </pre>
     */
    public java.lang.String getDieName() {
      java.lang.Object ref = dieName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          dieName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string dieName = 6;</code>
     *
     * <pre>
     *死亡玩家名称
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDieNameBytes() {
      java.lang.Object ref = dieName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dieName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      tankId_ = 0;
      userName_ = "";
      team_ = 0;
      dieTankId_ = 0;
      tipType_ = com.ourpalm.tank.message.BATTLE_MSG.TipType.kill;
      dieName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTankId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUserName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTeam()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDieTankId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTipType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDieName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, tankId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, team_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, dieTankId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, tipType_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getDieNameBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, tankId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, team_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, dieTankId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, tipType_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getDieNameBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_KILL_TIPS_MSG}
     *
     * <pre>
     *击杀提示
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tankId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        team_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        dieTankId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        tipType_ = com.ourpalm.tank.message.BATTLE_MSG.TipType.kill;
        bitField0_ = (bitField0_ & ~0x00000010);
        dieName_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tankId_ = tankId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.team_ = team_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.dieTankId_ = dieTankId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.tipType_ = tipType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dieName_ = dieName_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG.getDefaultInstance()) return this;
        if (other.hasTankId()) {
          setTankId(other.getTankId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          
        }
        if (other.hasTeam()) {
          setTeam(other.getTeam());
        }
        if (other.hasDieTankId()) {
          setDieTankId(other.getDieTankId());
        }
        if (other.hasTipType()) {
          setTipType(other.getTipType());
        }
        if (other.hasDieName()) {
          bitField0_ |= 0x00000020;
          dieName_ = other.dieName_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTankId()) {
          
          return false;
        }
        if (!hasUserName()) {
          
          return false;
        }
        if (!hasTeam()) {
          
          return false;
        }
        if (!hasDieTankId()) {
          
          return false;
        }
        if (!hasTipType()) {
          
          return false;
        }
        if (!hasDieName()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_KILL_TIPS_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 tankId = 1;
      private int tankId_ ;
      /**
       * <code>required uint32 tankId = 1;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public boolean hasTankId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 tankId = 1;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public int getTankId() {
        return tankId_;
      }
      /**
       * <code>required uint32 tankId = 1;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public Builder setTankId(int value) {
        bitField0_ |= 0x00000001;
        tankId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 tankId = 1;</code>
       *
       * <pre>
       *坦克模板ID
       * </pre>
       */
      public Builder clearTankId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tankId_ = 0;
        
        return this;
      }

      // required string userName = 2;
      private java.lang.Object userName_ = "";
      /**
       * <code>required string userName = 2;</code>
       *
       * <pre>
       *玩家名称
       * </pre>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string userName = 2;</code>
       *
       * <pre>
       *玩家名称
       * </pre>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string userName = 2;</code>
       *
       * <pre>
       *玩家名称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string userName = 2;</code>
       *
       * <pre>
       *玩家名称
       * </pre>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        
        return this;
      }
      /**
       * <code>required string userName = 2;</code>
       *
       * <pre>
       *玩家名称
       * </pre>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        
        return this;
      }
      /**
       * <code>required string userName = 2;</code>
       *
       * <pre>
       *玩家名称
       * </pre>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        
        return this;
      }

      // required uint32 team = 3;
      private int team_ ;
      /**
       * <code>required uint32 team = 3;</code>
       *
       * <pre>
       *所属团队 1：红 2：蓝
       * </pre>
       */
      public boolean hasTeam() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 team = 3;</code>
       *
       * <pre>
       *所属团队 1：红 2：蓝
       * </pre>
       */
      public int getTeam() {
        return team_;
      }
      /**
       * <code>required uint32 team = 3;</code>
       *
       * <pre>
       *所属团队 1：红 2：蓝
       * </pre>
       */
      public Builder setTeam(int value) {
        bitField0_ |= 0x00000004;
        team_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 team = 3;</code>
       *
       * <pre>
       *所属团队 1：红 2：蓝
       * </pre>
       */
      public Builder clearTeam() {
        bitField0_ = (bitField0_ & ~0x00000004);
        team_ = 0;
        
        return this;
      }

      // required uint32 dieTankId = 4;
      private int dieTankId_ ;
      /**
       * <code>required uint32 dieTankId = 4;</code>
       *
       * <pre>
       *被击杀坦克模板ID
       * </pre>
       */
      public boolean hasDieTankId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 dieTankId = 4;</code>
       *
       * <pre>
       *被击杀坦克模板ID
       * </pre>
       */
      public int getDieTankId() {
        return dieTankId_;
      }
      /**
       * <code>required uint32 dieTankId = 4;</code>
       *
       * <pre>
       *被击杀坦克模板ID
       * </pre>
       */
      public Builder setDieTankId(int value) {
        bitField0_ |= 0x00000008;
        dieTankId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 dieTankId = 4;</code>
       *
       * <pre>
       *被击杀坦克模板ID
       * </pre>
       */
      public Builder clearDieTankId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dieTankId_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.TipType tipType = 5;
      private com.ourpalm.tank.message.BATTLE_MSG.TipType tipType_ = com.ourpalm.tank.message.BATTLE_MSG.TipType.kill;
      /**
       * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
       *
       * <pre>
       *提示类型
       * </pre>
       */
      public boolean hasTipType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
       *
       * <pre>
       *提示类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.TipType getTipType() {
        return tipType_;
      }
      /**
       * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
       *
       * <pre>
       *提示类型
       * </pre>
       */
      public Builder setTipType(com.ourpalm.tank.message.BATTLE_MSG.TipType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        tipType_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.TipType tipType = 5;</code>
       *
       * <pre>
       *提示类型
       * </pre>
       */
      public Builder clearTipType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        tipType_ = com.ourpalm.tank.message.BATTLE_MSG.TipType.kill;
        
        return this;
      }

      // required string dieName = 6;
      private java.lang.Object dieName_ = "";
      /**
       * <code>required string dieName = 6;</code>
       *
       * <pre>
       *死亡玩家名称
       * </pre>
       */
      public boolean hasDieName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required string dieName = 6;</code>
       *
       * <pre>
       *死亡玩家名称
       * </pre>
       */
      public java.lang.String getDieName() {
        java.lang.Object ref = dieName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          dieName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string dieName = 6;</code>
       *
       * <pre>
       *死亡玩家名称
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDieNameBytes() {
        java.lang.Object ref = dieName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          dieName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string dieName = 6;</code>
       *
       * <pre>
       *死亡玩家名称
       * </pre>
       */
      public Builder setDieName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        dieName_ = value;
        
        return this;
      }
      /**
       * <code>required string dieName = 6;</code>
       *
       * <pre>
       *死亡玩家名称
       * </pre>
       */
      public Builder clearDieName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dieName_ = getDefaultInstance().getDieName();
        
        return this;
      }
      /**
       * <code>required string dieName = 6;</code>
       *
       * <pre>
       *死亡玩家名称
       * </pre>
       */
      public Builder setDieNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        dieName_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_KILL_TIPS_MSG)
    }

    static {
      defaultInstance = new STC_KILL_TIPS_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_KILL_TIPS_MSG)
  }

  public interface CTS_USE_WAR_GOODS_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    int getId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_USE_WAR_GOODS_MSG}
   */
  public static final class CTS_USE_WAR_GOODS_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_USE_WAR_GOODS_MSGOrBuilder {
    // Use CTS_USE_WAR_GOODS_MSG.newBuilder() to construct.
    private CTS_USE_WAR_GOODS_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_USE_WAR_GOODS_MSG(boolean noInit) {}

    private static final CTS_USE_WAR_GOODS_MSG defaultInstance;
    public static CTS_USE_WAR_GOODS_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_USE_WAR_GOODS_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_USE_WAR_GOODS_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_USE_WAR_GOODS_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_USE_WAR_GOODS_MSG>() {
      public CTS_USE_WAR_GOODS_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_USE_WAR_GOODS_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_USE_WAR_GOODS_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    private void initFields() {
      id_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_USE_WAR_GOODS_MSG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_WAR_GOODS_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_USE_WAR_GOODS_MSG)
    }

    static {
      defaultInstance = new CTS_USE_WAR_GOODS_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_USE_WAR_GOODS_MSG)
  }

  public interface STC_USE_WAR_GOODS_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 result = 1;
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    int getResult();

    // optional string info = 2;
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    boolean hasInfo();
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    java.lang.String getInfo();
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    com.google.protobuf.ByteString
        getInfoBytes();

    // optional uint32 id = 3;
    /**
     * <code>optional uint32 id = 3;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional uint32 id = 3;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    int getId();

    // optional uint32 num = 4;
    /**
     * <code>optional uint32 num = 4;</code>
     *
     * <pre>
     *剩余数量
     * </pre>
     */
    boolean hasNum();
    /**
     * <code>optional uint32 num = 4;</code>
     *
     * <pre>
     *剩余数量
     * </pre>
     */
    int getNum();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_USE_WAR_GOODS_MSG}
   */
  public static final class STC_USE_WAR_GOODS_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_USE_WAR_GOODS_MSGOrBuilder {
    // Use STC_USE_WAR_GOODS_MSG.newBuilder() to construct.
    private STC_USE_WAR_GOODS_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_USE_WAR_GOODS_MSG(boolean noInit) {}

    private static final STC_USE_WAR_GOODS_MSG defaultInstance;
    public static STC_USE_WAR_GOODS_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_USE_WAR_GOODS_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_USE_WAR_GOODS_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              result_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              info_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              id_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              num_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_USE_WAR_GOODS_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_USE_WAR_GOODS_MSG>() {
      public STC_USE_WAR_GOODS_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_USE_WAR_GOODS_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_USE_WAR_GOODS_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private int result_;
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    // optional string info = 2;
    public static final int INFO_FIELD_NUMBER = 2;
    private java.lang.Object info_;
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    public java.lang.String getInfo() {
      java.lang.Object ref = info_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          info_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInfoBytes() {
      java.lang.Object ref = info_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        info_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 id = 3;
    public static final int ID_FIELD_NUMBER = 3;
    private int id_;
    /**
     * <code>optional uint32 id = 3;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 id = 3;</code>
     *
     * <pre>
     *道具id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // optional uint32 num = 4;
    public static final int NUM_FIELD_NUMBER = 4;
    private int num_;
    /**
     * <code>optional uint32 num = 4;</code>
     *
     * <pre>
     *剩余数量
     * </pre>
     */
    public boolean hasNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 num = 4;</code>
     *
     * <pre>
     *剩余数量
     * </pre>
     */
    public int getNum() {
      return num_;
    }

    private void initFields() {
      result_ = 0;
      info_ = "";
      id_ = 0;
      num_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, result_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getInfoBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, id_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, num_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, result_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getInfoBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, id_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, num_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_USE_WAR_GOODS_MSG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        info_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        num_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.info_ = info_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.num_ = num_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasInfo()) {
          bitField0_ |= 0x00000002;
          info_ = other.info_;
          
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasNum()) {
          setNum(other.getNum());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_GOODS_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 result = 1;
      private int result_ ;
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000001;
        result_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = 0;
        
        return this;
      }

      // optional string info = 2;
      private java.lang.Object info_ = "";
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public java.lang.String getInfo() {
        java.lang.Object ref = info_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          info_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInfoBytes() {
        java.lang.Object ref = info_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          info_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public Builder setInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        info_ = value;
        
        return this;
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public Builder clearInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        info_ = getDefaultInstance().getInfo();
        
        return this;
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public Builder setInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        info_ = value;
        
        return this;
      }

      // optional uint32 id = 3;
      private int id_ ;
      /**
       * <code>optional uint32 id = 3;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 id = 3;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional uint32 id = 3;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000004;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 id = 3;</code>
       *
       * <pre>
       *道具id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        id_ = 0;
        
        return this;
      }

      // optional uint32 num = 4;
      private int num_ ;
      /**
       * <code>optional uint32 num = 4;</code>
       *
       * <pre>
       *剩余数量
       * </pre>
       */
      public boolean hasNum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 num = 4;</code>
       *
       * <pre>
       *剩余数量
       * </pre>
       */
      public int getNum() {
        return num_;
      }
      /**
       * <code>optional uint32 num = 4;</code>
       *
       * <pre>
       *剩余数量
       * </pre>
       */
      public Builder setNum(int value) {
        bitField0_ |= 0x00000008;
        num_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 num = 4;</code>
       *
       * <pre>
       *剩余数量
       * </pre>
       */
      public Builder clearNum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        num_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_USE_WAR_GOODS_MSG)
    }

    static {
      defaultInstance = new STC_USE_WAR_GOODS_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_USE_WAR_GOODS_MSG)
  }

  public interface STC_USE_WAR_EFFECT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    int getId();

    // required uint32 goodsId = 2;
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *使用物品id
     * </pre>
     */
    boolean hasGoodsId();
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *使用物品id
     * </pre>
     */
    int getGoodsId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_USE_WAR_EFFECT_MSG}
   *
   * <pre>
   *广播使用效果
   * </pre>
   */
  public static final class STC_USE_WAR_EFFECT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_USE_WAR_EFFECT_MSGOrBuilder {
    // Use STC_USE_WAR_EFFECT_MSG.newBuilder() to construct.
    private STC_USE_WAR_EFFECT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_USE_WAR_EFFECT_MSG(boolean noInit) {}

    private static final STC_USE_WAR_EFFECT_MSG defaultInstance;
    public static STC_USE_WAR_EFFECT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_USE_WAR_EFFECT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_USE_WAR_EFFECT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              goodsId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_USE_WAR_EFFECT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_USE_WAR_EFFECT_MSG>() {
      public STC_USE_WAR_EFFECT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_USE_WAR_EFFECT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_USE_WAR_EFFECT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 goodsId = 2;
    public static final int GOODSID_FIELD_NUMBER = 2;
    private int goodsId_;
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *使用物品id
     * </pre>
     */
    public boolean hasGoodsId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *使用物品id
     * </pre>
     */
    public int getGoodsId() {
      return goodsId_;
    }

    private void initFields() {
      id_ = 0;
      goodsId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGoodsId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, goodsId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, goodsId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_USE_WAR_EFFECT_MSG}
     *
     * <pre>
     *广播使用效果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        goodsId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.goodsId_ = goodsId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasGoodsId()) {
          setGoodsId(other.getGoodsId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasGoodsId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_USE_WAR_EFFECT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 goodsId = 2;
      private int goodsId_ ;
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *使用物品id
       * </pre>
       */
      public boolean hasGoodsId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *使用物品id
       * </pre>
       */
      public int getGoodsId() {
        return goodsId_;
      }
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *使用物品id
       * </pre>
       */
      public Builder setGoodsId(int value) {
        bitField0_ |= 0x00000002;
        goodsId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *使用物品id
       * </pre>
       */
      public Builder clearGoodsId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        goodsId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_USE_WAR_EFFECT_MSG)
    }

    static {
      defaultInstance = new STC_USE_WAR_EFFECT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_USE_WAR_EFFECT_MSG)
  }

  public interface STC_MINE_BOMB_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    int getId();

    // required uint32 goodsId = 2;
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    boolean hasGoodsId();
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    int getGoodsId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_MINE_BOMB_MSG}
   */
  public static final class STC_MINE_BOMB_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_MINE_BOMB_MSGOrBuilder {
    // Use STC_MINE_BOMB_MSG.newBuilder() to construct.
    private STC_MINE_BOMB_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_MINE_BOMB_MSG(boolean noInit) {}

    private static final STC_MINE_BOMB_MSG defaultInstance;
    public static STC_MINE_BOMB_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_MINE_BOMB_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_MINE_BOMB_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              goodsId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_MINE_BOMB_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_MINE_BOMB_MSG>() {
      public STC_MINE_BOMB_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_MINE_BOMB_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_MINE_BOMB_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 goodsId = 2;
    public static final int GOODSID_FIELD_NUMBER = 2;
    private int goodsId_;
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    public boolean hasGoodsId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 goodsId = 2;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    public int getGoodsId() {
      return goodsId_;
    }

    private void initFields() {
      id_ = 0;
      goodsId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGoodsId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, goodsId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, goodsId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_MINE_BOMB_MSG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        goodsId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.goodsId_ = goodsId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasGoodsId()) {
          setGoodsId(other.getGoodsId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasGoodsId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_BOMB_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 goodsId = 2;
      private int goodsId_ ;
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public boolean hasGoodsId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public int getGoodsId() {
        return goodsId_;
      }
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public Builder setGoodsId(int value) {
        bitField0_ |= 0x00000002;
        goodsId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 goodsId = 2;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public Builder clearGoodsId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        goodsId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_MINE_BOMB_MSG)
    }

    static {
      defaultInstance = new STC_MINE_BOMB_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_MINE_BOMB_MSG)
  }

  public interface STC_MINE_LOCATION_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    int getId();

    // required uint32 team = 2;
    /**
     * <code>required uint32 team = 2;</code>
     *
     * <pre>
     *队伍类型 1:红方 2:蓝方
     * </pre>
     */
    boolean hasTeam();
    /**
     * <code>required uint32 team = 2;</code>
     *
     * <pre>
     *队伍类型 1:红方 2:蓝方
     * </pre>
     */
    int getTeam();

    // required uint32 goodsId = 3;
    /**
     * <code>required uint32 goodsId = 3;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    boolean hasGoodsId();
    /**
     * <code>required uint32 goodsId = 3;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    int getGoodsId();

    // required float x = 4;
    /**
     * <code>required float x = 4;</code>
     */
    boolean hasX();
    /**
     * <code>required float x = 4;</code>
     */
    float getX();

    // required float y = 5;
    /**
     * <code>required float y = 5;</code>
     */
    boolean hasY();
    /**
     * <code>required float y = 5;</code>
     */
    float getY();

    // required float z = 6;
    /**
     * <code>required float z = 6;</code>
     */
    boolean hasZ();
    /**
     * <code>required float z = 6;</code>
     */
    float getZ();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_MINE_LOCATION_MSG}
   */
  public static final class STC_MINE_LOCATION_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_MINE_LOCATION_MSGOrBuilder {
    // Use STC_MINE_LOCATION_MSG.newBuilder() to construct.
    private STC_MINE_LOCATION_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_MINE_LOCATION_MSG(boolean noInit) {}

    private static final STC_MINE_LOCATION_MSG defaultInstance;
    public static STC_MINE_LOCATION_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_MINE_LOCATION_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_MINE_LOCATION_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              team_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              goodsId_ = input.readUInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              x_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              y_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              z_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_MINE_LOCATION_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_MINE_LOCATION_MSG>() {
      public STC_MINE_LOCATION_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_MINE_LOCATION_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_MINE_LOCATION_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *地雷实例id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 team = 2;
    public static final int TEAM_FIELD_NUMBER = 2;
    private int team_;
    /**
     * <code>required uint32 team = 2;</code>
     *
     * <pre>
     *队伍类型 1:红方 2:蓝方
     * </pre>
     */
    public boolean hasTeam() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 team = 2;</code>
     *
     * <pre>
     *队伍类型 1:红方 2:蓝方
     * </pre>
     */
    public int getTeam() {
      return team_;
    }

    // required uint32 goodsId = 3;
    public static final int GOODSID_FIELD_NUMBER = 3;
    private int goodsId_;
    /**
     * <code>required uint32 goodsId = 3;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    public boolean hasGoodsId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 goodsId = 3;</code>
     *
     * <pre>
     *爆炸地雷物品id
     * </pre>
     */
    public int getGoodsId() {
      return goodsId_;
    }

    // required float x = 4;
    public static final int X_FIELD_NUMBER = 4;
    private float x_;
    /**
     * <code>required float x = 4;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float x = 4;</code>
     */
    public float getX() {
      return x_;
    }

    // required float y = 5;
    public static final int Y_FIELD_NUMBER = 5;
    private float y_;
    /**
     * <code>required float y = 5;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float y = 5;</code>
     */
    public float getY() {
      return y_;
    }

    // required float z = 6;
    public static final int Z_FIELD_NUMBER = 6;
    private float z_;
    /**
     * <code>required float z = 6;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float z = 6;</code>
     */
    public float getZ() {
      return z_;
    }

    private void initFields() {
      id_ = 0;
      team_ = 0;
      goodsId_ = 0;
      x_ = 0F;
      y_ = 0F;
      z_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTeam()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGoodsId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, team_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, goodsId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, x_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, y_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, z_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, team_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, goodsId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, x_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, y_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, z_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_MINE_LOCATION_MSG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        team_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        goodsId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.team_ = team_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.goodsId_ = goodsId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.z_ = z_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasTeam()) {
          setTeam(other.getTeam());
        }
        if (other.hasGoodsId()) {
          setGoodsId(other.getGoodsId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasTeam()) {
          
          return false;
        }
        if (!hasGoodsId()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasZ()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_MINE_LOCATION_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *地雷实例id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 team = 2;
      private int team_ ;
      /**
       * <code>required uint32 team = 2;</code>
       *
       * <pre>
       *队伍类型 1:红方 2:蓝方
       * </pre>
       */
      public boolean hasTeam() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 team = 2;</code>
       *
       * <pre>
       *队伍类型 1:红方 2:蓝方
       * </pre>
       */
      public int getTeam() {
        return team_;
      }
      /**
       * <code>required uint32 team = 2;</code>
       *
       * <pre>
       *队伍类型 1:红方 2:蓝方
       * </pre>
       */
      public Builder setTeam(int value) {
        bitField0_ |= 0x00000002;
        team_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 team = 2;</code>
       *
       * <pre>
       *队伍类型 1:红方 2:蓝方
       * </pre>
       */
      public Builder clearTeam() {
        bitField0_ = (bitField0_ & ~0x00000002);
        team_ = 0;
        
        return this;
      }

      // required uint32 goodsId = 3;
      private int goodsId_ ;
      /**
       * <code>required uint32 goodsId = 3;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public boolean hasGoodsId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 goodsId = 3;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public int getGoodsId() {
        return goodsId_;
      }
      /**
       * <code>required uint32 goodsId = 3;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public Builder setGoodsId(int value) {
        bitField0_ |= 0x00000004;
        goodsId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 goodsId = 3;</code>
       *
       * <pre>
       *爆炸地雷物品id
       * </pre>
       */
      public Builder clearGoodsId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        goodsId_ = 0;
        
        return this;
      }

      // required float x = 4;
      private float x_ ;
      /**
       * <code>required float x = 4;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float x = 4;</code>
       */
      public float getX() {
        return x_;
      }
      /**
       * <code>required float x = 4;</code>
       */
      public Builder setX(float value) {
        bitField0_ |= 0x00000008;
        x_ = value;
        
        return this;
      }
      /**
       * <code>required float x = 4;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        x_ = 0F;
        
        return this;
      }

      // required float y = 5;
      private float y_ ;
      /**
       * <code>required float y = 5;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float y = 5;</code>
       */
      public float getY() {
        return y_;
      }
      /**
       * <code>required float y = 5;</code>
       */
      public Builder setY(float value) {
        bitField0_ |= 0x00000010;
        y_ = value;
        
        return this;
      }
      /**
       * <code>required float y = 5;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        y_ = 0F;
        
        return this;
      }

      // required float z = 6;
      private float z_ ;
      /**
       * <code>required float z = 6;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float z = 6;</code>
       */
      public float getZ() {
        return z_;
      }
      /**
       * <code>required float z = 6;</code>
       */
      public Builder setZ(float value) {
        bitField0_ |= 0x00000020;
        z_ = value;
        
        return this;
      }
      /**
       * <code>required float z = 6;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000020);
        z_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_MINE_LOCATION_MSG)
    }

    static {
      defaultInstance = new STC_MINE_LOCATION_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_MINE_LOCATION_MSG)
  }

  public interface CTS_USE_SKILL_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 skillId = 1;
    /**
     * <code>required uint32 skillId = 1;</code>
     *
     * <pre>
     *使用技能id
     * </pre>
     */
    boolean hasSkillId();
    /**
     * <code>required uint32 skillId = 1;</code>
     *
     * <pre>
     *使用技能id
     * </pre>
     */
    int getSkillId();

    // required uint32 targetId = 2;
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *目标坦克id
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *目标坦克id
     * </pre>
     */
    int getTargetId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.CTS_USE_SKILL_MSG}
   *
   * <pre>
   *使用技能
   * </pre>
   */
  public static final class CTS_USE_SKILL_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements CTS_USE_SKILL_MSGOrBuilder {
    // Use CTS_USE_SKILL_MSG.newBuilder() to construct.
    private CTS_USE_SKILL_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private CTS_USE_SKILL_MSG(boolean noInit) {}

    private static final CTS_USE_SKILL_MSG defaultInstance;
    public static CTS_USE_SKILL_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public CTS_USE_SKILL_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private CTS_USE_SKILL_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              skillId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CTS_USE_SKILL_MSG> PARSER =
        new com.google.protobuf.AbstractParser<CTS_USE_SKILL_MSG>() {
      public CTS_USE_SKILL_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CTS_USE_SKILL_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CTS_USE_SKILL_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 skillId = 1;
    public static final int SKILLID_FIELD_NUMBER = 1;
    private int skillId_;
    /**
     * <code>required uint32 skillId = 1;</code>
     *
     * <pre>
     *使用技能id
     * </pre>
     */
    public boolean hasSkillId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 skillId = 1;</code>
     *
     * <pre>
     *使用技能id
     * </pre>
     */
    public int getSkillId() {
      return skillId_;
    }

    // required uint32 targetId = 2;
    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *目标坦克id
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *目标坦克id
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    private void initFields() {
      skillId_ = 0;
      targetId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, skillId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, skillId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.CTS_USE_SKILL_MSG}
     *
     * <pre>
     *使用技能
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        skillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.skillId_ = skillId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetId_ = targetId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG.getDefaultInstance()) return this;
        if (other.hasSkillId()) {
          setSkillId(other.getSkillId());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSkillId()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.CTS_USE_SKILL_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 skillId = 1;
      private int skillId_ ;
      /**
       * <code>required uint32 skillId = 1;</code>
       *
       * <pre>
       *使用技能id
       * </pre>
       */
      public boolean hasSkillId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 skillId = 1;</code>
       *
       * <pre>
       *使用技能id
       * </pre>
       */
      public int getSkillId() {
        return skillId_;
      }
      /**
       * <code>required uint32 skillId = 1;</code>
       *
       * <pre>
       *使用技能id
       * </pre>
       */
      public Builder setSkillId(int value) {
        bitField0_ |= 0x00000001;
        skillId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 skillId = 1;</code>
       *
       * <pre>
       *使用技能id
       * </pre>
       */
      public Builder clearSkillId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        skillId_ = 0;
        
        return this;
      }

      // required uint32 targetId = 2;
      private int targetId_ ;
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *目标坦克id
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *目标坦克id
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *目标坦克id
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000002;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *目标坦克id
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.CTS_USE_SKILL_MSG)
    }

    static {
      defaultInstance = new CTS_USE_SKILL_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.CTS_USE_SKILL_MSG)
  }

  public interface STC_USE_SKILL_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 result = 1;
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    int getResult();

    // optional string info = 2;
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    boolean hasInfo();
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    java.lang.String getInfo();
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    com.google.protobuf.ByteString
        getInfoBytes();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_USE_SKILL_MSG}
   *
   * <pre>
   *使用技能返回
   * </pre>
   */
  public static final class STC_USE_SKILL_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_USE_SKILL_MSGOrBuilder {
    // Use STC_USE_SKILL_MSG.newBuilder() to construct.
    private STC_USE_SKILL_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_USE_SKILL_MSG(boolean noInit) {}

    private static final STC_USE_SKILL_MSG defaultInstance;
    public static STC_USE_SKILL_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_USE_SKILL_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_USE_SKILL_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              result_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              info_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_USE_SKILL_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_USE_SKILL_MSG>() {
      public STC_USE_SKILL_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_USE_SKILL_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_USE_SKILL_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private int result_;
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 result = 1;</code>
     *
     * <pre>
     *1:成功 0:失败
     * </pre>
     */
    public int getResult() {
      return result_;
    }

    // optional string info = 2;
    public static final int INFO_FIELD_NUMBER = 2;
    private java.lang.Object info_;
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    public java.lang.String getInfo() {
      java.lang.Object ref = info_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          info_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string info = 2;</code>
     *
     * <pre>
     *错误提示信息
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInfoBytes() {
      java.lang.Object ref = info_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        info_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      result_ = 0;
      info_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, result_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getInfoBytes());
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, result_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getInfoBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_USE_SKILL_MSG}
     *
     * <pre>
     *使用技能返回
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        info_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.info_ = info_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasInfo()) {
          bitField0_ |= 0x00000002;
          info_ = other.info_;
          
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 result = 1;
      private int result_ ;
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public int getResult() {
        return result_;
      }
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public Builder setResult(int value) {
        bitField0_ |= 0x00000001;
        result_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 result = 1;</code>
       *
       * <pre>
       *1:成功 0:失败
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = 0;
        
        return this;
      }

      // optional string info = 2;
      private java.lang.Object info_ = "";
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public java.lang.String getInfo() {
        java.lang.Object ref = info_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          info_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInfoBytes() {
        java.lang.Object ref = info_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          info_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public Builder setInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        info_ = value;
        
        return this;
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public Builder clearInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        info_ = getDefaultInstance().getInfo();
        
        return this;
      }
      /**
       * <code>optional string info = 2;</code>
       *
       * <pre>
       *错误提示信息
       * </pre>
       */
      public Builder setInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        info_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_USE_SKILL_MSG)
    }

    static {
      defaultInstance = new STC_USE_SKILL_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_USE_SKILL_MSG)
  }

  public interface STC_USE_SKILL_EFFECT_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    int getId();

    // required uint32 skillId = 2;
    /**
     * <code>required uint32 skillId = 2;</code>
     *
     * <pre>
     *触发技能id
     * </pre>
     */
    boolean hasSkillId();
    /**
     * <code>required uint32 skillId = 2;</code>
     *
     * <pre>
     *触发技能id
     * </pre>
     */
    int getSkillId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_USE_SKILL_EFFECT_MSG}
   */
  public static final class STC_USE_SKILL_EFFECT_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_USE_SKILL_EFFECT_MSGOrBuilder {
    // Use STC_USE_SKILL_EFFECT_MSG.newBuilder() to construct.
    private STC_USE_SKILL_EFFECT_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_USE_SKILL_EFFECT_MSG(boolean noInit) {}

    private static final STC_USE_SKILL_EFFECT_MSG defaultInstance;
    public static STC_USE_SKILL_EFFECT_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_USE_SKILL_EFFECT_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_USE_SKILL_EFFECT_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              skillId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_USE_SKILL_EFFECT_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_USE_SKILL_EFFECT_MSG>() {
      public STC_USE_SKILL_EFFECT_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_USE_SKILL_EFFECT_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_USE_SKILL_EFFECT_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 skillId = 2;
    public static final int SKILLID_FIELD_NUMBER = 2;
    private int skillId_;
    /**
     * <code>required uint32 skillId = 2;</code>
     *
     * <pre>
     *触发技能id
     * </pre>
     */
    public boolean hasSkillId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 skillId = 2;</code>
     *
     * <pre>
     *触发技能id
     * </pre>
     */
    public int getSkillId() {
      return skillId_;
    }

    private void initFields() {
      id_ = 0;
      skillId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkillId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, skillId_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, skillId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_USE_SKILL_EFFECT_MSG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        skillId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.skillId_ = skillId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasSkillId()) {
          setSkillId(other.getSkillId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasSkillId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_USE_SKILL_EFFECT_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 skillId = 2;
      private int skillId_ ;
      /**
       * <code>required uint32 skillId = 2;</code>
       *
       * <pre>
       *触发技能id
       * </pre>
       */
      public boolean hasSkillId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 skillId = 2;</code>
       *
       * <pre>
       *触发技能id
       * </pre>
       */
      public int getSkillId() {
        return skillId_;
      }
      /**
       * <code>required uint32 skillId = 2;</code>
       *
       * <pre>
       *触发技能id
       * </pre>
       */
      public Builder setSkillId(int value) {
        bitField0_ |= 0x00000002;
        skillId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 skillId = 2;</code>
       *
       * <pre>
       *触发技能id
       * </pre>
       */
      public Builder clearSkillId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        skillId_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_USE_SKILL_EFFECT_MSG)
    }

    static {
      defaultInstance = new STC_USE_SKILL_EFFECT_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_USE_SKILL_EFFECT_MSG)
  }

  public interface STC_USER_WAR_RECORD_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 kill = 1;
    /**
     * <code>required uint32 kill = 1;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    boolean hasKill();
    /**
     * <code>required uint32 kill = 1;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    int getKill();

    // required uint32 death = 2;
    /**
     * <code>required uint32 death = 2;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    boolean hasDeath();
    /**
     * <code>required uint32 death = 2;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    int getDeath();

    // required uint32 helpKill = 3;
    /**
     * <code>required uint32 helpKill = 3;</code>
     *
     * <pre>
     *助攻数 
     * </pre>
     */
    boolean hasHelpKill();
    /**
     * <code>required uint32 helpKill = 3;</code>
     *
     * <pre>
     *助攻数 
     * </pre>
     */
    int getHelpKill();

    // required uint32 aidKill = 4;
    /**
     * <code>required uint32 aidKill = 4;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    boolean hasAidKill();
    /**
     * <code>required uint32 aidKill = 4;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    int getAidKill();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_USER_WAR_RECORD_MSG}
   */
  public static final class STC_USER_WAR_RECORD_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_USER_WAR_RECORD_MSGOrBuilder {
    // Use STC_USER_WAR_RECORD_MSG.newBuilder() to construct.
    private STC_USER_WAR_RECORD_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_USER_WAR_RECORD_MSG(boolean noInit) {}

    private static final STC_USER_WAR_RECORD_MSG defaultInstance;
    public static STC_USER_WAR_RECORD_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_USER_WAR_RECORD_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_USER_WAR_RECORD_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              kill_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              death_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              helpKill_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              aidKill_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_USER_WAR_RECORD_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_USER_WAR_RECORD_MSG>() {
      public STC_USER_WAR_RECORD_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_USER_WAR_RECORD_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_USER_WAR_RECORD_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 kill = 1;
    public static final int KILL_FIELD_NUMBER = 1;
    private int kill_;
    /**
     * <code>required uint32 kill = 1;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    public boolean hasKill() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 kill = 1;</code>
     *
     * <pre>
     *击杀数
     * </pre>
     */
    public int getKill() {
      return kill_;
    }

    // required uint32 death = 2;
    public static final int DEATH_FIELD_NUMBER = 2;
    private int death_;
    /**
     * <code>required uint32 death = 2;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    public boolean hasDeath() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 death = 2;</code>
     *
     * <pre>
     *死亡数
     * </pre>
     */
    public int getDeath() {
      return death_;
    }

    // required uint32 helpKill = 3;
    public static final int HELPKILL_FIELD_NUMBER = 3;
    private int helpKill_;
    /**
     * <code>required uint32 helpKill = 3;</code>
     *
     * <pre>
     *助攻数 
     * </pre>
     */
    public boolean hasHelpKill() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 helpKill = 3;</code>
     *
     * <pre>
     *助攻数 
     * </pre>
     */
    public int getHelpKill() {
      return helpKill_;
    }

    // required uint32 aidKill = 4;
    public static final int AIDKILL_FIELD_NUMBER = 4;
    private int aidKill_;
    /**
     * <code>required uint32 aidKill = 4;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    public boolean hasAidKill() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 aidKill = 4;</code>
     *
     * <pre>
     *协助数
     * </pre>
     */
    public int getAidKill() {
      return aidKill_;
    }

    private void initFields() {
      kill_ = 0;
      death_ = 0;
      helpKill_ = 0;
      aidKill_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasKill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDeath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHelpKill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAidKill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, kill_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, death_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, helpKill_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, aidKill_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, kill_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, death_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, helpKill_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, aidKill_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_USER_WAR_RECORD_MSG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        death_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        helpKill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        aidKill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kill_ = kill_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.death_ = death_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.helpKill_ = helpKill_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.aidKill_ = aidKill_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG.getDefaultInstance()) return this;
        if (other.hasKill()) {
          setKill(other.getKill());
        }
        if (other.hasDeath()) {
          setDeath(other.getDeath());
        }
        if (other.hasHelpKill()) {
          setHelpKill(other.getHelpKill());
        }
        if (other.hasAidKill()) {
          setAidKill(other.getAidKill());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKill()) {
          
          return false;
        }
        if (!hasDeath()) {
          
          return false;
        }
        if (!hasHelpKill()) {
          
          return false;
        }
        if (!hasAidKill()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_USER_WAR_RECORD_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 kill = 1;
      private int kill_ ;
      /**
       * <code>required uint32 kill = 1;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public boolean hasKill() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 kill = 1;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public int getKill() {
        return kill_;
      }
      /**
       * <code>required uint32 kill = 1;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public Builder setKill(int value) {
        bitField0_ |= 0x00000001;
        kill_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 kill = 1;</code>
       *
       * <pre>
       *击杀数
       * </pre>
       */
      public Builder clearKill() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kill_ = 0;
        
        return this;
      }

      // required uint32 death = 2;
      private int death_ ;
      /**
       * <code>required uint32 death = 2;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public boolean hasDeath() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 death = 2;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public int getDeath() {
        return death_;
      }
      /**
       * <code>required uint32 death = 2;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public Builder setDeath(int value) {
        bitField0_ |= 0x00000002;
        death_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 death = 2;</code>
       *
       * <pre>
       *死亡数
       * </pre>
       */
      public Builder clearDeath() {
        bitField0_ = (bitField0_ & ~0x00000002);
        death_ = 0;
        
        return this;
      }

      // required uint32 helpKill = 3;
      private int helpKill_ ;
      /**
       * <code>required uint32 helpKill = 3;</code>
       *
       * <pre>
       *助攻数 
       * </pre>
       */
      public boolean hasHelpKill() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 helpKill = 3;</code>
       *
       * <pre>
       *助攻数 
       * </pre>
       */
      public int getHelpKill() {
        return helpKill_;
      }
      /**
       * <code>required uint32 helpKill = 3;</code>
       *
       * <pre>
       *助攻数 
       * </pre>
       */
      public Builder setHelpKill(int value) {
        bitField0_ |= 0x00000004;
        helpKill_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 helpKill = 3;</code>
       *
       * <pre>
       *助攻数 
       * </pre>
       */
      public Builder clearHelpKill() {
        bitField0_ = (bitField0_ & ~0x00000004);
        helpKill_ = 0;
        
        return this;
      }

      // required uint32 aidKill = 4;
      private int aidKill_ ;
      /**
       * <code>required uint32 aidKill = 4;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public boolean hasAidKill() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 aidKill = 4;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public int getAidKill() {
        return aidKill_;
      }
      /**
       * <code>required uint32 aidKill = 4;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public Builder setAidKill(int value) {
        bitField0_ |= 0x00000008;
        aidKill_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 aidKill = 4;</code>
       *
       * <pre>
       *协助数
       * </pre>
       */
      public Builder clearAidKill() {
        bitField0_ = (bitField0_ & ~0x00000008);
        aidKill_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_USER_WAR_RECORD_MSG)
    }

    static {
      defaultInstance = new STC_USER_WAR_RECORD_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_USER_WAR_RECORD_MSG)
  }

  public interface STC_AI_MOVE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    int getId();

    // required .PROTO_BATTLE.Coordinate3D position = 2;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition();

    // required uint32 target = 3;
    /**
     * <code>required uint32 target = 3;</code>
     *
     * <pre>
     *瞄准目标(0:为无目标)
     * </pre>
     */
    boolean hasTarget();
    /**
     * <code>required uint32 target = 3;</code>
     *
     * <pre>
     *瞄准目标(0:为无目标)
     * </pre>
     */
    int getTarget();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_AI_MOVE_MSG}
   *
   * <pre>
   *AI移动消息
   * </pre>
   */
  public static final class STC_AI_MOVE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_AI_MOVE_MSGOrBuilder {
    // Use STC_AI_MOVE_MSG.newBuilder() to construct.
    private STC_AI_MOVE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_AI_MOVE_MSG(boolean noInit) {}

    private static final STC_AI_MOVE_MSG defaultInstance;
    public static STC_AI_MOVE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_AI_MOVE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_AI_MOVE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              target_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_AI_MOVE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_AI_MOVE_MSG>() {
      public STC_AI_MOVE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_AI_MOVE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_AI_MOVE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *坦克实例ID
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required .PROTO_BATTLE.Coordinate3D position = 2;
    public static final int POSITION_FIELD_NUMBER = 2;
    private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_;
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
     *
     * <pre>
     *当前坐标
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
      return position_;
    }

    // required uint32 target = 3;
    public static final int TARGET_FIELD_NUMBER = 3;
    private int target_;
    /**
     * <code>required uint32 target = 3;</code>
     *
     * <pre>
     *瞄准目标(0:为无目标)
     * </pre>
     */
    public boolean hasTarget() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 target = 3;</code>
     *
     * <pre>
     *瞄准目标(0:为无目标)
     * </pre>
     */
    public int getTarget() {
      return target_;
    }

    private void initFields() {
      id_ = 0;
      position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      target_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTarget()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, target_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, target_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_AI_MOVE_MSG}
     *
     * <pre>
     *AI移动消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        target_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.target_ = target_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasTarget()) {
          setTarget(other.getTarget());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasTarget()) {
          
          return false;
        }
        if (!getPosition().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_AI_MOVE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *坦克实例ID
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.Coordinate3D position = 2;
      private com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D getPosition() {
        return position_;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder setPosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (value == null) {
          throw new NullPointerException();
        }
        position_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder setPosition(
          com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.Builder builderForValue) {
        position_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder mergePosition(com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            position_ != com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance()) {
          position_ =
            com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.newBuilder(position_).mergeFrom(value).buildPartial();
        } else {
          position_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.Coordinate3D position = 2;</code>
       *
       * <pre>
       *当前坐标
       * </pre>
       */
      public Builder clearPosition() {
        position_ = com.ourpalm.tank.message.BATTLE_MSG.Coordinate3D.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // required uint32 target = 3;
      private int target_ ;
      /**
       * <code>required uint32 target = 3;</code>
       *
       * <pre>
       *瞄准目标(0:为无目标)
       * </pre>
       */
      public boolean hasTarget() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 target = 3;</code>
       *
       * <pre>
       *瞄准目标(0:为无目标)
       * </pre>
       */
      public int getTarget() {
        return target_;
      }
      /**
       * <code>required uint32 target = 3;</code>
       *
       * <pre>
       *瞄准目标(0:为无目标)
       * </pre>
       */
      public Builder setTarget(int value) {
        bitField0_ |= 0x00000004;
        target_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 target = 3;</code>
       *
       * <pre>
       *瞄准目标(0:为无目标)
       * </pre>
       */
      public Builder clearTarget() {
        bitField0_ = (bitField0_ & ~0x00000004);
        target_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_AI_MOVE_MSG)
    }

    static {
      defaultInstance = new STC_AI_MOVE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_AI_MOVE_MSG)
  }

  public interface STC_AI_FIRE_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 sourceId = 1;
    /**
     * <code>required uint32 sourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    boolean hasSourceId();
    /**
     * <code>required uint32 sourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    int getSourceId();

    // required uint32 targetId = 2;
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    int getTargetId();

    // required .PROTO_BATTLE.FireType fireType = 3;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    boolean hasFireType();
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType();

    // required uint32 stdItem = 4;
    /**
     * <code>required uint32 stdItem = 4;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    boolean hasStdItem();
    /**
     * <code>required uint32 stdItem = 4;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    int getStdItem();

    // required bool hadDodge = 5;
    /**
     * <code>required bool hadDodge = 5;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean hasHadDodge();
    /**
     * <code>required bool hadDodge = 5;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    boolean getHadDodge();

    // required float skewX = 6;
    /**
     * <code>required float skewX = 6;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    boolean hasSkewX();
    /**
     * <code>required float skewX = 6;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    float getSkewX();

    // required float skewY = 7;
    /**
     * <code>required float skewY = 7;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    boolean hasSkewY();
    /**
     * <code>required float skewY = 7;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    float getSkewY();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_AI_FIRE_MSG}
   *
   * <pre>
   *AI命中消息
   * </pre>
   */
  public static final class STC_AI_FIRE_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_AI_FIRE_MSGOrBuilder {
    // Use STC_AI_FIRE_MSG.newBuilder() to construct.
    private STC_AI_FIRE_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_AI_FIRE_MSG(boolean noInit) {}

    private static final STC_AI_FIRE_MSG defaultInstance;
    public static STC_AI_FIRE_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_AI_FIRE_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_AI_FIRE_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sourceId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetId_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.ourpalm.tank.message.BATTLE_MSG.FireType value = com.ourpalm.tank.message.BATTLE_MSG.FireType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000004;
                fireType_ = value;
              }
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              stdItem_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              hadDodge_ = input.readBool();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              skewX_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              skewY_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_AI_FIRE_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_AI_FIRE_MSG>() {
      public STC_AI_FIRE_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_AI_FIRE_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_AI_FIRE_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 sourceId = 1;
    public static final int SOURCEID_FIELD_NUMBER = 1;
    private int sourceId_;
    /**
     * <code>required uint32 sourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    public boolean hasSourceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 sourceId = 1;</code>
     *
     * <pre>
     *攻击者
     * </pre>
     */
    public int getSourceId() {
      return sourceId_;
    }

    // required uint32 targetId = 2;
    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 targetId = 2;</code>
     *
     * <pre>
     *被攻击者
     * </pre>
     */
    public int getTargetId() {
      return targetId_;
    }

    // required .PROTO_BATTLE.FireType fireType = 3;
    public static final int FIRETYPE_FIELD_NUMBER = 3;
    private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_;
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public boolean hasFireType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
     *
     * <pre>
     *开炮类型
     * </pre>
     */
    public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
      return fireType_;
    }

    // required uint32 stdItem = 4;
    public static final int STDITEM_FIELD_NUMBER = 4;
    private int stdItem_;
    /**
     * <code>required uint32 stdItem = 4;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public boolean hasStdItem() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 stdItem = 4;</code>
     *
     * <pre>
     *使用的炮弹
     * </pre>
     */
    public int getStdItem() {
      return stdItem_;
    }

    // required bool hadDodge = 5;
    public static final int HADDODGE_FIELD_NUMBER = 5;
    private boolean hadDodge_;
    /**
     * <code>required bool hadDodge = 5;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean hasHadDodge() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool hadDodge = 5;</code>
     *
     * <pre>
     *是否跳弹
     * </pre>
     */
    public boolean getHadDodge() {
      return hadDodge_;
    }

    // required float skewX = 6;
    public static final int SKEWX_FIELD_NUMBER = 6;
    private float skewX_;
    /**
     * <code>required float skewX = 6;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public boolean hasSkewX() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float skewX = 6;</code>
     *
     * <pre>
     *偏移x
     * </pre>
     */
    public float getSkewX() {
      return skewX_;
    }

    // required float skewY = 7;
    public static final int SKEWY_FIELD_NUMBER = 7;
    private float skewY_;
    /**
     * <code>required float skewY = 7;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public boolean hasSkewY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float skewY = 7;</code>
     *
     * <pre>
     *偏移y
     * </pre>
     */
    public float getSkewY() {
      return skewY_;
    }

    private void initFields() {
      sourceId_ = 0;
      targetId_ = 0;
      fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      stdItem_ = 0;
      hadDodge_ = false;
      skewX_ = 0F;
      skewY_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasSourceId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTargetId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFireType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStdItem()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHadDodge()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkewY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, stdItem_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, hadDodge_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, skewX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, skewY_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, fireType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, stdItem_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, hadDodge_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, skewX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, skewY_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_AI_FIRE_MSG}
     *
     * <pre>
     *AI命中消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sourceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        bitField0_ = (bitField0_ & ~0x00000004);
        stdItem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        hadDodge_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        skewX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        skewY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sourceId_ = sourceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetId_ = targetId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.fireType_ = fireType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.stdItem_ = stdItem_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.hadDodge_ = hadDodge_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.skewX_ = skewX_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.skewY_ = skewY_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG.getDefaultInstance()) return this;
        if (other.hasSourceId()) {
          setSourceId(other.getSourceId());
        }
        if (other.hasTargetId()) {
          setTargetId(other.getTargetId());
        }
        if (other.hasFireType()) {
          setFireType(other.getFireType());
        }
        if (other.hasStdItem()) {
          setStdItem(other.getStdItem());
        }
        if (other.hasHadDodge()) {
          setHadDodge(other.getHadDodge());
        }
        if (other.hasSkewX()) {
          setSkewX(other.getSkewX());
        }
        if (other.hasSkewY()) {
          setSkewY(other.getSkewY());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSourceId()) {
          
          return false;
        }
        if (!hasTargetId()) {
          
          return false;
        }
        if (!hasFireType()) {
          
          return false;
        }
        if (!hasStdItem()) {
          
          return false;
        }
        if (!hasHadDodge()) {
          
          return false;
        }
        if (!hasSkewX()) {
          
          return false;
        }
        if (!hasSkewY()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_AI_FIRE_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 sourceId = 1;
      private int sourceId_ ;
      /**
       * <code>required uint32 sourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public boolean hasSourceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 sourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public int getSourceId() {
        return sourceId_;
      }
      /**
       * <code>required uint32 sourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public Builder setSourceId(int value) {
        bitField0_ |= 0x00000001;
        sourceId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 sourceId = 1;</code>
       *
       * <pre>
       *攻击者
       * </pre>
       */
      public Builder clearSourceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sourceId_ = 0;
        
        return this;
      }

      // required uint32 targetId = 2;
      private int targetId_ ;
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public boolean hasTargetId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public int getTargetId() {
        return targetId_;
      }
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public Builder setTargetId(int value) {
        bitField0_ |= 0x00000002;
        targetId_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 targetId = 2;</code>
       *
       * <pre>
       *被攻击者
       * </pre>
       */
      public Builder clearTargetId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetId_ = 0;
        
        return this;
      }

      // required .PROTO_BATTLE.FireType fireType = 3;
      private com.ourpalm.tank.message.BATTLE_MSG.FireType fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public boolean hasFireType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public com.ourpalm.tank.message.BATTLE_MSG.FireType getFireType() {
        return fireType_;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder setFireType(com.ourpalm.tank.message.BATTLE_MSG.FireType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        fireType_ = value;
        
        return this;
      }
      /**
       * <code>required .PROTO_BATTLE.FireType fireType = 3;</code>
       *
       * <pre>
       *开炮类型
       * </pre>
       */
      public Builder clearFireType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fireType_ = com.ourpalm.tank.message.BATTLE_MSG.FireType.fire;
        
        return this;
      }

      // required uint32 stdItem = 4;
      private int stdItem_ ;
      /**
       * <code>required uint32 stdItem = 4;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public boolean hasStdItem() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 stdItem = 4;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public int getStdItem() {
        return stdItem_;
      }
      /**
       * <code>required uint32 stdItem = 4;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder setStdItem(int value) {
        bitField0_ |= 0x00000008;
        stdItem_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 stdItem = 4;</code>
       *
       * <pre>
       *使用的炮弹
       * </pre>
       */
      public Builder clearStdItem() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stdItem_ = 0;
        
        return this;
      }

      // required bool hadDodge = 5;
      private boolean hadDodge_ ;
      /**
       * <code>required bool hadDodge = 5;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean hasHadDodge() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool hadDodge = 5;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public boolean getHadDodge() {
        return hadDodge_;
      }
      /**
       * <code>required bool hadDodge = 5;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder setHadDodge(boolean value) {
        bitField0_ |= 0x00000010;
        hadDodge_ = value;
        
        return this;
      }
      /**
       * <code>required bool hadDodge = 5;</code>
       *
       * <pre>
       *是否跳弹
       * </pre>
       */
      public Builder clearHadDodge() {
        bitField0_ = (bitField0_ & ~0x00000010);
        hadDodge_ = false;
        
        return this;
      }

      // required float skewX = 6;
      private float skewX_ ;
      /**
       * <code>required float skewX = 6;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public boolean hasSkewX() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float skewX = 6;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public float getSkewX() {
        return skewX_;
      }
      /**
       * <code>required float skewX = 6;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder setSkewX(float value) {
        bitField0_ |= 0x00000020;
        skewX_ = value;
        
        return this;
      }
      /**
       * <code>required float skewX = 6;</code>
       *
       * <pre>
       *偏移x
       * </pre>
       */
      public Builder clearSkewX() {
        bitField0_ = (bitField0_ & ~0x00000020);
        skewX_ = 0F;
        
        return this;
      }

      // required float skewY = 7;
      private float skewY_ ;
      /**
       * <code>required float skewY = 7;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public boolean hasSkewY() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required float skewY = 7;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public float getSkewY() {
        return skewY_;
      }
      /**
       * <code>required float skewY = 7;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder setSkewY(float value) {
        bitField0_ |= 0x00000040;
        skewY_ = value;
        
        return this;
      }
      /**
       * <code>required float skewY = 7;</code>
       *
       * <pre>
       *偏移y
       * </pre>
       */
      public Builder clearSkewY() {
        bitField0_ = (bitField0_ & ~0x00000040);
        skewY_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_AI_FIRE_MSG)
    }

    static {
      defaultInstance = new STC_AI_FIRE_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_AI_FIRE_MSG)
  }

  public interface STC_DROP_LOCATION_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    int getId();

    // required uint32 moneyType = 2;
    /**
     * <code>required uint32 moneyType = 2;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    boolean hasMoneyType();
    /**
     * <code>required uint32 moneyType = 2;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    int getMoneyType();

    // required float x = 4;
    /**
     * <code>required float x = 4;</code>
     */
    boolean hasX();
    /**
     * <code>required float x = 4;</code>
     */
    float getX();

    // required float y = 5;
    /**
     * <code>required float y = 5;</code>
     */
    boolean hasY();
    /**
     * <code>required float y = 5;</code>
     */
    float getY();

    // required float z = 6;
    /**
     * <code>required float z = 6;</code>
     */
    boolean hasZ();
    /**
     * <code>required float z = 6;</code>
     */
    float getZ();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_DROP_LOCATION_MSG}
   *
   * <pre>
   *战场掉落主推消息
   * </pre>
   */
  public static final class STC_DROP_LOCATION_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_DROP_LOCATION_MSGOrBuilder {
    // Use STC_DROP_LOCATION_MSG.newBuilder() to construct.
    private STC_DROP_LOCATION_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_DROP_LOCATION_MSG(boolean noInit) {}

    private static final STC_DROP_LOCATION_MSG defaultInstance;
    public static STC_DROP_LOCATION_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_DROP_LOCATION_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_DROP_LOCATION_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              moneyType_ = input.readUInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000004;
              x_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000008;
              y_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000010;
              z_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_DROP_LOCATION_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_DROP_LOCATION_MSG>() {
      public STC_DROP_LOCATION_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_DROP_LOCATION_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_DROP_LOCATION_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // required uint32 moneyType = 2;
    public static final int MONEYTYPE_FIELD_NUMBER = 2;
    private int moneyType_;
    /**
     * <code>required uint32 moneyType = 2;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    public boolean hasMoneyType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 moneyType = 2;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    public int getMoneyType() {
      return moneyType_;
    }

    // required float x = 4;
    public static final int X_FIELD_NUMBER = 4;
    private float x_;
    /**
     * <code>required float x = 4;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float x = 4;</code>
     */
    public float getX() {
      return x_;
    }

    // required float y = 5;
    public static final int Y_FIELD_NUMBER = 5;
    private float y_;
    /**
     * <code>required float y = 5;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float y = 5;</code>
     */
    public float getY() {
      return y_;
    }

    // required float z = 6;
    public static final int Z_FIELD_NUMBER = 6;
    private float z_;
    /**
     * <code>required float z = 6;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float z = 6;</code>
     */
    public float getZ() {
      return z_;
    }

    private void initFields() {
      id_ = 0;
      moneyType_ = 0;
      x_ = 0F;
      y_ = 0F;
      z_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMoneyType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, moneyType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(4, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(5, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(6, z_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, moneyType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, z_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_DROP_LOCATION_MSG}
     *
     * <pre>
     *战场掉落主推消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        moneyType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.moneyType_ = moneyType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.z_ = z_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasMoneyType()) {
          setMoneyType(other.getMoneyType());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasMoneyType()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasZ()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_LOCATION_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // required uint32 moneyType = 2;
      private int moneyType_ ;
      /**
       * <code>required uint32 moneyType = 2;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public boolean hasMoneyType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 moneyType = 2;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public int getMoneyType() {
        return moneyType_;
      }
      /**
       * <code>required uint32 moneyType = 2;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public Builder setMoneyType(int value) {
        bitField0_ |= 0x00000002;
        moneyType_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 moneyType = 2;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public Builder clearMoneyType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        moneyType_ = 0;
        
        return this;
      }

      // required float x = 4;
      private float x_ ;
      /**
       * <code>required float x = 4;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float x = 4;</code>
       */
      public float getX() {
        return x_;
      }
      /**
       * <code>required float x = 4;</code>
       */
      public Builder setX(float value) {
        bitField0_ |= 0x00000004;
        x_ = value;
        
        return this;
      }
      /**
       * <code>required float x = 4;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        x_ = 0F;
        
        return this;
      }

      // required float y = 5;
      private float y_ ;
      /**
       * <code>required float y = 5;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float y = 5;</code>
       */
      public float getY() {
        return y_;
      }
      /**
       * <code>required float y = 5;</code>
       */
      public Builder setY(float value) {
        bitField0_ |= 0x00000008;
        y_ = value;
        
        return this;
      }
      /**
       * <code>required float y = 5;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        y_ = 0F;
        
        return this;
      }

      // required float z = 6;
      private float z_ ;
      /**
       * <code>required float z = 6;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float z = 6;</code>
       */
      public float getZ() {
        return z_;
      }
      /**
       * <code>required float z = 6;</code>
       */
      public Builder setZ(float value) {
        bitField0_ |= 0x00000010;
        z_ = value;
        
        return this;
      }
      /**
       * <code>required float z = 6;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000010);
        z_ = 0F;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_DROP_LOCATION_MSG)
    }

    static {
      defaultInstance = new STC_DROP_LOCATION_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_DROP_LOCATION_MSG)
  }

  public interface STC_DROP_CLEAR_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    int getId();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_DROP_CLEAR_MSG}
   *
   * <pre>
   *战场掉落消失
   * </pre>
   */
  public static final class STC_DROP_CLEAR_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_DROP_CLEAR_MSGOrBuilder {
    // Use STC_DROP_CLEAR_MSG.newBuilder() to construct.
    private STC_DROP_CLEAR_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_DROP_CLEAR_MSG(boolean noInit) {}

    private static final STC_DROP_CLEAR_MSG defaultInstance;
    public static STC_DROP_CLEAR_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_DROP_CLEAR_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_DROP_CLEAR_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_DROP_CLEAR_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_DROP_CLEAR_MSG>() {
      public STC_DROP_CLEAR_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_DROP_CLEAR_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_DROP_CLEAR_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     *
     * <pre>
     *掉落实例id
     * </pre>
     */
    public int getId() {
      return id_;
    }

    private void initFields() {
      id_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_DROP_CLEAR_MSG}
     *
     * <pre>
     *战场掉落消失
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_CLEAR_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       *掉落实例id
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_DROP_CLEAR_MSG)
    }

    static {
      defaultInstance = new STC_DROP_CLEAR_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_DROP_CLEAR_MSG)
  }

  public interface STC_DROP_DRAW_MSGOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required uint32 moneyType = 1;
    /**
     * <code>required uint32 moneyType = 1;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    boolean hasMoneyType();
    /**
     * <code>required uint32 moneyType = 1;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    int getMoneyType();

    // required uint32 count = 2;
    /**
     * <code>required uint32 count = 2;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    boolean hasCount();
    /**
     * <code>required uint32 count = 2;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    int getCount();
  }
  /**
   * Protobuf type {@code PROTO_BATTLE.STC_DROP_DRAW_MSG}
   *
   * <pre>
   *领取战场掉落奖励
   * </pre>
   */
  public static final class STC_DROP_DRAW_MSG extends
      com.google.protobuf.GeneratedMessageLite
      implements STC_DROP_DRAW_MSGOrBuilder {
    // Use STC_DROP_DRAW_MSG.newBuilder() to construct.
    private STC_DROP_DRAW_MSG(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private STC_DROP_DRAW_MSG(boolean noInit) {}

    private static final STC_DROP_DRAW_MSG defaultInstance;
    public static STC_DROP_DRAW_MSG getDefaultInstance() {
      return defaultInstance;
    }

    public STC_DROP_DRAW_MSG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private STC_DROP_DRAW_MSG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              moneyType_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              count_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<STC_DROP_DRAW_MSG> PARSER =
        new com.google.protobuf.AbstractParser<STC_DROP_DRAW_MSG>() {
      public STC_DROP_DRAW_MSG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new STC_DROP_DRAW_MSG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<STC_DROP_DRAW_MSG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 moneyType = 1;
    public static final int MONEYTYPE_FIELD_NUMBER = 1;
    private int moneyType_;
    /**
     * <code>required uint32 moneyType = 1;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    public boolean hasMoneyType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 moneyType = 1;</code>
     *
     * <pre>
     *金币类型 3：金币 4：钻石
     * </pre>
     */
    public int getMoneyType() {
      return moneyType_;
    }

    // required uint32 count = 2;
    public static final int COUNT_FIELD_NUMBER = 2;
    private int count_;
    /**
     * <code>required uint32 count = 2;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    public boolean hasCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 count = 2;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    public int getCount() {
      return count_;
    }

    private void initFields() {
      moneyType_ = 0;
      count_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMoneyType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, moneyType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, count_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, moneyType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, count_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code PROTO_BATTLE.STC_DROP_DRAW_MSG}
     *
     * <pre>
     *领取战场掉落奖励
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG, Builder>
        implements com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSGOrBuilder {
      // Construct using com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        moneyType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        count_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG getDefaultInstanceForType() {
        return com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG.getDefaultInstance();
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG build() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG buildPartial() {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG result = new com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.moneyType_ = moneyType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.count_ = count_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG other) {
        if (other == com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG.getDefaultInstance()) return this;
        if (other.hasMoneyType()) {
          setMoneyType(other.getMoneyType());
        }
        if (other.hasCount()) {
          setCount(other.getCount());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMoneyType()) {
          
          return false;
        }
        if (!hasCount()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.ourpalm.tank.message.BATTLE_MSG.STC_DROP_DRAW_MSG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 moneyType = 1;
      private int moneyType_ ;
      /**
       * <code>required uint32 moneyType = 1;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public boolean hasMoneyType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 moneyType = 1;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public int getMoneyType() {
        return moneyType_;
      }
      /**
       * <code>required uint32 moneyType = 1;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public Builder setMoneyType(int value) {
        bitField0_ |= 0x00000001;
        moneyType_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 moneyType = 1;</code>
       *
       * <pre>
       *金币类型 3：金币 4：钻石
       * </pre>
       */
      public Builder clearMoneyType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        moneyType_ = 0;
        
        return this;
      }

      // required uint32 count = 2;
      private int count_ ;
      /**
       * <code>required uint32 count = 2;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 count = 2;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public int getCount() {
        return count_;
      }
      /**
       * <code>required uint32 count = 2;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public Builder setCount(int value) {
        bitField0_ |= 0x00000002;
        count_ = value;
        
        return this;
      }
      /**
       * <code>required uint32 count = 2;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        count_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PROTO_BATTLE.STC_DROP_DRAW_MSG)
    }

    static {
      defaultInstance = new STC_DROP_DRAW_MSG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PROTO_BATTLE.STC_DROP_DRAW_MSG)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
